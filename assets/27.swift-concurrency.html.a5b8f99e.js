import{_ as i,r as n,o as d,c as s,a as e,d as l,b as o,e as a}from"./app.4659d0e0.js";const c={},r=a('<h1 id="swift基础-并发性" tabindex="-1"><a class="header-anchor" href="#swift基础-并发性" aria-hidden="true">#</a> Swift基础 - 并发性</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html</p><p>Swift内置支持以结构化方式编写异步和并行代码。<em>异步代码</em>可以暂停并稍后恢复，尽管一次只执行一个程序。在程序中暂停和恢复代码可以让它继续在更新用户界面等短期操作上取得进展，同时继续处理长期运行的操作，如通过网络获取数据或解析文件。<em>并行代码</em>意味着多个代码同时运行——例如，一台配备四核处理器的计算机可以同时运行四条代码，每个核心执行其中一项任务。使用并行和异步代码的程序一次执行多个操作；它暂停等待外部系统的操作，并使其更容易以内存安全的方式编写此代码。</p><p>并行或异步代码的额外调度灵活性也增加了复杂性。Swift允许您以允许一些编译时检查的方式表达您的意图——例如，您可以使用参与者安全地访问可变状态。然而，向缓慢或错误的代码添加并发并不能保证它会变得快速或正确。事实上，添加并发性甚至可能会使您的代码更难调试。然而，使用Swift对代码中需要并发的并发的语言级支持意味着Swift可以帮助您在编译时发现问题。</p><p>本章的其余部分使用并发一词来指代异步和并行代码的常见组合。</p><p>注意</p><p>如果您以前编写过并发代码，您可能习惯于处理线程。Swift 中的并发模型构建在线程之上，但您不会直接与它们交互。Swift中的异步函数可以放弃它正在运行的线程，这允许另一个异步函数在第一个函数被阻止时在该线程上运行。</p><p>虽然可以在不使用Swift语言支持的情况下编写并发代码，但该代码往往更难阅读。例如，以下代码下载照片名称列表，下载该列表中的第一张照片，并向用户显示该照片：</p><ol><li>listPhotos(inGallery: &quot;Summer Vacation&quot;) { photoNames in</li><li>​ let sortedNames = photoNames.sorted()</li><li>​ let name = sortedNames[0]</li><li>​ downloadPhoto(named: name) { photo in</li><li>​ show(photo)</li><li>​ }</li><li>}</li></ol><p>即使在这种简单的情况下，由于代码必须编写为一系列完成处理程序，您最终也会编写嵌套闭包。在这种风格下，具有深嵌套的更复杂的代码可能会很快变得笨拙。</p><h2 id="定义和调用异步函数" tabindex="-1"><a class="header-anchor" href="#定义和调用异步函数" aria-hidden="true">#</a> 定义和调用异步函数</h2><p><em>异步函数</em>或<em>异步方法</em>是一种特殊的函数或方法，可以在执行过程中暂停。这与普通的同步函数和方法形成鲜明对比，这些函数和方法要么运行到完成，要么抛出错误，要么永远不会返回。异步函数或方法仍然可以做这三件事之一，但当它等待某事时，它也可以在中间暂停。在异步函数或方法的主体中，您可以标记可以暂停执行的每个地方。</p><p>要指示函数或方法是异步的，您将<code>async</code>关键字写入其参数后的声明中，类似于您如何使用<code>throws</code>标记抛出函数。如果函数或方法返回值，则在返回箭头（<code>-&gt;</code>）之前写入<code>async</code>。例如，以下是您可以在图库中获取照片名称的方法：</p><ol><li>func listPhotos(inGallery name: String) async -&gt; [String] {</li><li>​ let result = // ... some asynchronous networking code ...</li><li>​ return result</li><li>}</li></ol><p>对于既异步又抛出的函数或方法，您在<code>throws</code>前编写<code>async</code>。</p><p>当调用异步方法时，执行暂停，直到该方法返回。您在通话前写下<code>await</code>，以标记可能的暂停点。这就像在调用抛出函数时<code>try</code>写入，如果出现错误，则标记程序流程的可能更改。在异步方法中，<em>只有当</em>您调用另一个异步方法时，执行流程才会暂停——暂停从来都不是隐式或先发制人的——这意味着每个可能的暂停点都标有<code>await</code>。</p><p>例如，下面的代码获取图库中所有图片的名称，然后显示第一张图片：</p><ol><li>let photoNames = await listPhotos(inGallery: &quot;Summer Vacation&quot;)</li><li>let sortedNames = photoNames.sorted()</li><li>let name = sortedNames[0]</li><li>let photo = await downloadPhoto(named: name)</li><li>show(photo)</li></ol><p>由于<code>listPhotos(inGallery:)</code>和<code>downloadPhoto(named:)</code>功能都需要提出网络请求，因此它们可能需要相对较长的时间才能完成。通过在返回箭头之前写入<code>async</code>使它们都异步，可以让应用程序的其余代码在该代码等待图片准备就绪时继续运行。</p><p>为了了解上述示例的并发性质，这里有一个可能的执行顺序：</p><ol><li>代码从第一行开始运行，一直运行到第一行<code>await</code>。它调用<code>listPhotos(inGallery:)</code>函数，并在等待该函数返回时暂停执行。</li><li>当此代码的执行暂停时，同一程序中还会运行一些其他并发代码。例如，一个长期运行的背景任务可能会继续更新新照片库列表。该代码也会运行到下一个暂停点，以<code>await</code>为标记，或直到它完成。</li><li><code>listPhotos(inGallery:)</code>返回后，此代码从那时开始继续执行。它分配返回到<code>photoNames</code>值。</li><li>定义<code>sortedNames</code>和<code>name</code>行是常规的同步代码。由于这些线路上没有标记<code>await</code>，因此没有任何可能的暂停点。</li><li>下一个<code>await</code>标志着对<code>downloadPhoto(named:)</code>函数的调用。此代码再次暂停执行，直到该函数返回，使其他并发代码有机会运行。</li><li><code>downloadPhoto(named:)</code>返回后，其返回值被分配给<code>photo</code>，然后在调用<code>show(_:)</code>时作为参数传递。</li></ol><p>标记为<code>await</code>的代码中可能的暂停点表示，当前代码可能会在等待异步函数或方法返回时暂停执行。这也被称为<em>生成线程</em>，因为在幕后，Swift暂停在当前线程上执行代码，而是在该线程上运行一些其他代码。由于<code>await</code>的代码需要能够暂停执行，因此程序中的某些地方只能调用异步函数或方法：</p><ul><li>异步函数、方法或属性主体中的代码。</li><li>标记为<code>@main</code>结构、类或枚举的静态<code>main()</code>方法中的代码。</li><li>非结构化子任务中的代码，如下所示。</li></ul><p>注意</p>',24),h={href:"https://developer.apple.com/documentation/swift/task/3862701-sleep",target:"_blank",rel:"noopener noreferrer"},p=e("code",null,"Task.sleep(nanoseconds:)",-1),m=e("code",null,"listPhotos(inGallery:)",-1),u=e("code",null,"sleep(nanoseconds:)",-1),w=a('<ol><li>func listPhotos(inGallery name: String) async throws -&gt; [String] {</li><li>​ try await Task.sleep(nanoseconds: 2 * 1_000_000_000) // Two seconds</li><li>​ return [&quot;IMG001&quot;, &quot;IMG99&quot;, &quot;IMG0404&quot;]</li><li>}</li></ol><h2 id="异步序列" tabindex="-1"><a class="header-anchor" href="#异步序列" aria-hidden="true">#</a> 异步序列</h2><p>在数组的所有元素准备就绪后，上一节中的<code>listPhotos(inGallery:)</code>函数会异步返回整个数组。另一种方法是使用<em>异步序列</em>一次等待集合的一个元素。以下是异步序列迭代的样子：</p><ol><li>import Foundation</li><li></li><li>let handle = FileHandle.standardInput</li><li>for try await line in handle.bytes.lines {</li><li>​ print(line)</li><li>}</li></ol><p>上面的示例不是使用普通的<code>for</code>-<code>in</code>循环，而是在它之后写<code>for</code>和<code>await</code>。与您调用异步函数或方法时一样，写入<code>await</code>表示可能的悬浮点。当等待下一个元素可用时，<code>await</code>循环可能会在每次迭代开始时暂停执行。</p>',5),_={href:"https://developer.apple.com/documentation/swift/sequence",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"Sequence",-1),g=e("code",null,"for",-1),k=e("code",null,"in",-1),y={href:"https://developer.apple.com/documentation/swift/asyncsequence",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"AsyncSequence",-1),b=e("code",null,"for",-1),x=e("code",null,"await",-1),S=e("code",null,"in",-1),N=a('<h2 id="并行调用异步函数" tabindex="-1"><a class="header-anchor" href="#并行调用异步函数" aria-hidden="true">#</a> 并行调用异步函数</h2><p>调用带有<code>await</code>的异步函数一次只运行一段代码。当异步代码运行时，调用者等待该代码完成，然后再继续运行下一行代码。例如，要从图库中获取前三张照片，您可以等待<code>downloadPhoto(named:)</code>功能的三次调用，具体如下：</p><ol><li>let firstPhoto = await downloadPhoto(named: photoNames[0])</li><li>let secondPhoto = await downloadPhoto(named: photoNames[1])</li><li>let thirdPhoto = await downloadPhoto(named: photoNames[2])</li><li></li><li>let photos = [firstPhoto, secondPhoto, thirdPhoto]</li><li>show(photos)</li></ol><p>这种方法有一个重要的缺点：虽然下载是异步的，并允许在进行其他工作时进行，但一次只运行一个<code>downloadPhoto(named:)</code>的调用。每张照片在下一张照片开始下载之前都会完全下载。然而，这些操作无需等待——每张照片都可以独立下载，甚至可以同时下载。</p><p>要调用异步函数并让它与周围的代码并行运行，请在定义常量时在<code>let</code>前面写入<code>async</code>，然后在每次使用常量时写入<code>await</code>。</p><ol><li>async let firstPhoto = downloadPhoto(named: photoNames[0])</li><li>async let secondPhoto = downloadPhoto(named: photoNames[1])</li><li>async let thirdPhoto = downloadPhoto(named: photoNames[2])</li><li></li><li>let photos = await [firstPhoto, secondPhoto, thirdPhoto]</li><li>show(photos)</li></ol><p>在本例中，所有三个<code>downloadPhoto(named:)</code>的调用都无需等待前一个调用完成即可开始。如果有足够的系统资源可用，它们可以同时运行。这些函数调用都没有标记为<code>await</code>，因为代码不会暂停等待函数的结果。相反，执行一直持续到定义<code>photos</code>行——此时，程序需要这些异步调用的结果，因此您写<code>await</code>暂停执行，直到所有三张照片完成下载。</p><p>以下是您如何思考这两种方法之间的差异：</p><ul><li>当以下行上的代码取决于该函数的结果时，使用<code>await</code>调用异步函数。这创造了按顺序进行的工作。</li><li>当您直到代码稍后才需要结果时，使用<code>async``let</code>调用异步函数。这创造了可以并行进行的工作。</li><li><code>await</code>和<code>async``let</code>允许其他代码在暂停时运行。</li><li>在这两种情况下，您都会用<code>await</code>标记可能的悬浮点，以指示如果需要，执行将暂停，直到返回异步函数。</li></ul><p>您还可以在同一代码中混合这两种方法。</p><h2 id="任务和任务组" tabindex="-1"><a class="header-anchor" href="#任务和任务组" aria-hidden="true">#</a> 任务和任务组</h2><p><em>任务</em>是可以作为程序的一部分异步运行的工作单元。所有异步代码都作为某些任务的一部分运行。上一节中描述的<code>async``let</code>语法为您创建一个子任务。您还可以创建一个任务组，并将子任务添加到该组中，这使您可以更好地控制优先级和取消，并允许您创建动态数量的任务。</p><p>任务排列在层次结构中。任务组中的每个任务都有相同的父任务，每个任务都可以有子任务。由于任务和任务组之间的显式关系，这种方法被称为<em>结构化并发</em>。虽然您承担了一些正确性的责任，但任务之间的明确父子关系允许Swift为您处理一些行为，例如传播取消，并允许Swift在编译时检测到一些错误。</p><ol><li>await withTaskGroup(of: Data.self) { taskGroup in</li><li>​ let photoNames = await listPhotos(inGallery: &quot;Summer Vacation&quot;)</li><li>​ for name in photoNames {</li><li>​ taskGroup.addTask { await downloadPhoto(named: name) }</li><li>​ }</li><li>}</li></ol>',14),T={href:"https://developer.apple.com/documentation/swift/taskgroup",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"TaskGroup",-1),q=e("h3",{id:"非结构化并发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#非结构化并发","aria-hidden":"true"},"#"),o(" 非结构化并发")],-1),G=e("em",null,"结构化任务",-1),I={href:"https://developer.apple.com/documentation/swift/task/3856790-init",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"Task.init(priority:operation:)",-1),C=e("em",null,"分离任务",-1),V={href:"https://developer.apple.com/documentation/swift/task/3856786-detached",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"Task.detached(priority:operation:)",-1),A=e("ol",null,[e("li",null,"let newPhoto = // ... some photo data ..."),e("li",null,"let handle = Task {"),e("li",null,'​ return await add(newPhoto, toGalleryNamed: "Spring Adventures")'),e("li",null,"}"),e("li",null,"let result = await handle.value")],-1),B={href:"https://developer.apple.com/documentation/swift/task",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"Task",-1),D=e("h3",{id:"任务取消",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#任务取消","aria-hidden":"true"},"#"),o(" 任务取消")],-1),F=e("p",null,"Swift并发使用合作取消模型。每个任务都会检查它是否在执行的适当点被取消，并以任何适当的方式响应取消。根据您正在做的工作，这通常意味着以下内容之一：",-1),H=e("ul",null,[e("li",null,[o("抛出错误，比如"),e("code",null,"CancellationError")]),e("li",null,[o("返回"),e("code",null,"nil"),o("或空收藏")]),e("li",null,"退回部分完成的工作")],-1),O={href:"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"Task.checkCancellation()",-1),z=e("code",null,"CancellationError",-1),J={href:"https://developer.apple.com/documentation/swift/task/3814832-iscancelled",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"Task.isCancelled",-1),Q={href:"https://developer.apple.com/documentation/swift/task/3851218-cancel",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"Task.cancel()",-1),U=e("h2",{id:"演员",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#演员","aria-hidden":"true"},"#"),o(" 演员")],-1),W={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID89",target:"_blank",rel:"noopener noreferrer"},X=a("<ol><li>actor TemperatureLogger {</li><li>​ let label: String</li><li>​ var measurements: [Int]</li><li>​ private(set) var max: Int</li><li></li><li>​ init(label: String, measurement: Int) {</li><li>​ self.label = label</li><li>​ self.measurements = [measurement]</li><li>​ self.max = measurement</li><li>​ }</li><li>}</li></ol><p>您介绍一个带有<code>actor</code>关键字的演员，然后在一对大括号中定义。<code>TemperatureLogger</code>参与者具有演员以外的其他代码可以访问的属性，并限制<code>max</code>属性，因此只有参与者内部的代码可以更新最大值。</p><p>您可以使用与结构和类相同的初始化器语法创建参与者的实例。当您访问演员的属性或方法时，您可以使用<code>await</code>来标记潜在的暂停点——例如：</p><ol><li>let logger = TemperatureLogger(label: &quot;Outdoors&quot;, measurement: 25)</li><li>print(await logger.max)</li><li>// Prints &quot;25&quot;</li></ol><p>在本例中，访问<code>logger.max</code>是一个可能的悬架点。由于参与者一次只允许一个任务访问其可变状态，如果来自另一个任务的代码已经在与记录器交互，则该代码在等待访问属性时暂停。</p><p>相比之下，作为参与者一部分的代码在访问参与者的属性时不会写入<code>await</code>。例如，这里有一个用新温度更新<code>TemperatureLogger</code>的方法：</p><ol><li>extension TemperatureLogger {</li><li>​ func update(with measurement: Int) {</li><li>​ measurements.append(measurement)</li><li>​ if measurement &gt; max {</li><li>​ max = measurement</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>The <code>update(with:)</code> method is already running on the actor, so it doesn’t mark its access to properties like <code>max</code> with <code>await</code>. This method also shows one of the reasons why actors allow only one task at a time to interact with their mutable state: Some updates to an actor’s state temporarily break invariants. The <code>TemperatureLogger</code> actor keeps track of a list of temperatures and a maximum temperature, and it updates the maximum temperature when you record a new measurement. In the middle of an update, after appending the new measurement but before updating <code>max</code>, the temperature logger is in a temporary inconsistent state. Preventing multiple tasks from interacting with the same instance simultaneously prevents problems like the following sequence of events:</p><ol><li>您的代码调用<code>update(with:)</code>方法。它首先更新<code>measurements</code>阵列。</li><li>在代码可以更新<code>max</code>之前，其他地方的代码会读取最大值和温度数组。</li><li>您的代码通过更改<code>max</code>完成更新。</li></ol><p>在这种情况下，在其他地方运行的代码会读取错误的信息，因为它对行为者的访问在<code>update(with:)</code>的调用中交织在一起，而数据暂时无效。在使用Swift角色时，您可以防止这个问题，因为它们一次只允许在其状态上执行一次操作，并且该代码只能在<code>await</code>标记暂停点的地方中断。由于<code>update(with:)</code>不包含任何暂停点，因此没有其他代码可以在更新过程中访问数据。</p><p>如果您尝试从演员外部访问这些属性，就像使用类实例一样，您将收到编译时错误；例如：</p><ol><li>print(logger.max) // Error</li></ol><p>在不写入的情况下访问<code>logger.max</code>失败，因为演员的属性是该演员孤立的本地状态的一部分。Swift保证只有演员内部的代码才能访问演员的本地状态。这种保证被称为<em>演员隔离</em>。</p>",13);function Y(Z,$){const t=n("ExternalLinkIcon");return d(),s("div",null,[r,e("p",null,[e("a",h,[p,l(t)]),o("方法在编写简单代码以了解并发工作原理时非常有用。这种方法什么也做不了，但至少要等待给定的纳秒数才能返回。以下是"),m,o("函数的版本，该函数使用"),u,o("来模拟等待网络操作：")]),w,e("p",null,[o("就像您可以通过添加"),e("a",_,[f,l(t)]),o("协议的一致性在"),g,o("-"),k,o("循环中使用自己的类型一样，您可以通过添加对"),e("a",y,[P,l(t)]),o("协议的一致性在"),b,o("-"),x,o("-"),S,o("循环中使用自己的类型。")]),N,e("p",null,[o("有关任务组的更多信息，请参阅"),e("a",T,[v,l(t)]),o("。")]),q,e("p",null,[o("除了前几节中描述的结构化并发方法外，Swift还支持非结构化并发。与任务组中的任务不同，非"),G,o("没有父任务。您可以完全灵活地以任何程序需要的方式管理非结构化任务，但您也要对其正确性承担全部责任。要创建在当前参与者上运行的非结构化任务，请调用"),e("a",I,[L,l(t)]),o("初始化器。要创建不属于当前参与者的非结构化任务，更具体地说，称为"),C,o("，请调用"),e("a",V,[E,l(t)]),o("类方法。这两个操作都返回一个任务句柄，允许您与任务交互——例如，等待其结果或取消它。")]),A,e("p",null,[o("有关管理独立任务的更多信息，请参阅"),e("a",B,[M,l(t)]),o("。")]),D,F,H,e("p",null,[o("要检查取消，请调用"),e("a",O,[j,l(t)]),o("，如果任务已取消，则会抛出"),z,o("，要么检查"),e("a",J,[K,l(t)]),o("的值，并在您自己的代码中处理取消。例如，从图库下载照片的任务可能需要删除部分下载并关闭网络连接。")]),e("p",null,[o("要手动传播取消，请调用"),e("a",Q,[R,l(t)]),o("。")]),U,e("p",null,[o("与类一样，参与者是引用类型，因此类"),e("a",W,[o("是引用类型"),l(t)]),o("中的值类型和引用类型的比较适用于参与者和类。与类不同，参与者一次只允许一个任务访问其可变状态，这使得多个任务中的代码可以安全地与参与者的同一实例交互。例如，这里有一个记录温度的演员：")]),X])}const oe=i(c,[["render",Y],["__file","27.swift-concurrency.html.vue"]]);export{oe as default};
