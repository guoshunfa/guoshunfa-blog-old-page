import{_ as s,r as d,o as e,c as a,a as t,b as r,d as o,e as h}from"./app.4659d0e0.js";const g={},i=t("h1",{id:"加密算法介绍",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#加密算法介绍","aria-hidden":"true"},"#"),r(" 加密算法介绍")],-1),c=t("h2",{id:"_1-数字签名",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-数字签名","aria-hidden":"true"},"#"),r(" 1. 数字签名")],-1),l=t("p",null,"数字签名，简单来说就是通过提供 可鉴别 的 数字信息 验证 自身身份 的一种方式。一套 数字签名 通常定义两种 互补 的运算，一个用于 签名，另一个用于 验证。分别由 发送者 持有能够 代表自己身份 的 私钥 (私钥不可泄露),由 接受者 持有与私钥对应的 公钥 ，能够在 接受 到来自发送者信息时用于 验证 其身份。",-1),_=t("strong",null,"加密过程",-1),p={href:"https://link.csdn.net/?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F25912483",target:"_blank",rel:"noopener noreferrer"},b=t("strong",null,"签名",-1),u=t("strong",null,"证明发送方的身份",-1),S=t("strong",null,"中间人攻击",-1),f=t("strong",null,"跨域身份伪造",-1),E=t("strong",null,"设备认证、用户认证、第三方认证",-1),x=t("strong",null,"签名算法",-1),A=h('<h2 id="_2-加密和解密" tabindex="-1"><a class="header-anchor" href="#_2-加密和解密" aria-hidden="true">#</a> 2. 加密和解密</h2><h3 id="_2-1-加密" tabindex="-1"><a class="header-anchor" href="#_2-1-加密" aria-hidden="true">#</a> 2.1. 加密</h3><p><strong>数据加密</strong> 的基本过程，就是对原来为 <strong>明文</strong> 的文件或数据按 <strong>某种算法</strong> 进行处理，使其成为 <strong>不可读</strong> 的一段代码，通常称为 <strong>“密文”</strong>。通过这样的途径，来达到 <strong>保护数据</strong> 不被 <strong>非法人窃取</strong>、阅读的目的。</p><h3 id="_2-2-解密" tabindex="-1"><a class="header-anchor" href="#_2-2-解密" aria-hidden="true">#</a> 2.2. 解密</h3><p><strong>加密</strong> 的 <strong>逆过程</strong> 为 <strong>解密</strong>，即将该 <strong>编码信息</strong> 转化为其 <strong>原来数据</strong> 的过程。</p><h2 id="_3-对称加密和非对称加密" tabindex="-1"><a class="header-anchor" href="#_3-对称加密和非对称加密" aria-hidden="true">#</a> 3. 对称加密和非对称加密</h2><p>加密算法分 <strong>对称加密</strong> 和 <strong>非对称加密</strong>，其中对称加密算法的加密与解密 <strong>密钥相同</strong>，非对称加密算法的加密密钥与解密 <strong>密钥不同</strong>，此外，还有一类 <strong>不需要密钥</strong> 的 <strong>散列算法</strong>。</p><blockquote><p>常见的 <strong>对称加密</strong> 算法主要有 DES、3DES、AES 等，常见的 <strong>非对称算法</strong> 主要有 RSA、DSA 等，<strong>散列算法</strong> 主要有 SHA-1、MD5 等。</p></blockquote><h3 id="_3-1-对称加密" tabindex="-1"><a class="header-anchor" href="#_3-1-对称加密" aria-hidden="true">#</a> 3.1. 对称加密</h3><p><strong>对称加密算法</strong> 是应用较早的加密算法，又称为 <strong>共享密钥加密算法</strong>。在 <strong>对称加密算法</strong> 中，使用的密钥只有一个，<strong>发送</strong> 和 <strong>接收</strong> 双方都使用这个密钥对数据进行 <strong>加密</strong> 和 <strong>解密</strong>。这就要求加密和解密方事先都必须知道加密的密钥。</p><p><strong>数据加密过程</strong>：在对称加密算法中，<strong>数据发送方</strong> 将 <strong>明文</strong> (原始数据) 和 <strong>加密密钥</strong> 一起经过特殊 <strong>加密处理</strong>，生成复杂的 <strong>加密密文</strong> 进行发送。</p><p><strong>数据解密过程</strong>：<strong>数据接收方</strong> 收到密文后，若想读取原数据，则需要使用 <strong>加密使用的密钥</strong> 及相同算法的 <strong>逆算法</strong> 对加密的密文进行解密，才能使其恢复成 <strong>可读明文</strong>。</p><h3 id="_3-2-非对称加密" tabindex="-1"><a class="header-anchor" href="#_3-2-非对称加密" aria-hidden="true">#</a> 3.2. 非对称加密</h3><p><strong>非对称加密算法</strong>，又称为 <strong>公开密钥加密算法</strong>。它需要两个密钥，一个称为 <strong>公开密钥</strong> (public key)，即 公钥，另一个称为 私有密钥 (private key)，即 <strong>私钥</strong>。</p><p>因为 <strong>加密</strong> 和 <strong>解密</strong> 使用的是两个不同的密钥，所以这种算法称为 <strong>非对称加密算法</strong>。</p><p>如果使用 <strong>公钥</strong> 对数据 <strong>进行加密</strong>，只有用对应的 <strong>私钥</strong> 才能 <strong>进行解密</strong>。</p><p>如果使用 <strong>私钥</strong> 对数据 <strong>进行加密</strong>，只有用对应的 <strong>公钥</strong> 才能 <strong>进行解密</strong>。</p><p>**例子：**甲方生成 <strong>一对密钥</strong> 并将其中的一把作为 公钥 向其它人公开，得到该公钥的 <strong>乙方</strong> 使用该密钥对机密信息 <strong>进行加密</strong> 后再发送给甲方，甲方再使用自己保存的另一把 <strong>专用密钥 (私钥)</strong>，对 <strong>加密</strong> 后的信息 <strong>进行解密</strong>。</p><h2 id="_4-常用加密算法" tabindex="-1"><a class="header-anchor" href="#_4-常用加密算法" aria-hidden="true">#</a> 4. 常用加密算法</h2><h3 id="_4-1-常用算法描述" tabindex="-1"><a class="header-anchor" href="#_4-1-常用算法描述" aria-hidden="true">#</a> 4.1. 常用算法描述</h3><table><thead><tr><th>加密算法</th><th>描述</th></tr></thead><tbody><tr><td>SHA1</td><td>SHA1 是 <strong>消息摘要算法</strong>，SHA1 比 MD5 的 <strong>安全性更强</strong>。对于长度小于 2 ^ 64 位的消息，SHA1 会产生一个 160 位的 <strong>消息摘要</strong>。基于 MD5、SHA1 的信息摘要特性以及 <strong>不可逆</strong> (一般而言)，可以被应用在检查 <strong>文件完整性</strong> 以及 数字签名 等场景。</td></tr><tr><td>BASE64</td><td>1、BASE64 有自己的编码表，可编码，也可解码；解码后能得到源内容。<br>2、BASE64 编码的长度是不固定的，随着源字符串的增加而增加。<br>3、在某些不方便使用中文的地方，可以通过 BASE64 编码成可见字符，需要中文时再解码回来即可，比如 url 地址，或者 Cookie.</td></tr><tr><td>MD5</td><td>信息摘要是安全的<strong>单向哈希函数</strong>，对大小的信息输出固定长度的哈希值，单向加密、数据不可逆。<br>摘要好比指纹，每个人都是唯一的，相同的源数据，摘要也一样，不同的数据，摘要则不一样。摘要只是源数据的局部，所以想要解码回去恢复整个源数据是不行的，因为是不完整的。<br>无论是多长的输入，<code>MD5</code> 都会输出长度为 <code>128bits</code> 的一个串 (通常用 <code>16</code> <strong>进制</strong> 表示为 <code>32</code> 个字符)。</td></tr><tr><td>DES</td><td>Data Encrytion Standard（数据加密标准) , 特点：1. 对称加密 2. 同一个 SECRET_KEY（密钥）</td></tr><tr><td>AES</td><td>Advanced Encrytion Standard（高级加密标准），特点：1. 对称加密 2. 一个 SECRET_KEY（密钥）扩展成多个子 SK，轮加密</td></tr><tr><td>RSA</td><td><code>RSA</code> 加密算法是目前最有影响力的 <strong>公钥加密算法</strong>，并且被普遍认为是目前 <strong>最优秀的公钥方案</strong> 之一。<code>RSA</code> 是第一个能同时用于 <strong>加密</strong> 和 <strong>数字签名</strong> 的算法，它能够 <strong>抵抗</strong> 到目前为止已知的 <strong>所有密码攻击</strong>，已被 <code>ISO</code> 推荐为公钥数据加密标准。<br>1. 非对称加密，即：PK（PUBLIC_KEY 公钥） 与 SK（ SECRET_KEY 密钥） 不是同一个 <br>2. PK 加密时，必须用 SK 解密、反之 SK 加密时，必须用 PK 解密。<br>3. PK 决定 SK，但是 PK 很难算出 SK（数学原理：两个大质数相乘，积很难因式分解）<br>4. 速度慢，适合对少量数据加密</td></tr></tbody></table><p><img src="https://file.pandacode.cn/blog/202203101623671.png" alt="img"></p><p><img src="https://file.pandacode.cn/blog/202203101624630.png" alt="img"> <img src="https://file.pandacode.cn/blog/202203101624467.png" alt="img"></p><h3 id="_4-2-常用算法对比" tabindex="-1"><a class="header-anchor" href="#_4-2-常用算法对比" aria-hidden="true">#</a> 4.2. 常用算法对比</h3><h4 id="_4-2-1-散列算法比较" tabindex="-1"><a class="header-anchor" href="#_4-2-1-散列算法比较" aria-hidden="true">#</a> 4.2.1. 散列算法比较</h4><table><thead><tr><th>名称</th><th>安全性</th><th>速度</th></tr></thead><tbody><tr><td>SHA-1</td><td>高</td><td>慢</td></tr><tr><td>MD5</td><td>中</td><td>快</td></tr></tbody></table><h4 id="_4-2-2-对称加密算法比较" tabindex="-1"><a class="header-anchor" href="#_4-2-2-对称加密算法比较" aria-hidden="true">#</a> 4.2.2. 对称加密算法比较</h4><table><thead><tr><th>名称</th><th>密钥名称</th><th>运行速度</th><th>安全性</th><th>资源消耗</th></tr></thead><tbody><tr><td>DES</td><td>56位</td><td>较快</td><td>低</td><td>中</td></tr><tr><td>3DES</td><td>112位或168位</td><td>慢</td><td>中</td><td>高</td></tr><tr><td>AES</td><td>128、192、256位</td><td>快</td><td>高</td><td>低</td></tr></tbody></table><h4 id="_4-2-3-非对称加密算法比较" tabindex="-1"><a class="header-anchor" href="#_4-2-3-非对称加密算法比较" aria-hidden="true">#</a> 4.2.3. 非对称加密算法比较</h4><table><thead><tr><th>名称</th><th>成熟度</th><th>安全性</th><th>运算速度</th><th>资源消耗</th></tr></thead><tbody><tr><td>RSA</td><td>高</td><td>高</td><td>中</td><td>中</td></tr><tr><td>ECC</td><td>高</td><td>高</td><td>慢</td><td>高</td></tr></tbody></table><h3 id="_4-3-对称算法与非对称加密算法" tabindex="-1"><a class="header-anchor" href="#_4-3-对称算法与非对称加密算法" aria-hidden="true">#</a> 4.3. 对称算法与非对称加密算法</h3><h4 id="_4-3-1-对称算法" tabindex="-1"><a class="header-anchor" href="#_4-3-1-对称算法" aria-hidden="true">#</a> 4.3.1. 对称算法</h4><p>密钥管理：比较难，不适合互联网，一般用于内部系统</p><p>安全性：中</p><p>加密速度：快好 几个数量级 (软件加解密速度至少快 100 倍，每秒可以加解密数 M 比特 数据)，适合大数据量的加解密处理</p><h4 id="_4-3-2-非对称算法" tabindex="-1"><a class="header-anchor" href="#_4-3-2-非对称算法" aria-hidden="true">#</a> 4.3.2. 非对称算法</h4><p>密钥管理：密钥容易管理</p><p>安全性：高</p><p>加密速度：比较慢，适合 小数据量 加解密或数据签名</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>',40),m={href:"https://blog.csdn.net/baidu_22254181/article/details/82594072",target:"_blank",rel:"noopener noreferrer"},K={href:"https://blog.csdn.net/wangmx1993328/article/details/106170060",target:"_blank",rel:"noopener noreferrer"};function k(D,y){const n=d("ExternalLinkIcon");return e(),a("div",null,[i,c,l,t("blockquote",null,[t("p",null,[r("**注意：**图中 "),_,r(" 有别于 公钥加密，更多 "),t("a",p,[r("介绍戳这里"),o(n)]),r("。"),b,r(" 最根本的用途是要能够唯一 "),u,r("，防止 "),S,r("、CSRF "),f,r("。基于这一点在诸如 "),E,r(" 等认证体系中都会使用到 "),x,r(" (彼此的实现方式可能会有差异)。")])]),A,t("ul",null,[t("li",null,[t("a",m,[r("浅谈常见的七种加密算法及实现"),o(n)])]),t("li",null,[t("a",K,[r("Java 加密扩展（JCE）框架 之 Cipher 加密与解密"),o(n)])])])])}const R=s(g,[["render",k],["__file","index.html.vue"]]);export{R as default};
