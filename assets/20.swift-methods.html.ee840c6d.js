import{_ as c,r as n,o as d,c as a,a as e,b as l,d as i,e as t}from"./app.4659d0e0.js";const r={},s=e("h1",{id:"swift基础-方法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#swift基础-方法","aria-hidden":"true"},"#"),l(" Swift基础 - 方法")],-1),h=e("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/Methods.html",-1),u=e("p",null,[e("em",null,"方法"),l("是与特定类型关联的函数。类、结构和枚举都可以定义实例方法，这些方法封装了处理给定类型实例的特定任务和功能。类、结构和枚举还可以定义类型方法，这些方法与类型本身相关联。类型方法类似于Objective-C中的类方法。")],-1),p=e("p",null,"结构和枚举可以在Swift中定义方法，这一事实与C和Objective-C有很大区别。在Objective-C中，类是唯一可以定义方法的类型。在 Swift 中，您可以选择是定义类、结构还是枚举，并且仍然可以灵活地定义您创建的类型上的方法。",-1),f=e("h2",{id:"实例方法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实例方法","aria-hidden":"true"},"#"),l(" 实例方法")],-1),v=e("em",null,"实例方法",-1),m={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html",target:"_blank",rel:"noopener noreferrer"},g=t("<p>您可以在它所属类型的打开和关闭大括号中编写实例方法。实例方法可以隐式访问该类型的所有其他实例方法和属性。实例方法只能调用其所属类型的特定实例。没有现有实例，就无法孤立地调用它。</p><p>以下是定义简单<code>Counter</code>类的示例，可用于计算操作发生的次数：</p><ol><li>class Counter {</li><li>​ var count = 0</li><li>​ func increment() {</li><li>​ count += 1</li><li>​ }</li><li>​ func increment(by amount: Int) {</li><li>​ count += amount</li><li>​ }</li><li>​ func reset() {</li><li>​ count = 0</li><li>​ }</li><li>}</li></ol><p><code>Counter</code>类定义了三种实例方法：</p><ul><li><code>increment()</code>将计数器增加1。</li><li><code>increment(by: Int)</code>计数器以指定的整数量增加。</li><li><code>reset()</code>重置计数器为零。</li></ul><p><code>Counter</code>类还声明一个变量属性<code>count</code>，以跟踪当前计数器值。</p><p>您调用与属性具有相同点语法的实例方法：</p><ol><li>let counter = Counter()</li><li>// the initial counter value is 0</li><li>counter.increment()</li><li>// the counter&#39;s value is now 1</li><li>counter.increment(by: 5)</li><li>// the counter&#39;s value is now 6</li><li>counter.reset()</li><li>// the counter&#39;s value is now 0</li></ol>",8),_={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166",target:"_blank",rel:"noopener noreferrer"},k=t('<h3 id="自我财产" tabindex="-1"><a class="header-anchor" href="#自我财产" aria-hidden="true">#</a> 自我财产</h3><p>类型的每个实例都有一个名为<code>self</code>的隐式属性，这与实例本身完全等价。您使用<code>self</code>属性在自己的实例方法中引用当前实例。</p><p>上面示例中的<code>increment()</code>方法可以这样写：</p><ol><li>func increment() {</li><li>​ self.count += 1</li><li>}</li></ol><p>在实践中，您不需要经常在代码中编写<code>self</code>。如果您没有显式写入<code>self</code>，每当您在方法中使用已知的属性或方法名称时，Swift都会假设您指的是当前实例的属性或方法。<code>Counter</code>的三个实例方法中使用<code>count</code>（而不是<code>self.count</code>）证明了这一假设。</p><p>当实例方法的参数名称与该实例的属性具有相同的名称时，就会出现此规则的主要异常。在这种情况下，参数名称优先，有必要以更限定的方式引用该属性。您使用<code>self</code>属性来区分参数名称和属性名称。</p><p>在这里，<code>self</code>消除名为<code>x</code>的方法参数和也称为<code>x</code>的实例属性之间的歧义：</p><ol><li>struct Point {</li><li>​ var x = 0.0, y = 0.0</li><li>​ func isToTheRightOf(x: Double) -&gt; Bool {</li><li>​ return self.x &gt; x</li><li>​ }</li><li>}</li><li>let somePoint = Point(x: 4.0, y: 5.0)</li><li>if somePoint.isToTheRightOf(x: 1.0) {</li><li>​ print(&quot;This point is to the right of the line where x == 1.0&quot;)</li><li>}</li><li>// Prints &quot;This point is to the right of the line where x == 1.0&quot;</li></ol><p>没有<code>self</code>前缀，Swift将假设<code>x</code>的两个用法都提到了称为<code>x</code>的方法参数。</p><h3 id="从实例内方法修改值类型" tabindex="-1"><a class="header-anchor" href="#从实例内方法修改值类型" aria-hidden="true">#</a> 从实例内方法修改值类型</h3><p>结构和枚举是<em>值类型</em>。默认情况下，值类型的属性无法从其实例方法中修改。</p><p>但是，如果您需要在特定方法中修改结构或枚举的属性，您可以选择该方法的<em>突变</em>行为。然后，该方法可以从方法内部突变（即更改）其属性，并在方法结束时将其所做的任何更改写回原始结构。该方法还可以为其隐式<code>self</code>属性分配一个全新的实例，当方法结束时，该新实例将取代现有实例。</p><p>您可以通过将<code>mutating</code>关键字放在该方法的<code>func</code>关键字之前来选择加入此行为：</p><ol><li>struct Point {</li><li>​ var x = 0.0, y = 0.0</li><li>​ mutating func moveBy(x deltaX: Double, y deltaY: Double) {</li><li>​ x += deltaX</li><li>​ y += deltaY</li><li>​ }</li><li>}</li><li>var somePoint = Point(x: 1.0, y: 1.0)</li><li>somePoint.moveBy(x: 2.0, y: 3.0)</li><li>print(&quot;The point is now at ((somePoint.x), (somePoint.y))&quot;)</li><li>// Prints &quot;The point is now at (3.0, 4.0)&quot;</li></ol><p>The <code>Point</code> structure above defines a mutating <code>moveBy(x:y:)</code> method, which moves a <code>Point</code>instance by a certain amount. Instead of returning a new point, this method actually modifies the point on which it’s called. The <code>mutating</code> keyword is added to its definition to enable it to modify its properties.</p>',15),y={href:"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID256",target:"_blank",rel:"noopener noreferrer"},w=t('<ol><li>let fixedPoint = Point(x: 3.0, y: 3.0)</li><li>fixedPoint.moveBy(x: 2.0, y: 3.0)</li><li>// this will report an error</li></ol><h3 id="在突变方法中分配给自我" tabindex="-1"><a class="header-anchor" href="#在突变方法中分配给自我" aria-hidden="true">#</a> 在突变方法中分配给自我</h3><p>突变方法可以为隐式<code>self</code>属性分配一个全新的实例。上面显示的<code>Point</code>示例可以写成以下方式：</p><ol><li>struct Point {</li><li>​ var x = 0.0, y = 0.0</li><li>​ mutating func moveBy(x deltaX: Double, y deltaY: Double) {</li><li>​ self = Point(x: x + deltaX, y: y + deltaY)</li><li>​ }</li><li>}</li></ol><p>This version of the mutating <code>moveBy(x:y:)</code> method creates a new structure whose <code>x</code> and <code>y</code>values are set to the target location. The end result of calling this alternative version of the method will be exactly the same as for calling the earlier version.</p><p>枚举的突变方法可以将隐式<code>self</code>参数设置为与同一枚举不同的情况：</p><ol><li>enum TriStateSwitch {</li><li>​ case off, low, high</li><li>​ mutating func next() {</li><li>​ switch self {</li><li>​ case .off:</li><li>​ self = .low</li><li>​ case .low:</li><li>​ self = .high</li><li>​ case .high:</li><li>​ self = .off</li><li>​ }</li><li>​ }</li><li>}</li><li>var ovenLight = TriStateSwitch.low</li><li>ovenLight.next()</li><li>// ovenLight is now equal to .high</li><li>ovenLight.next()</li><li>// ovenLight is now equal to .off</li></ol><p>此示例定义了三态开关的枚举。每次调用其<code>next()</code>方法时，开关都会在三种不同的功率状态（<code>off</code>、<code>low</code>和<code>high</code>）之间循环。</p><h2 id="类型方法" tabindex="-1"><a class="header-anchor" href="#类型方法" aria-hidden="true">#</a> 类型方法</h2><p>如上所述，实例方法是您在特定类型的实例上调用的方法。您还可以定义在类型本身上调用的方法。这些方法被称为<em>类型方法</em>。您可以通过在方法的<code>func</code>关键字之前写入<code>static</code>关键字来指示类型方法。类可以使用<code>class</code>关键字，以允许子类覆盖超类对该方法的实现。</p><p>注意</p><p>在Objective-C中，您只能为Objective-C类定义类型级方法。在 Swift 中，您可以为所有类、结构和枚举定义类型级方法。每个类型方法都显式扩展到它支持的类型。</p><p>类型方法使用点语法调用，就像实例方法一样。但是，您在类型上调用类型方法，而不是在该类型的实例上调用类型方法。以下是您在名为<code>SomeClass</code>的类上调用类型方法的方法：</p><ol><li>class SomeClass {</li><li>​ class func someTypeMethod() {</li><li>​ // type method implementation goes here</li><li>​ }</li><li>}</li><li>SomeClass.someTypeMethod()</li></ol><p>在类型方法的主体中，隐式<code>self</code>属性是指类型本身，而不是该类型的实例。这意味着您可以使用<code>self</code>来消除类型属性和类型方法参数之间的歧义，就像您对实例属性和实例方法参数所做的那样。</p><p>更一般地说，您在类型方法正文中使用的任何不合格的方法和属性名称都将引用其他类型级方法和属性。类型方法可以调用另一个类型方法，使用另一个方法的名称，而无需将其前缀为类型名称。同样，结构和枚举上的类型方法可以通过使用类型属性的名称来访问类型属性，而无需类型名称前缀。</p><p>下面的示例定义了一个名为<code>LevelTracker</code>的结构，该结构跟踪玩家在游戏的不同关卡或阶段的进度。这是一个单人游戏，但可以在一台设备上存储多个玩家的信息。</p><p>游戏首次玩游戏时，游戏的所有关卡（除一级外）都已锁定。每次玩家完成关卡时，该关卡都会为设备上的所有玩家解锁。<code>LevelTracker</code>结构使用类型属性和方法来跟踪游戏的哪些关卡已解锁。它还跟踪单个玩家的当前级别。</p><ol><li>struct LevelTracker {</li><li>​ static var highestUnlockedLevel = 1</li><li>​ var currentLevel = 1</li><li></li><li>​ static func unlock(_ level: Int) {</li><li>​ if level &gt; highestUnlockedLevel { highestUnlockedLevel = level }</li><li>​ }</li><li></li><li>​ static func isUnlocked(_ level: Int) -&gt; Bool {</li><li>​ return level &lt;= highestUnlockedLevel</li><li>​ }</li><li></li><li>​ @discardableResult</li><li>​ mutating func advance(to level: Int) -&gt; Bool {</li><li>​ if LevelTracker.isUnlocked(level) {</li><li>​ currentLevel = level</li><li>​ return true</li><li>​ } else {</li><li>​ return false</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>The <code>LevelTracker</code> structure keeps track of the highest level that any player has unlocked. This value is stored in a type property called <code>highestUnlockedLevel</code>.</p><p><code>LevelTracker</code>还定义了两种类型函数，以使用<code>highestUnlockedLevel</code>属性。第一个是名为<code>unlock(_:)</code>的类型函数，每当解锁新级别时，它都会更新<code>highestUnlockedLevel</code>的值。第二个是名为<code>isUnlocked(_:)</code>的方便类型函数，如果特定级别号已解锁，则返回<code>true</code>。（请注意，这些类型方法可以访问<code>highestUnlockedLevel</code>类型属性，而无需将其写为<code>LevelTracker.highestUnlockedLevel</code>。）</p><p>除了其类型属性和类型方法外，<code>LevelTracker</code>还跟踪单个玩家在游戏中的进度。它使用名为<code>currentLevel</code>的实例属性来跟踪玩家当前正在播放的级别。</p>',22),x=e("code",null,"currentLevel",-1),b=e("code",null,"LevelTracker",-1),L=e("code",null,"advance(to:)",-1),T=e("code",null,"currentLevel",-1),P=e("code",null,"advance(to:)",-1),q=e("code",null,"currentLevel",-1),B=e("code",null,"advance(to:)",-1),C=e("code",null,"@discardableResult",-1),S={href:"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html",target:"_blank",rel:"noopener noreferrer"},U=t("<p><code>LevelTracker</code>结构与如下所示的<code>Player</code>类一起使用，以跟踪和更新单个玩家的进度：</p><ol><li>class Player {</li><li>​ var tracker = LevelTracker()</li><li>​ let playerName: String</li><li>​ func complete(level: Int) {</li><li>​ LevelTracker.unlock(level + 1)</li><li>​ tracker.advance(to: level + 1)</li><li>​ }</li><li>​ init(name: String) {</li><li>​ playerName = name</li><li>​ }</li><li>}</li></ol><p>The <code>Player</code> class creates a new instance of <code>LevelTracker</code> to track that player’s progress. It also provides a method called <code>complete(level:)</code>, which is called whenever a player completes a particular level. This method unlocks the next level for all players and updates the player’s progress to move them to the next level. (The Boolean return value of <code>advance(to:)</code> is ignored, because the level is known to have been unlocked by the call to <code>LevelTracker.unlock(_:)</code> on the previous line.)</p><p>您可以为新玩家创建<code>Player</code>类的实例，并查看玩家完成一级时会发生什么：</p><ol><li>var player = Player(name: &quot;Argyrios&quot;)</li><li>player.complete(level: 1)</li><li>print(&quot;highest unlocked level is now (LevelTracker.highestUnlockedLevel)&quot;)</li><li>// Prints &quot;highest unlocked level is now 2&quot;</li></ol><p>如果您创建了第二个玩家，并试图将该玩家移动到游戏中任何玩家尚未解锁的关卡，则设置玩家当前关卡的尝试失败：</p><ol><li>player = Player(name: &quot;Beto&quot;)</li><li>if player.tracker.advance(to: 6) {</li><li>​ print(&quot;player is now on level 6&quot;)</li><li>} else {</li><li>​ print(&quot;level 6 hasn&#39;t yet been unlocked&quot;)</li><li>}</li><li>// Prints &quot;level 6 hasn&#39;t yet been unlocked&quot;</li></ol>",7);function I(D,O){const o=n("ExternalLinkIcon");return d(),a("div",null,[s,h,u,p,f,e("p",null,[v,l("是属于特定类、结构或枚举实例的函数。它们支持这些实例的功能，要么通过提供访问和修改实例属性的方法，要么通过提供与实例目的相关的功能。实例方法具有与函数完全相同的语法，如"),e("a",m,[l("函数"),i(o)]),l("中所述。")]),g,e("p",null,[l("函数参数可以具有名称（用于函数正文）和参数标签（用于调用函数时），如"),e("a",_,[l("函数参数标签和参数名称"),i(o)]),l("所述。方法参数也是如此，因为方法只是与类型关联的函数。")]),k,e("p",null,[l("请注意，您无法在结构类型的常量上调用突变方法，因为它的属性无法更改，即使它们是变量属性，如"),e("a",y,[l("常量结构实例的存储属性"),i(o)]),l("中所述：")]),w,e("p",null,[l("To help manage the "),x,l(" property, "),b,l(" defines an instance method called "),L,l(". Before updating "),T,l(", this method checks whether the requested new level is already unlocked. The "),P,l(" method returns a Boolean value to indicate whether or not it was actually able to set "),q,l(". Because it’s not necessarily a mistake for code that calls the "),B,l(" method to ignore the return value, this function is marked with the "),C,l(" attribute. For more information about this attribute, see "),e("a",S,[l("Attributes"),i(o)]),l(".")]),U])}const j=c(r,[["render",I],["__file","20.swift-methods.html.vue"]]);export{j as default};
