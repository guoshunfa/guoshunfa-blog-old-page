import{_ as p,r as c,o,c as l,a as n,b as s,d as e,e as t}from"./app.4659d0e0.js";const i="/assets/generics-subtypeRelationship.aaf36998.gif",u="/assets/generics-sampleHierarchy.e8efa5b5.gif",r="/assets/generics-payloadListHierarchy.fdac2624.gif",d="/assets/generics-listParent.dc3d9311.gif",k="/assets/generics-wildcardSubtyping.430cec8f.gif",v={},m=n("h1",{id:"oracle-java-泛型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#oracle-java-泛型","aria-hidden":"true"},"#"),s(" Oracle Java 泛型")],-1),g=n("blockquote",null,[n("p",null,"本文章以jdk8为基础进行编写，如果想查看后续的版本可以前往jdk版本目录下查看。"),n("p",null,"翻译自：https://docs.oracle.com/javase/tutorial/java/generics/index.html")],-1),b=n("p",null,"在任何非平凡的软件项目中，bug都是生活中的事实。仔细的规划、编程和测试可以帮助减少它们的普遍性，但不知何故，在某个地方，它们总会找到一种方法潜入您的代码。随着新特性的引入和代码库的规模和复杂性的增加，这一点变得尤为明显。",-1),h=n("p",null,"幸运的是，有些bug比其他bug更容易检测。例如，编译时错误可以在早期检测到；您可以使用编译器的错误消息来找出问题所在并立即修复它。然而，运行时错误可能会有更大的问题；它们并不总是立即出现，当它们出现时，可能是程序中的某个点与问题的实际原因相去甚远。",-1),y={href:"https://docs.oracle.com/javase/tutorial/extra/generics/index.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<h2 id="为什么使用泛型" tabindex="-1"><a class="header-anchor" href="#为什么使用泛型" aria-hidden="true">#</a> 为什么使用泛型？</h2><p>简而言之，泛型使<em>types</em>（类和接口）在定义类、接口和方法时成为参数。与方法声明中使用的更为熟悉的<em>形式参数</em>非常相似，类型参数为您提供了一种将相同的代码用于不同输入的方法。不同之处在于，形式参数的输入是值，而类型参数的输入则是类型。</p><p>使用泛型的代码比非泛型代码有很多好处：</p><ul><li><p>编译时更强大的类型检查。 Java编译器对泛型代码应用强类型检查，如果代码违反了类型安全性，就会发出错误。修复编译时错误比修复运行时错误更容易，因为运行时错误很难找到。</p></li><li><p>消除铸件。</p><p>以下没有泛型的代码段需要强制转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新编写以使用泛型时，代码不需要强制转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// no cast</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使程序员能够实现通用算法。 通过使用泛型，程序员可以实现通用算法，这些算法可以处理不同类型的集合，可以自定义，并且类型安全，更易于阅读。</p></li></ul><h2 id="泛型类型" tabindex="-1"><a class="header-anchor" href="#泛型类型" aria-hidden="true">#</a> 泛型类型</h2><p><em>泛型类型</em>是在类型上参数化的泛型类或接口。将修改下面的“Box”类以演示该概念。</p><h3 id="一个简单的box类" tabindex="-1"><a class="header-anchor" href="#一个简单的box类" aria-hidden="true">#</a> 一个简单的Box类</h3><p>首先检查对任何类型的对象进行操作的非泛型“Box”类。它只需要提供两个方法：“set”（将对象添加到框中）和“get”（检索对象）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> object<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> object<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于它的方法接受或返回一个“Object”，所以只要它不是原始类型之一，您就可以随意传入任何您想要的内容。在编译时，无法验证该类是如何使用的。代码的一部分可能将“Integer”放在框中，并期望从中获取“Integer’s”，而代码的另一部分可能错误地传入“String”，从而导致运行时错误。</p><h3 id="box类的通用版本" tabindex="-1"><a class="header-anchor" href="#box类的通用版本" aria-hidden="true">#</a> Box类的通用版本</h3><p><em>泛型类</em>的定义格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> name<span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token class-name">Tn</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型参数部分由尖括号（<code>&lt;&gt;</code>）分隔，位于类名之后。它指定<em>类型参数</em>（也称为<em>类型变量</em>）“T1”、“T2”、…和“Tn”。</p><p>要更新“Box”类以使用泛型，请通过将代码“<code>public class Box</code>”更改为“<code>public class-Box&lt;T&gt;</code>”来创建一个<em>泛型类型声明</em>。这引入了类型变量“T”，它可以在类中的任何地方使用。</p><p>通过此更改，“Box”类变为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Generic version of the Box class.
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> the type of the value being boxed
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// T stands for &quot;Type&quot;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> t<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，“Object”的所有出现都被“T”替换。类型变量可以是您指定的任何<strong>非基元</strong>类型：任何类类型、任何接口类型、任何数组类型，甚至其他类型变量。</p><p>同样的技术也可以用于创建通用接口。</p><h3 id="类型参数命名惯例" tabindex="-1"><a class="header-anchor" href="#类型参数命名惯例" aria-hidden="true">#</a> 类型参数命名惯例</h3>`,20),j={href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html#naming",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>最常用的类型参数名称是：</p><ul><li>E - Element (Java集合框架广泛使用)</li><li>K - Key</li><li>N - Number</li><li>T - Type</li><li>V - Value</li><li>S,U,V etc. - 2nd, 3rd, 4th types</li></ul><p>您将在整个JavaSEAPI和本课程的其余部分中看到这些名称。</p><h3 id="调用和实例化泛型类型" tabindex="-1"><a class="header-anchor" href="#调用和实例化泛型类型" aria-hidden="true">#</a> 调用和实例化泛型类型</h3><p>要从代码中引用泛型“Box”类，必须执行<em>泛型类型调用</em>，该调用将“T”替换为一些具体值，例如“Integer”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerBox<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以将泛型类型调用视为与普通方法调用类似，但不是将参数传递给方法，而是将<em>类型参数</em>（在本例中为“Integer”）传递给“Box”类本身。</p><hr><p><strong>类型参数和类型参数术语:</strong> 许多开发人员可互换地使用术语“类型参数”和“类型自变量”，但这些术语并不相同。编码时，提供类型参数以创建参数化类型。因此，“<code>Foo&lt;T&gt;</code>”中的“T”是类型参数，而“<code>Foo＞String＞f</code>”中的‘String’是类型参数。本课在使用这些术语时遵循了这一定义。</p><hr><p>与任何其他变量声明一样，此代码实际上不会创建新的“Box”对象。它简单地声明“integerBox”将包含对“Integer”的“Box”的引用，这就是读取“Box＜Integer＞”的方式。</p><p>泛型类型的调用通常称为<em>参数化类型</em>。</p><p>要实例化该类，请像往常一样使用“new”关键字，但在类名和括号之间放置“＜Integer＞”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="钻石" tabindex="-1"><a class="header-anchor" href="#钻石" aria-hidden="true">#</a> 钻石</h3><p>在JavaSE7和更高版本中，只要编译器可以从上下文中确定或推断类型参数，就可以用一组空的类型参数（<code>&lt;&gt;</code>）替换调用泛型类构造函数所需的类型参数。这对尖括号&lt;&gt;，非正式地称为“钻石”。例如，可以使用以下语句创建“<code>Box&lt;Integer&gt;</code>”的实例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Box&lt;Integer&gt; integerBox = new Box&lt;&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),f={href:"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="多个类型参数" tabindex="-1"><a class="header-anchor" href="#多个类型参数" aria-hidden="true">#</a> 多个类型参数</h3><p>如前所述，泛型类可以有多个类型参数。例如，实现通用“Pair”接口的通用“OrderedPair”类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OrderedPair</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下语句创建了“OrderedPair”类的两个实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Even&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>  p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_=n("code",null,"new OrderedPair<String，Integer>",-1),B={href:"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.oracle.com/javase/tutorial/java/generics/types.html#diamond",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"OrderedPair<String，Integer>",-1),T=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Even&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>  p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要创建泛型接口，请遵循与创建泛型类相同的约定。</p><h3 id="参数化类型" tabindex="-1"><a class="header-anchor" href="#参数化类型" aria-hidden="true">#</a> 参数化类型</h3><p>也可以用参数化类型（即“<code>List&lt;String&gt;</code>”）替换类型参数（即“K”或“V”）。例如，使用“<code>OrderedPair&lt;K，V&gt;</code>”示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedPair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;primes&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="原始类型" tabindex="-1"><a class="header-anchor" href="#原始类型" aria-hidden="true">#</a> 原始类型</h3><p><em>原始类型</em>是没有任何类型参数的泛型类或接口的名称。例如，给定泛型“Box”类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要创建参数化类型“<code>Box&lt;T&gt;</code>”，请为正式类型参数“T”提供一个实际类型参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略了实际类型参数，则创建“Box＜T＞”的原始类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span> rawBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，“Box”是泛型类型“<code>Box&lt;T&gt;</code>”的原始类型。但是，非泛型类或接口类型<em>不是</em>原始类型。</p><p>原始类型出现在遗留代码中，因为在JDK5.0之前，许多API类（如“集合”类）都不是泛型的。为了向后兼容，允许将参数化类型分配给其原始类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Box</span> rawBox <span class="token operator">=</span> stringBox<span class="token punctuation">;</span>               <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果将原始类型分配给参数化类型，则会收到警告：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span> rawBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// rawBox is a raw type of Box&lt;T&gt;</span>
<span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intBox <span class="token operator">=</span> rawBox<span class="token punctuation">;</span>     <span class="token comment">// warning: unchecked conversion</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用原始类型调用相应泛型类型中定义的泛型方法，也会收到警告：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Box</span> rawBox <span class="token operator">=</span> stringBox<span class="token punctuation">;</span>
rawBox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// warning: unchecked invocation to set(T)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>警告显示，原始类型绕过泛型类型检查，将不安全代码的捕获延迟到运行时。因此，应避免使用原始类型。</p>`,20),I={href:"https://docs.oracle.com/javase/tutorial/java/generics/erasure.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<h4 id="未选中的错误消息" tabindex="-1"><a class="header-anchor" href="#未选中的错误消息" aria-hidden="true">#</a> 未选中的错误消息</h4><p>如前所述, 当将遗留代码与通用代码混合时，您可能会遇到类似于以下内容的警告消息:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Note: Example.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用对原始类型进行操作的旧API时，可能会发生这种情况，如下例所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarningDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> bi<span class="token punctuation">;</span>
        bi <span class="token operator">=</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">Box</span> <span class="token function">createBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>术语“未检查”意味着编译器没有足够的类型信息来执行确保类型安全所需的所有类型检查。默认情况下，“未检查”警告被禁用，尽管编译器会给出提示。要查看所有“未检查”警告，请使用“-Xlint:unchecked”重新编译。</p><p>使用“-Xlint:unchecked”重新编译上一个示例将显示以下附加信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WarningDemo.java:4: warning: [unchecked] unchecked conversion
found   : Box
required: Box&lt;java.lang.Integer&gt;
        bi = createBox();
                      ^
1 warning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),A=n("code",null,"@SuppressWarnings（“unchecked”）",-1),q={href:"https://docs.oracle.com/javase/tutorial/java/annotations/index.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<h2 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法" aria-hidden="true">#</a> 泛型方法</h2><p><em>泛型方法</em>是引入自己类型参数的方法。这类似于声明泛型类型，但类型参数的范围仅限于声明它的方法。允许使用静态和非静态泛型方法以及泛型类构造函数。</p><p>泛型方法的语法包括一个类型参数列表，位于尖括号内，出现在方法的返回类型之前。对于静态泛型方法，类型参数部分必须出现在方法的返回类型之前。</p><p>“Util”类包含一个通用方法“compare”，用于比较两个“Pair”对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p1<span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
               p1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用此方法的完整语法为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> same <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已显式提供类型，如粗体所示。通常，这可以省略，编译器将推断所需的类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> same <span class="token operator">=</span> <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),P=n("em",null,"类型推断",-1),E={href:"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<h2 id="受限的类型参数" tabindex="-1"><a class="header-anchor" href="#受限的类型参数" aria-hidden="true">#</a> 受限的类型参数</h2><p>有时可能需要限制可以用作参数化类型中的类型参数的类型。例如，对数字进行操作的方法可能只希望接受“Number”或其子类的实例。这就是<em>有界类型参数</em>的用途。</p><p>要声明有界的类型参数，请列出类型参数的名称，后跟“extends”关键字，后跟其<em>上界</em>，在本例中为“Number”。注意，在此上下文中，“extends”在一般意义上是指“extends（扩展）”（如在类中）或“implements（实现）”（在接口中）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span>          

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">inspect</span><span class="token punctuation">(</span><span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;T: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;U: &quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        integerBox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        integerBox<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token string">&quot;some text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: this is still String!</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过修改泛型方法以包含此有界类型参数，编译现在将失败，因为我们对“inspect”的调用仍然包含“String”：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Box.java:21: &lt;U&gt;inspect(U) in Box&lt;java.lang.Integer&gt; cannot
  be applied to (java.lang.String)
                        integerBox.inspect(&quot;10&quot;);
                                  ^
1 error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了限制可用于实例化泛型类型的类型之外，有界类型参数还允许您调用在边界中定义的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NaturalNumber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> n<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NaturalNumber</span><span class="token punctuation">(</span><span class="token class-name">T</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“isEven”方法通过“n”调用在“Integer”类中定义的“intValue”方法。</p><h3 id="多个边界" tabindex="-1"><a class="header-anchor" href="#多个边界" aria-hidden="true">#</a> 多个边界</h3><p>前面的示例说明了使用具有单个边界的类型参数，但类型参数可以具有<em>多个边界</em>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;T extends B1 &amp; B2 &amp; B3&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具有多个边界的类型变量是边界中列出的所有类型的子类型。如果其中一个边界是类，则必须首先指定它。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未首先指定绑定“A”，则会出现编译时错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>  <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型方法和有界类型参数" tabindex="-1"><a class="header-anchor" href="#泛型方法和有界类型参数" aria-hidden="true">#</a> 泛型方法和有界类型参数</h3><p>有界类型参数是实现通用算法的关键。考虑以下方法，该方法计算数组“T[]”中大于指定元素“elem”的元素数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">countGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray<span class="token punctuation">,</span> <span class="token class-name">T</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> e <span class="token operator">:</span> anArray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&gt;</span> elem<span class="token punctuation">)</span>  <span class="token comment">// compiler error</span>
            <span class="token operator">++</span>count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的实现很简单，但它不会编译，因为大于运算符（“<code>&gt;</code>”）仅适用于基本类型，如“short”、“int”、“double”、“long”、”float“、”byte“和”char“。不能使用“&gt;”运算符来比较对象。要解决此问题，请使用由“<code>Comparable&lt;T&gt;</code>”接口限定的类型参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的代码将是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">countGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray<span class="token punctuation">,</span> <span class="token class-name">T</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> e <span class="token operator">:</span> anArray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>count<span class="token punctuation">;</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型、继承和子类型" tabindex="-1"><a class="header-anchor" href="#泛型、继承和子类型" aria-hidden="true">#</a> 泛型、继承和子类型</h2><p>正如您已经知道的，只要类型兼容，就可以将一种类型的对象分配给另一种类型。例如，您可以将“整型”分配给“对象”，因为“对象”是“整型”的超类型之一：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> someObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> someInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
someObject <span class="token operator">=</span> someInteger<span class="token punctuation">;</span>   <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在面向对象的术语中，这被称为“是一种”关系。由于“Integer”<em>是“Object”的</em>类型，因此允许赋值。但“整数”也是“数字”的一种，因此以下代码也是有效的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token class-name">Number</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
<span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">10.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型也是如此。您可以执行泛型类型调用，将“Number”作为其类型参数传递，如果该参数与“Number”兼容，则允许随后调用“add”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
box<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">10.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在考虑以下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">boxTest</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受什么类型的参数？通过查看其签名，您可以看到它接受一个类型为“<code>Box&lt;Number&gt;</code>”的参数。但这意味着什么？是否允许按预期传入“<code>Box&lt;Integer&gt;</code>”或“<code>Box&lt;Double&gt;</code>”？答案是“否”，因为<code>Box&lt;Integer&gt;</code>和<code>Box&lt;Double&gt;</code>不是<code>Box&lt;Number&gt;</code>的子类型。</p><p>在使用泛型编程时，这是一个常见的误解，但它是一个需要学习的重要概念。</p><p><img src="`+i+'" alt="diagram showing that Box is not a subtype of Box"></p><p>尽管“Integer”是“Number”的子类型，但“<code>Box&lt;Integer&gt;</code>”不是“<code>Box&lt;Number&gt;</code>”的子型。</p><hr><p><strong>Note:</strong> 给定两个具体类型“A”和“B”（例如，“Number”和“Integer”），无论“A”与“B”是否相关，“<code>MyClass&lt;A&gt;</code>”与“<code>MyClass&lt;B&gt;</code>”都没有关系。“<code>MyClass&lt;A&gt;</code>”和“<code>MyClass&lt;B&gt;</code>”的共同父级是“Object”。</p>',38),M={href:"https://docs.oracle.com/javase/tutorial/java/generics/subtyping.html",target:"_blank",rel:"noopener noreferrer"},K=t('<hr><h3 id="泛型类和子类型" tabindex="-1"><a class="header-anchor" href="#泛型类和子类型" aria-hidden="true">#</a> 泛型类和子类型</h3><p>您可以通过扩展或实现泛型类或接口来对其进行子类型化。一个类或接口的类型参数与另一个类的类型参数之间的关系由“extends”和“implements”子句确定。</p><p>以“Collections”类为例，“<code>ArrayList&lt;E&gt;</code>”实现了“<code>List&lt;E&gt;</code>&#39;”，而“<code>List&lt;E&gt;</code>”扩展了“<code>Collection&lt;E&gt;</code>”。因此，<code>ArrayList&lt;String&gt;</code>是<code>List&lt;String&gt;</code>的子类型，也是<code>Collection&lt;String&gt;</code>的子类型。只要不改变类型参数，类型之间的子类型关系就会保持不变。</p><p><img src="'+u+`" alt="diagram showing a sample collections hierarchy: ArrayList is a subtype of List, which is a subtype of Collection."></p><p>示例“集合”层次结构</p><p>现在假设我们要定义自己的列表接口“PayloadList”，它将泛型类型“P”的可选值与每个元素相关联。其声明可能如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">PayloadList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">P</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">setPayload</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">P</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“PayloadList”的以下参数化是“List＜String＞”的子类型：</p><ul><li><code>PayloadList&lt;String,String&gt;</code></li><li><code>PayloadList&lt;String,Integer&gt;</code></li><li><code>PayloadList&lt;String,Exception&gt;</code></li></ul><p><img src="`+r+`" alt="diagram showing an example PayLoadList hierarchy: PayloadList&lt;String, String&gt; is a subtype of List, which is a subtype of Collection. At the same level of PayloadList&lt;String,String&gt; is PayloadList&lt;String, Integer&gt; and PayloadList&lt;String, Exceptions&gt;."></p><p>示例“PayloadList”层次结构</p><h2 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h2><p><em>类型推断</em>是Java编译器查看每个方法调用和相应声明的能力，以确定使调用适用的类型参数。推理算法确定参数的类型，以及分配或返回结果的类型（如果可用）。最后，推理算法试图找到适用于所有参数的“最具体”类型。</p><p>为了说明最后一点，在以下示例中，推断确定传递给“pick”方法的第二个参数的类型为“Serializable”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token class-name">T</span> a1<span class="token punctuation">,</span> <span class="token class-name">T</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a2<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token class-name">Serializable</span> s <span class="token operator">=</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型推理和泛型方法" tabindex="-1"><a class="header-anchor" href="#类型推理和泛型方法" aria-hidden="true">#</a> 类型推理和泛型方法</h3>`,17),V={href:"https://docs.oracle.com/javase/tutorial/java/generics/methods.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://docs.oracle.com/javase/tutorial/java/generics/examples/BoxDemo.java",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"BoxDemo",-1),H={href:"https://docs.oracle.com/javase/tutorial/java/generics/examples/Box.java",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"Box",-1),U=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoxDemo</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">U</span> u<span class="token punctuation">,</span> 
      <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> boxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    box<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boxes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">outputBoxes</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> boxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> box<span class="token operator">:</span> boxes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">U</span> boxContents <span class="token operator">=</span> box<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Box #&quot;</span> <span class="token operator">+</span> counter <span class="token operator">+</span> <span class="token string">&quot; contains [&quot;</span> <span class="token operator">+</span>
             boxContents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      counter<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listOfIntegerBoxes <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token function">outputBoxes</span><span class="token punctuation">(</span>listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是本示例的输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Box #0 contains [10]
Box #1 contains [20]
Box #2 contains [30]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型方法“addBox”定义了一个名为“U”的类型参数。通常，Java编译器可以推断泛型方法调用的类型参数。因此，在大多数情况下，您不必指定它们。例如，要调用泛型方法“addBox”，可以使用<em>类型见证</em>指定类型参数，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，如果省略类型见证，Java编译器会（从方法的参数）自动推断类型参数为“Integer”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BoxDemo</span><span class="token punctuation">.</span><span class="token function">addBox</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listOfIntegerBoxes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型类的类型推理和实例化" tabindex="-1"><a class="header-anchor" href="#泛型类的类型推理和实例化" aria-hidden="true">#</a> 泛型类的类型推理和实例化</h3>`,8),G=n("code",null,"<>",-1),X={href:"https://docs.oracle.com/javase/tutorial/java/generics/types.html#diamond",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>例如，考虑以下变量声明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以用一组空的类型参数（<code>&lt;&gt;</code>）替换构造函数的参数化类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，要在泛型类实例化期间利用类型推断，必须使用菱形。在以下示例中，编译器生成未检查的转换警告，因为“<code>HashMap()</code>”构造函数引用的是“HashMap”原始类型，而不是“<code>Map&lt;String，List&lt;String&gt;&gt;</code>”类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unchecked conversion warning</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="泛型类和非泛型类的类型推理和泛型构造函数" tabindex="-1"><a class="header-anchor" href="#泛型类和非泛型类的类型推理和泛型构造函数" aria-hidden="true">#</a> 泛型类和非泛型类的类型推理和泛型构造函数</h3><p>注意，构造函数在泛型类和非泛型类中都可以是泛型的（换句话说，声明自己的形式类型参数）。考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑类“MyClass”的以下实例化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此语句创建参数化类型“<code>MyClass&lt;Integer&gt;</code>”的实例；该语句显式指定泛型类“<code>MyClass&lt;X&gt;</code>”的形式类型参数“X”的类型“Integer”。请注意，此泛型类的构造函数包含一个形式类型参数“T”。编译器推断此泛型类的构造函数的形式类型参数“T”的类型“String”（因为此构造函数的实际参数是“String”对象）。</p><p>Java SE 7之前版本的编译器能够推断泛型构造函数的实际类型参数，类似于泛型方法。但是，如果您使用菱形（<code>&lt;&gt;</code>），Java SE 7和更高版本中的编译器可以推断正在实例化的泛型类的实际类型参数。考虑以下示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在此示例中，编译器推断泛型类“<code>MyClass&lt;X&gt;</code>”的形式类型参数“X”的类型“Integer”。它为该泛型类的构造函数的形式类型参数“T”推断类型“String”。</p><hr><p><strong>Note:</strong> 需要注意的是，推理算法仅使用调用参数、目标类型以及可能的明显预期返回类型来推断类型。推理算法不使用程序后期的结果。</p><hr><h3 id="目标类型" tabindex="-1"><a class="header-anchor" href="#目标类型" aria-hidden="true">#</a> 目标类型</h3><p>Java编译器利用目标类型来推断泛型方法调用的类型参数。表达式的<em>目标类型</em>是Java编译器期望的数据类型，具体取决于表达式出现的位置。考虑方法<code>Collections.emptyList</code>，声明如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>考虑以下赋值语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listOne <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此语句需要“<code>List&lt;String&gt;</code>”的实例；此数据类型是目标类型。由于方法“emptyList”返回类型为“<code>List&lt;T&gt;</code>”的值，编译器推断类型参数“T”必须是值“String”。这在Java SE 7和8中都适用。或者，您可以使用类型见证并指定“T”的值，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listOne <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，在这种情况下，这不是必要的。但在其他情况下，这是必要的。考虑以下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">processStringList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// process stringList</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设您要使用空列表调用方法“processStringList”。在Java SE 7中，以下语句不会编译：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>processStringList(Collections.emptyList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The Java SE 7 compiler generates an error message similar to the following:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;Object&gt; cannot be converted to List&lt;String&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译器需要类型参数“T”的值，因此它以值“Object”开头。因此，调用“集合”。emptyList返回类为<code>List&lt;Object&gt;</code>的值，该值与方法<code>processStringList</code>不兼容。因此，在Java SE 7中，必须按如下方式指定类型参数的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">processStringList</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这在JavaSE8中不再是必要的。目标类型的概念已经扩展到包括方法参数，例如方法“processStringList”的参数。在这种情况下，“processStringList”需要类型为“<code>List&lt;String&gt;</code>”的参数。方法<code>Collections。emptyList</code>返回值<code>List&lt;T&gt;</code>，因此使用目标类型<code>List&lt;String&gt;</code>，编译器推断类型参数<code>T</code>的值为<code>String</code>。因此，在Java SE 8中，编译以下语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">processStringList</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35),R={href:"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-typing",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html",target:"_blank",rel:"noopener noreferrer"},Y=t(`<h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><p>在通用代码中，问号（？），称为通配符的通配符表示未知类型。通配符可用于多种情况：作为参数、字段或局部变量的类型；有时作为返回类型（尽管更具体一些是更好的编程实践）。通配符永远不会用作泛型方法调用、泛型类实例创建或超类型的类型参数。</p><p>以下部分将更详细地讨论通配符，包括上限通配符、下限通配符和通配符捕获。</p><h3 id="上限通配符" tabindex="-1"><a class="header-anchor" href="#上限通配符" aria-hidden="true">#</a> 上限通配符</h3><p>可以使用上限通配符放宽对变量的限制。例如，假设您要编写一个方法，该方法适用于<code>List&lt;Integer&gt;</code>、<code>List&lt;Double&gt;</code>、和<code>List&lt;Number&gt;</code>；可以通过使用上限通配符来实现这一点。</p><p>要声明上限通配符，请使用通配符（“?”），后跟“extends”关键字，后跟其<em>上限</em>。注意，在此上下文中，“extends”在一般意义上是指“extends（扩展）”（如在类中）或“implements（实现）”（在接口中）。</p><p>要编写适用于“Number”列表和“Number”子类型（如“Integer”、“Double”和“Float”）的方法，需要指定“<code>List&lt;？extends Number&gt;</code>。术语“<code>List&lt;Number&gt;</code>”比“<code>List&lt;? extends Number&gt;</code>，因为前者仅匹配类型为&#39;Number&#39;的列表，而后者匹配类型为<code>Number</code>或其任何子类的列表。</p><p>考虑以下“process”方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static void process(List&lt;? extends Foo&gt; list) { /* ... */ }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上限通配符<code>&lt;？extends Foo&gt;</code>，其中<code>Foo</code>是任何类型，匹配<code>Foo</code>和<code>Foo</code>的任何子类型。“process”方法可以访问类型为“Foo”的列表元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Foo</span> elem <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在“foreach”子句中，“elem”变量迭代列表中的每个元素。“Foo”类中定义的任何方法现在都可以在“elem”上使用。</p><p>“sumOfList”方法返回列表中数字的总和：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sumOfList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Number</span> n <span class="token operator">:</span> list<span class="token punctuation">)</span>
        s <span class="token operator">+=</span> n<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下代码使用“Integer”对象列表打印“sum=6.0”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span> <span class="token operator">+</span> <span class="token function">sumOfList</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>“Double”值列表可以使用相同的“sumOfList”方法。以下代码显示“sum=7.0”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> ld <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sum = &quot;</span> <span class="token operator">+</span> <span class="token function">sumOfList</span><span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无边界通配符" tabindex="-1"><a class="header-anchor" href="#无边界通配符" aria-hidden="true">#</a> 无边界通配符</h3><p>使用通配符（“？”）指定无界通配符类型, 例如，“<code>List&lt;?&gt;</code>”。这称为<em>未知类型列表</em>。在两种情况下，无界通配符是一种有用的方法：</p><ul><li>如果您正在编写可以使用“Object”类中提供的功能实现的方法。</li><li>当代码在泛型类中使用不依赖于类型参数的方法时。例如，<code>List.size</code>或<code>List.clear</code>。事实上，“<code>Class&lt;?&gt;</code>”因为“<code>Class&lt;T&gt;</code>”中的大多数方法都不依赖于“T”。</li></ul><p>考虑以下方法“printList”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> elem <span class="token operator">:</span> list<span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>elem <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“printList”的目标是打印任何类型的列表，但它无法实现这一目标——它只打印“Object”实例的列表；它无法打印“<code>List&lt;Integer&gt;</code>”、“<code>List&lt;String&gt;</code>”、‘<code>List&lt;Double&gt;</code>”等，因为它们不是“<code>List&lt;Object&gt;</code>”的子类型。要编写通用的“printList”方法，请使用“<code>List&lt;?&gt;</code>”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> elem<span class="token operator">:</span> list<span class="token punctuation">)</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>elem <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为对于任何具体类型“A”，“<code>List&lt;A&gt;</code>”是“<code>List&lt;?&gt;</code>”的子类型，您可以使用“printList”打印任何类型的列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>  ls <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printList</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printList</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Note:</strong> [<code>Arrays.asList</code>](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T、 ..-)方法在本课程的示例中使用。此静态工厂方法转换指定的数组并返回固定大小的列表。</p><hr>`,30),Z=n("code",null,"List<Object>",-1),$=n("code",null,"List<?>",-1),nn=n("code",null,"List<Object>",-1),sn=n("code",null,"List<?>",-1),an={href:"https://docs.oracle.com/javase/tutorial/java/generics/wildcardGuidelines.html",target:"_blank",rel:"noopener noreferrer"},en=n("h3",{id:"下限通配符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#下限通配符","aria-hidden":"true"},"#"),s(" 下限通配符")],-1),tn={href:"https://docs.oracle.com/javase/tutorial/java/generics/upperBounded.html",target:"_blank",rel:"noopener noreferrer"},pn=n("em",null,"下限",-1),cn=n("em",null,"超级类型",-1),on=t(`<p>下限通配符使用通配符（“？”）表示，后跟“super”关键字，后跟其<em>下限</em>： <code>&lt;? super A&gt;</code>.。</p><hr><p><strong>Note:</strong> 可以为通配符指定上限，也可以指定下限，但不能同时指定两者。</p><hr><p>假设您要编写一个将“Integer”对象放入列表的方法。为了最大限度地提高灵活性，您希望该方法可以处理“<code>List&lt;Integer&gt;</code>”、“<code>List&lt;Number&gt;</code>”和“<code>List&lt;Object&gt;</code>”—任何可以保存“Integer”值的对象。</p><p>要编写适用于“整型”列表和“整型”超类型（如“整型”、“数字”和“对象”）的方法，需要指定<code>List&lt;? super Integer&gt;</code>。术语<code>List&lt;Integer&gt;</code>比<code>List&lt;？super Integer&gt;</code>，因为前者仅匹配“Integer”类型的列表，而后者匹配“Integer&#39;”超类型的任何类型的列表。</p><p>以下代码将数字1到10添加到列表末尾：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),ln={href:"https://docs.oracle.com/javase/tutorial/java/generics/wildcardGuidelines.html",target:"_blank",rel:"noopener noreferrer"},un=n("h3",{id:"通配符和子类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通配符和子类型","aria-hidden":"true"},"#"),s(" 通配符和子类型")],-1),rn={href:"https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p>给定以下两个常规（非泛型）类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编写以下代码是合理的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">A</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例显示，常规类的继承遵循子类型化规则：如果B扩展了a，则类B是类a的子类型。此规则不适用于泛型类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">&gt;</span></span> lb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> la <span class="token operator">=</span> lb<span class="token punctuation">;</span>   <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假定“整数”是“数字”的子类型，那么“<code>List&lt;Number&gt;</code>”和“<code>List&lt;Integer&gt;</code>”之间的关系是什么？</p><p><img src="`+d+`" alt="diagram showing that the common parent of List and List is the list of unknown type"></p><p>常见的父项是“<code>List&lt;?&gt;</code>”。</p><p>虽然“整数”是“数字”的子类型，但“<code>List&lt;Integer&gt;</code>”不是“<code>List&lt;Number&gt;</code>”的子型，事实上，这两种类型并不相关。“<code>List&lt;Number&gt;</code>”和“<code>List&lt;Integer&gt;</code>”的共同父级是“<code>List&lt;?&gt;</code>”。</p><p>为了在这些类之间创建关系，以便代码可以通过“<code>List&lt;Integer&gt;</code>”元素访问“Number”方法，请使用上限通配符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span>  numList <span class="token operator">=</span> intList<span class="token punctuation">;</span>  <span class="token comment">// OK. List&lt;? extends Integer&gt; is a subtype of List&lt;? extends Number&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为“Integer”是“Number”的子类型，而“numList”是“Number”对象的列表，所以现在在“intList”（“整型”对象列表）和“numList”之间存在关系。下图显示了使用上限和下限通配符声明的几个“List”类之间的关系。</p><p><img src="`+k+'" alt="diagram showing that List is a subtype of both List. List is a subtype of List."></p><p>多个泛型“List”类声明的层次结构。</p>',15),kn={href:"https://docs.oracle.com/javase/tutorial/java/generics/wildcardGuidelines.html",target:"_blank",rel:"noopener noreferrer"},vn=n("h3",{id:"通配符捕获和帮助程序方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通配符捕获和帮助程序方法","aria-hidden":"true"},"#"),s(" 通配符捕获和帮助程序方法")],-1),mn=n("p",null,[s("在某些情况下，编译器推断通配符的类型。例如，列表可以定义为“"),n("code",null,"list<?>"),s("”但是，当计算表达式时，编译器从代码中推断出特定类型。这种情况称为"),n("em",null,"通配符捕获"),s("。")],-1),gn=n("p",null,"在大多数情况下，您不必担心通配符捕获，除非看到包含短语“captureof”的错误消息。",-1),bn={href:"https://docs.oracle.com/javase/tutorial/java/generics/examples/WildcardError.java",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"WildcardError",-1),yn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildcardError</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),wn={href:"https://docs.oracle.com/javase/8/docs/api/java/util/List.html#set-int-E-",target:"_blank",rel:"noopener noreferrer"},jn=t(`<p>“WildcardError”示例在由Oracle的JDK 7“javac”实现编译时生成以下错误：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WildcardError.java:6: error: method set in interface List&lt;E&gt; cannot be applied to given types;
    i.set(0, i.get(0));
     ^
  required: int,CAP#1
  found: int,Object
  reason: actual argument Object cannot be converted to CAP#1 by method invocation conversion
  where E is a type-variable:
    E extends Object declared in interface List
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Object from capture of ?
1 error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),xn=n("em",null,"private helper方法",-1),fn={href:"https://docs.oracle.com/javase/tutorial/java/generics/examples/WildcardFixed.java",target:"_blank",rel:"noopener noreferrer"},Ln=n("code",null,"WildcardFixed",-1),_n=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildcardFixed</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fooHelper</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// Helper method created so that the wildcard can be captured</span>
    <span class="token comment">// through type inference.</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">fooHelper</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        l<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于helper方法，编译器在调用中使用推断来确定“T”是捕获变量“CAP#1”。该示例现在已成功编译。</p><p>按照惯例，助手方法通常命名为<code>*originalMethodName*helper</code>。</p>`,3),Bn={href:"https://docs.oracle.com/javase/tutorial/java/generics/examples/WildcardErrorBad.java",target:"_blank",rel:"noopener noreferrer"},Sn=n("code",null,"WildcardErrorBad",-1),Nn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildcardErrorBad</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">swapFirst</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> l1<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Number</span> temp <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      l1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// expected a CAP#1 extends Number,</span>
                            <span class="token comment">// got a CAP#2 extends Number;</span>
                            <span class="token comment">// same bound, but different types</span>
      l2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>	    <span class="token comment">// expected a CAP#1 extends Number,</span>
                            <span class="token comment">// got a Number</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，代码正在尝试不安全的操作。例如，考虑“swapFirst”方法的以下调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>  ld <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">10.10</span><span class="token punctuation">,</span> <span class="token number">20.20</span><span class="token punctuation">,</span> <span class="token number">30.30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">swapFirst</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而<code>List&lt;Integer&gt;</code>和<code>List&lt;Double&gt;</code>都满足<code>List&lt;？extendsNumber&gt;</code>，则从“Integer”值列表中获取项目并尝试将其放入“Double”值列表显然是不正确的。</p><p>使用Oracle的JDK<code>javac</code>编译器编译代码会产生以下错误：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>WildcardErrorBad.java:7: error: method set in interface List&lt;E&gt; cannot be applied to given types;
      l1.set(0, l2.get(0)); // expected a CAP#1 extends Number,
        ^
  required: int,CAP#1
  found: int,Number
  reason: actual argument Number cannot be converted to CAP#1 by method invocation conversion
  where E is a type-variable:
    E extends Object declared in interface List
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Number from capture of ? extends Number
WildcardErrorBad.java:10: error: method set in interface List&lt;E&gt; cannot be applied to given types;
      l2.set(0, temp);      // expected a CAP#1 extends Number,
        ^
  required: int,CAP#1
  found: int,Number
  reason: actual argument Number cannot be converted to CAP#1 by method invocation conversion
  where E is a type-variable:
    E extends Object declared in interface List
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Number from capture of ? extends Number
WildcardErrorBad.java:15: error: method set in interface List&lt;E&gt; cannot be applied to given types;
        i.set(0, i.get(0));
         ^
  required: int,CAP#1
  found: int,Object
  reason: actual argument Object cannot be converted to CAP#1 by method invocation conversion
  where E is a type-variable:
    E extends Object declared in interface List
  where CAP#1 is a fresh type-variable:
    CAP#1 extends Object from capture of ?
3 errors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有助手方法可以解决这个问题，因为代码根本上是错误的：从“Integer”值列表中获取一个项并尝试将其放入“Double”值列表显然是不正确的。</p><h3 id="通配符使用指南" tabindex="-1"><a class="header-anchor" href="#通配符使用指南" aria-hidden="true">#</a> 通配符使用指南</h3><p>学习使用泛型编程时，一个更令人困惑的方面是确定何时使用上限通配符，何时使用下限通配符。本页提供了设计代码时应遵循的一些准则。</p><p>出于本讨论的目的，将变量视为提供以下两种功能之一是有帮助的：</p><ul><li><p><strong>“In”变量</strong></p><p>“in”变量向代码提供数据。设想一个具有两个参数的copy方法：<code>copy（src，dest）</code>。“src”参数提供要复制的数据，因此它是“in”参数。</p></li><li><p><strong>“out”变量</strong></p><p>“out”变量保存其他地方使用的数据。在复制示例“copy（src，dest）”中，“dest”参数接受数据，因此它是“out”参数。</p></li></ul><p>当然，一些变量同时用于“输入”和“输出”目的——指南中也讨论了这种情况。</p><p>在决定是否使用通配符以及合适的通配符类型时，可以使用“in”和“out”原则。以下列表提供了应遵循的准则：</p><hr><p><strong>通配符指南:</strong></p><ul><li>“in”变量用上限通配符定义，使用“extends”关键字。</li><li>“out”变量用下限通配符定义，使用super关键字。</li><li>如果可以使用“Object”类中定义的方法访问“In”变量，使用无界通配符。</li><li>如果代码需要同时作为“In”和“out”变量访问变量，请不要使用通配符。</li></ul><hr><p>这些准则不适用于方法的返回类型。应避免使用通配符作为返回类型，因为这会迫使程序员使用代码来处理通配符。</p><p>由<code>list&lt;？extends …&gt;</code>可以非正式地认为是只读的，但这并不是严格的保证。假设您有以下两个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NaturalNumber</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">NaturalNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">EvenNumber</span> <span class="token keyword">extends</span> <span class="token class-name">NaturalNumber</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">EvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Consider the following code:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EvenNumber</span><span class="token punctuation">&gt;</span></span> le <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">NaturalNumber</span><span class="token punctuation">&gt;</span></span> ln <span class="token operator">=</span> le<span class="token punctuation">;</span>
ln<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NaturalNumber</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为<code>List&lt;EvenNumber&gt;</code>是<code>List&lt;？extends NaturalNumber&gt;</code>，您可以将<code>le</code>分配给<code>ln</code>。但不能使用“ln”将自然数添加到偶数列表中。列表中可能有以下操作：</p><ul><li>您可以添加“null”。</li><li>您可以调用“clear”。</li><li>您可以获取迭代器并调用“remove”。</li><li>您可以捕获通配符并编写从列表中读取的元素。</li></ul><p>您可以看到由<code>list&lt;？extends NaturalNumber&gt;</code>在严格意义上不是只读的，但您可能会这样想，因为您无法存储新元素或更改列表中的现有元素。</p><h2 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除" aria-hidden="true">#</a> 类型擦除</h2><p>在 Java 语言中引入了泛型，以便在编译时提供更严格的类型检查并支持泛型。为了实现泛型，Java编译器将类型擦除应用于：</p><ul><li>用泛型类型的边界替换泛型类型中的所有类型参数，如果类型参数是无界的，则替换为“ Object”。因此，生成的字节码只包含普通的类、接口和方法。</li><li>必要时插入类型强制转换以保证类型安全。</li><li>生成桥接方法以保留扩展泛型类型中的多态性。</li></ul><p>类型擦除确保不会为参数化类型创建新类； 因此，泛型不会产生运行时开销。</p><h3 id="通用类型的擦除" tabindex="-1"><a class="header-anchor" href="#通用类型的擦除" aria-hidden="true">#</a> 通用类型的擦除</h3><p>在类型擦除过程中，Java 编译器会擦除所有类型参数，如果类型参数是有界的，则用第一个边界替换每个参数，如果类型参数是无界的，则用“Object”替换。</p><p>考虑以下表示单向链表中节点的泛型类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为类型参数 <code>T</code> 是无界的，所以 Java 编译器将其替换为 <code>Object</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以下示例中，通用 <code>Node</code> 类使用有界类型参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 编译器将有界类型参数“T”替换为第一个绑定类“Comparable”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Comparable</span> data<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span> data<span class="token punctuation">,</span> <span class="token class-name">Node</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通用方法的擦除" tabindex="-1"><a class="header-anchor" href="#通用方法的擦除" aria-hidden="true">#</a> 通用方法的擦除</h3><p>Java 编译器还会擦除泛型方法参数中的类型参数。 考虑以下通用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Counts the number of occurrences of elem in anArray.</span>
<span class="token comment">//</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray<span class="token punctuation">,</span> <span class="token class-name">T</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> e <span class="token operator">:</span> anArray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>T</code> 是无界的，所以 Java 编译器将其替换为 <code>Object</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> anArray<span class="token punctuation">,</span> <span class="token class-name">Object</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> e <span class="token operator">:</span> anArray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设定义了以下类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以编写一个通用方法来绘制不同的形状：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">T</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Java 编译器将 <code>T</code> 替换为 <code>Shape</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类型擦除和桥接方法的影响" tabindex="-1"><a class="header-anchor" href="#类型擦除和桥接方法的影响" aria-hidden="true">#</a> 类型擦除和桥接方法的影响</h3><p>有时类型擦除会导致您可能没有预料到的情况。 以下示例显示了这是如何发生的。 以下示例显示编译器有时如何创建一个合成方法，称为桥接方法，作为类型擦除过程的一部分。</p><p>给定以下两个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Node.setData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MyNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyNode.setData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyNode</span> mn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span> n <span class="token operator">=</span> mn<span class="token punctuation">;</span>            <span class="token comment">// A raw type - compiler throws an unchecked warning</span>
n<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Causes a ClassCastException to be thrown.</span>
<span class="token class-name">Integer</span> x <span class="token operator">=</span> mn<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型擦除后，这段代码变成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyNode</span> mn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Node</span> n <span class="token operator">=</span> mn<span class="token punctuation">;</span>            <span class="token comment">// A raw type - compiler throws an unchecked warning</span>
                        <span class="token comment">// Note: This statement could instead be the following:</span>
                        <span class="token comment">//     Node n = (Node)mn;</span>
                        <span class="token comment">// However, the compiler doesn&#39;t generate a cast because</span>
                        <span class="token comment">// it isn&#39;t required.</span>
n<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Causes a ClassCastException to be thrown.</span>
<span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>mn<span class="token punctuation">.</span>data<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一节解释为什么在 <code>n.setData(&quot;Hello&quot;);</code> 语句中抛出 <code>ClassCastException</code>。</p><h3 id="桥接方法" tabindex="-1"><a class="header-anchor" href="#桥接方法" aria-hidden="true">#</a> 桥接方法</h3><p>在编译扩展参数化类或实现参数化接口的类或接口时，编译器可能需要创建一个合成方法，称为桥接方法，作为类型擦除过程的一部分。 您通常不需要担心桥接方法，但如果一个出现在堆栈跟踪中，您可能会感到困惑。</p><p>类型擦除后，<code>Node</code> 和 <code>MyNode</code> 类变为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Node.setData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyNode.setData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型擦除后，方法签名不匹配； <code>Node.setData(T)</code> 方法变为 <code>Node.setData(Object)</code>。 因此，“MyNode.setData(Integer)”方法不会覆盖“Node.setData(Object)”方法。</p>`,64),Tn={href:"https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html",target:"_blank",rel:"noopener noreferrer"},In=t(`<p>对于 MyNode 类，编译器为 setData 生成以下桥接方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>

    <span class="token comment">// Bridge method generated by the compiler</span>
    <span class="token comment">//</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyNode.setData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>桥接方法 MyNode.setData(object) 委托给原始的 MyNode.setData(Integer) 方法。 结果，<code>n.setData(&quot;Hello&quot;);</code> 语句调用方法 <code>MyNode.setData(Object)</code>，并抛出 <code>ClassCastException</code>，因为 <code>&quot;Hello&quot;</code> 无法转换为 <code>Integer </code>。</p><h3 id="不可具体化的类型" tabindex="-1"><a class="header-anchor" href="#不可具体化的类型" aria-hidden="true">#</a> 不可具体化的类型</h3>`,4),On={href:"https://docs.oracle.com/javase/tutorial/java/generics/erasure.html",target:"_blank",rel:"noopener noreferrer"},An=n("em",null,"varargs",-1),qn={href:"https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html#varargs",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html#varargs",target:"_blank",rel:"noopener noreferrer"},Pn=n("h4",{id:"不可具体化的类型-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#不可具体化的类型-1","aria-hidden":"true"},"#"),s(" 不可具体化的类型")],-1),En=n("p",null,[n("em",null,"可具体化"),s("类型是其类型信息在运行时完全可用的类型。 这包括原语、非泛型类型、原始类型和未绑定通配符的调用。")],-1),Dn=n("em",null,"Non-reifiable types",-1),Mn=n("code",null,"List<String>",-1),Kn=n("code",null,"List<Number>",-1),Vn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"instanceof",-1),Wn=t(`<h4 id="堆污染" tabindex="-1"><a class="header-anchor" href="#堆污染" aria-hidden="true">#</a> 堆污染</h4><p><em>堆污染</em>发生在参数化类型的变量引用不属于该参数化类型的对象时。 如果程序执行了一些在编译时产生未经检查的警告的操作，就会发生这种情况。 如果在编译时（在编译时类型检查规则的限制内）或在运行时，涉及参数化类型（例如，强制转换或方法调用）的操作的正确性，则会生成 <em>unchecked warning</em> 无法验证。 例如，堆污染发生在混合原始类型和参数化类型时，或执行未经检查的转换时。</p><p>在正常情况下，当同时编译所有代码时，编译器会发出未经检查的警告，提醒您注意潜在的堆污染。 如果您单独编译部分代码，则很难检测到堆污染的潜在风险。 如果您确保您的代码在没有警告的情况下编译，那么就不会发生堆污染。</p><h4 id="具有不可具体化形式参数的-varargs-方法的潜在漏洞" tabindex="-1"><a class="header-anchor" href="#具有不可具体化形式参数的-varargs-方法的潜在漏洞" aria-hidden="true">#</a> 具有不可具体化形式参数的 Varargs 方法的潜在漏洞</h4><p>包含可变参数输入参数的通用方法会导致堆污染。</p><p>考虑以下 ArrayBuilder 类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayBuilder</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> addToList <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> listArg<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> x <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      listArg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">faultyMethod</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectArray <span class="token operator">=</span> l<span class="token punctuation">;</span>     <span class="token comment">// Valid</span>
    objectArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ClassCastException thrown here</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例“HeapPollutionExample”使用“ArrayBuiler”类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapPollutionExample</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringListA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringListB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArrayBuilder</span><span class="token punctuation">.</span><span class="token function">addToList</span><span class="token punctuation">(</span>stringListA<span class="token punctuation">,</span> <span class="token string">&quot;Seven&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Eight&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ArrayBuilder</span><span class="token punctuation">.</span><span class="token function">addToList</span><span class="token punctuation">(</span>stringListB<span class="token punctuation">,</span> <span class="token string">&quot;Ten&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Eleven&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Twelve&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listOfStringLists <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ArrayBuilder</span><span class="token punctuation">.</span><span class="token function">addToList</span><span class="token punctuation">(</span>listOfStringLists<span class="token punctuation">,</span>
      stringListA<span class="token punctuation">,</span> stringListB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArrayBuilder</span><span class="token punctuation">.</span><span class="token function">faultyMethod</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译时，“ArrayBuilder.addToList”方法的定义会产生以下警告：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>warning: [varargs] Possible heap pollution from parameterized vararg type T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当编译器遇到可变参数方法时，它会将可变参数形式参数转换为数组。 但是，Java 编程语言不允许创建参数化类型的数组。在 ArrayBuilder.addToList 方法中，编译器将可变参数形式参数 T... elements 转换为形式参数 T[] elements，一个数组。 但是，由于类型擦除，编译器将可变参数形式参数转换为 Object[] elements。 因此，存在堆污染的可能性。</p><p>以下语句将可变参数形式参数 <code>l</code> 分配给 <code>Object</code> 数组 <code>objectArgs</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object[] objectArray = l;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该语句可能会引入堆污染。 与可变参数形式参数 l 的参数化类型匹配的值可以分配给变量 objectArray，因此可以分配给 l。 但是，编译器不会在此语句中生成未经检查的警告。 编译器在将可变参数形式参数 <code>List&lt;String&gt;... l</code> 转换为形式参数 List[] l 时已经生成警告。 此声明有效； 变量 <code>l</code> 的类型为 <code>List[]</code>，它是 <code>Object[]</code> 的子类型。</p><p>因此，如果您将任何类型的“List”对象分配给“objectArray”数组的任何数组组件，编译器不会发出警告或错误，如下语句所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>objectArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此语句将 objectArray 数组的第一个数组组件分配给一个包含一个 Integer 类型对象的 List 对象。</p><p>假设您使用以下语句调用“ArrayBuilder.faultyMethod”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayBuilder</span><span class="token punctuation">.</span><span class="token function">faultyMethod</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在运行时，JVM 在以下语句中抛出 ClassCastException：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ClassCastException thrown here</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>存储在变量“l”的第一个数组组件中的对象具有“<code>List&lt;Integer&gt;</code>”类型，但此语句需要一个“<code>List&lt;String&gt;</code>”类型的对象。</p><h4 id="使用不可具体化的形式参数防止-varargs-方法发出警告" tabindex="-1"><a class="header-anchor" href="#使用不可具体化的形式参数防止-varargs-方法发出警告" aria-hidden="true">#</a> 使用不可具体化的形式参数防止 Varargs 方法发出警告</h4><p>如果您声明一个具有参数化类型参数的可变参数方法，并且您确保该方法的主体不会因对可变参数形式参数的不当处理而抛出“ClassCastException”或其他类似异常，则可以防止警告 编译器通过将以下注释添加到静态和非构造方法声明来为这些类型的可变参数方法生成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SafeVarargs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>@SafeVarargs</code> 注释是方法契约的文档化部分； 此注释断言该方法的实现不会不正确地处理可变参数形式参数。</p><p>也可以通过在方法声明中添加以下内容来抑制此类警告，尽管不太理想：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;varargs&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),Hn={href:"https://docs.oracle.com/javase/tutorial/java/annotations/index.html",target:"_blank",rel:"noopener noreferrer"},Fn=n("h2",{id:"泛型的限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#泛型的限制","aria-hidden":"true"},"#"),s(" 泛型的限制")],-1),Un=n("p",null,"要有效地使用 Java 泛型，您必须考虑以下限制：",-1),Gn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#instantiate",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createObjects",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createStatic",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#cannotCast",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createArrays",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#cannotCatch",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#cannotOverload",target:"_blank",rel:"noopener noreferrer"},$n=t(`<h3 id="无法使用原始类型实例化泛型类型" tabindex="-1"><a class="header-anchor" href="#无法使用原始类型实例化泛型类型" aria-hidden="true">#</a> 无法使用原始类型实例化泛型类型</h3><p>无法使用原始类型实例化泛型类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 Pair 对象时，不能用基本类型替换类型参数 K 或 V：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您只能用非基本类型替换类型参数 K 和 V：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，Java 编译器将“8”自动装箱为“Integer.valueOf(8)”，将“a”自动装箱为“Character(&#39;a&#39;)”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),ns={href:"https://docs.oracle.com/javase/tutorial/java/data/index.html",target:"_blank",rel:"noopener noreferrer"},ss=t(`<h3 id="无法创建类型参数的实例" tabindex="-1"><a class="header-anchor" href="#无法创建类型参数的实例" aria-hidden="true">#</a> 无法创建类型参数的实例</h3><p>您不能创建类型参数的实例。 例如，以下代码会导致编译时错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> elem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// compile-time error</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为解决方法，您可以通过反射创建类型参数的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> elem <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以按如下方式调用 <code>append</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">append</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不能声明类型为类型参数的静态字段" tabindex="-1"><a class="header-anchor" href="#不能声明类型为类型参数的静态字段" aria-hidden="true">#</a> 不能声明类型为类型参数的静态字段</h3><p>类的静态字段是类的所有非静态对象共享的类级变量。 因此，类型参数的静态字段是不允许的。 考虑以下课程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> os<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果允许类型参数的静态字段，那么下面的代码就会混淆：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Smartphone</span><span class="token punctuation">&gt;</span></span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pager</span><span class="token punctuation">&gt;</span></span> pager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TabletPC</span><span class="token punctuation">&gt;</span></span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MobileDevice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为静态字段<code>os</code> 被<code>phone</code>、<code>pager</code> 和<code>pc</code> 共享，所以<code>os</code> 的实际类型是什么？ 不能同时是<code>Smartphone</code>、<code>Pager</code>、<code>TabletPC</code>。 因此，您不能创建类型参数的静态字段。</p><h3 id="不能对参数化类型使用-casts-或-instanceof" tabindex="-1"><a class="header-anchor" href="#不能对参数化类型使用-casts-或-instanceof" aria-hidden="true">#</a> 不能对参数化类型使用 Casts 或 <code>instanceof</code></h3><p>因为 Java 编译器会擦除泛型代码中的所有类型参数，所以您无法验证在运行时使用了泛型类型的哪个参数化类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">rtti</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// compile-time error</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递给 rtti 方法的参数化类型集是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">S</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行时不跟踪类型参数，因此它无法区分 <code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;String&gt;</code> 之间的区别。 您最多可以使用无界通配符来验证列表是否为“ArrayList”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtti</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token keyword">instanceof</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// OK; instanceof requires a reifiable type</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，您不能转换为参数化类型，除非它由无限通配符参数化。 例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span>  ln <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> li<span class="token punctuation">;</span>  <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，在某些情况下，编译器知道类型参数始终有效并允许进行强制转换。 例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> l1 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> l2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>l1<span class="token punctuation">;</span>  <span class="token comment">// OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无法创建参数化类型的数组" tabindex="-1"><a class="header-anchor" href="#无法创建参数化类型的数组" aria-hidden="true">#</a> 无法创建参数化类型的数组</h3><p>不能创建参数化类型的数组。例如，以下代码无法编译：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的代码说明了在数组中插入不同类型时会发生什么：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">// An ArrayStoreException is thrown.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您对通用列表尝试相同的操作，则会出现问题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// compiler error, but pretend it&#39;s allowed</span>
stringLists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
stringLists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// An ArrayStoreException should be thrown,</span>
                                            <span class="token comment">// but the runtime can&#39;t detect it.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果允许参数化列表的数组，则前面的代码将无法引发所需的“ArrayStoreException”。</p><h3 id="无法创建、捕获或抛出参数化类型的对象" tabindex="-1"><a class="header-anchor" href="#无法创建、捕获或抛出参数化类型的对象" aria-hidden="true">#</a> 无法创建、捕获或抛出参数化类型的对象</h3><p>泛型类不能直接或间接扩展“Throwable”类。例如，以下类将不会编译：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Extends Throwable indirectly</span>
<span class="token keyword">class</span> <span class="token class-name">MathException</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>    <span class="token comment">// compile-time error</span>

<span class="token comment">// Extends Throwable directly</span>
<span class="token keyword">class</span> <span class="token class-name">QueueFullException</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token comment">// compile-time error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法无法捕获类型参数的实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">,</span> <span class="token class-name">J</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">J</span><span class="token punctuation">&gt;</span></span> jobs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">J</span> job <span class="token operator">:</span> jobs<span class="token punctuation">)</span>
            <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">T</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// compile-time error</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，您可以在“throws”子句中使用类型参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Parser</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>     <span class="token comment">// OK</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无法重载每个重载的形式参数类型擦除为相同原始类型的方法" tabindex="-1"><a class="header-anchor" href="#无法重载每个重载的形式参数类型擦除为相同原始类型的方法" aria-hidden="true">#</a> 无法重载每个重载的形式参数类型擦除为相同原始类型的方法</h3><p>一个类不能有两个重载方法，它们在类型删除后具有相同的签名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strSet<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intSet<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重载将共享相同的类文件表示，并将生成编译时错误。</p>`,43);function as(es,ts){const a=c("ExternalLinkIcon");return o(),l("div",null,[m,g,b,h,n("p",null,[s("泛型通过在编译时检测更多的错误来增加代码的稳定性。完成本课程后，您可能需要继续学习"),n("a",y,[s("Generics"),e(a)]),s("吉拉德·布拉查的教程。")]),w,n("p",null,[s("按照惯例，类型参数名称是单个大写字母。这与变量"),n("a",j,[s("命名"),e(a)]),s("形成鲜明对比您已经知道的约定，并且有充分的理由：如果没有这种约定，很难区分类型变量和普通类或接口名称之间的区别。")]),x,n("p",null,[s("有关菱形符号和类型推断的更多信息，请参阅"),n("a",f,[s("type inference"),e(a)]),s(".")]),L,n("p",null,[s("代码“"),_,s("”将“K”实例化为“String”，将“V”实例化为一个“Integer”。因此，“OrderedPair”构造函数的参数类型分别为“String”和“Integer”。由于"),n("a",B,[s("自动装箱"),e(a)]),s("，向类传递“String”和“int”是有效的。")]),n("p",null,[s("如"),n("a",S,[s("钻石"),e(a)]),s("中所述，因为Java编译器可以从声明“"),N,s("”中推断“K”和“V”类型，所以可以使用菱形符号缩短这些语句：")]),T,n("p",null,[n("a",I,[s("类型擦除"),e(a)]),s("部分提供了有关Java编译器如何使用原始类型的更多信息。")]),O,n("p",null,[s("要完全禁用未检查的警告，请使用“-Xlint:未检查”标志。"),A,s("注释可抑制未选中的警告。如果您不熟悉“@SuppressWarnings”语法，请参阅"),n("a",q,[s("Annotations"),e(a)]),s(".")]),C,n("p",null,[s("此特性称为"),P,s("，允许您将泛型方法作为普通方法调用，而无需在尖括号之间指定类型。该主题将在下一节"),n("a",E,[s("类型推断"),e(a)]),s("中进一步讨论.")]),D,n("p",null,[s("有关在类型参数相关时如何在两个泛型类之间创建类似子类型的关系的信息，请参阅"),n("a",M,[s("Wildcards and Subyping"),e(a)]),s(".")]),K,n("p",null,[n("a",V,[s("通用方法"),e(a)]),s("向您介绍了类型推断，它使您能够像调用普通方法一样调用泛型方法，而无需在尖括号之间指定类型。考虑以下示例"),n("a",J,[W,e(a)]),s("，这需要"),n("a",H,[F,e(a)]),s("类别：")]),U,n("p",null,[s("只要编译器可以从上下文中推断类型参数，就可以用一组空的类型参数（"),G,s("）替换调用泛型类构造函数所需的类型参数。这对尖括号非正式地称为"),n("a",X,[s("菱形"),e(a)]),s(".")]),z,n("p",null,[s("See "),n("a",R,[s("Target Typing"),e(a)]),s(" in "),n("a",Q,[s("Lambda Expressions"),e(a)]),s(" for more information.")]),Y,n("p",null,[s("需要注意的是，"),Z,s("和"),$,s("不一样。您可以将“Object”或“Object”的任何子类型插入到“"),nn,s("”中。但只能将“null”插入到“"),sn,s("”中。"),n("a",an,[s("通配符使用指南"),e(a)]),s("部分提供了有关如何确定在给定情况下应使用哪种通配符（如果有的话）的更多信息。")]),en,n("p",null,[n("a",tn,[s("上限通配符"),e(a)]),s("部分显示了一个上界通配符将未知类型限制为特定类型或该类型的子类型，并使用“extends”关键字表示。 以类似的方式，"),pn,s("通配符将未知类型限制为特定类型或该类型的"),cn,s("。")]),on,n("p",null,[n("a",ln,[s("通配符使用指南"),e(a)]),s("本节提供了何时使用上限通配符和何时使用下限通配符的指导。")]),un,n("p",null,[s("如"),n("a",rn,[s("泛型、继承和子类型"),e(a)]),s("中所述，泛型类或接口并不相关，因为它们的类型之间存在关系。 但是，您可以使用通配符来创建泛型类或接口之间的关系。")]),dn,n("p",null,[n("a",kn,[s("通配符使用指南"),e(a)]),s("部分提供了有关使用上限和下限通配符的影响的更多信息。")]),vn,mn,gn,n("p",null,[n("a",bn,[hn,e(a)]),s("示例在编译时生成捕获错误：")]),yn,n("p",null,[s("在此示例中，编译器将“i”输入参数处理为“Object”类型。当“foo”方法调用"),n("a",wn,[s("List.set（int，E）"),e(a)]),s("时，编译器无法确认插入列表中的对象的类型，并产生错误。当发生这种类型的错误时，通常意味着编译器认为您为变量分配了错误的类型。泛型之所以被添加到Java语言中，是为了在编译时加强类型安全。")]),jn,n("p",null,[s("在本例中，代码试图执行安全操作，因此如何解决编译器错误？您可以通过编写一个捕获通配符的"),xn,s("来解决这个问题。在这种情况下，您可以通过创建私有助手方法“fooHelper”来解决这个问题，如"),n("a",fn,[Ln,e(a)]),s("所示:")]),_n,n("p",null,[s("现在考虑一个更复杂的示例"),n("a",Bn,[Sn,e(a)]),s(":")]),Nn,n("p",null,[s("为了解决这个问题并在类型擦除后保留泛型类型的"),n("a",Tn,[s("多态性"),e(a)]),s("，Java编译器生成了一个桥接方法来确保 子类型按预期工作。")]),In,n("p",null,[n("a",On,[s("类型擦除"),e(a)]),s(" 部分讨论了编译器删除与类型参数和类型参数相关的信息的过程。 类型擦除会产生与可变参数（也称为 "),An,s(" ）方法相关的后果，这些方法的可变参数形式参数具有不可具体化的类型。 请参阅"),n("a",qn,[s("将信息传递给方法或构造函数"),e(a)]),s("部分"),n("a",Cn,[s("任意参数"),e(a)]),s("了解有关可变参数方法的更多信息。")]),Pn,En,n("p",null,[Dn,s(" 是在编译时通过类型擦除删除信息的类型——调用未定义为无限通配符的泛型类型。 不可具体化的类型在运行时不会提供所有可用信息。 不可具体化类型的示例是 "),Mn,s(" 和 "),Kn,s("； JVM 无法在运行时区分这些类型。 如 "),n("a",Vn,[s("Restrictions on Generics"),e(a)]),s(" 所示，在某些情况下不能使用不可具体化的类型：在 "),Jn,s(" 中 例如，表达式，或作为数组中的元素。")]),Wn,n("p",null,[s("但是，此方法不会抑制从方法的调用站点生成的警告。 如果您不熟悉“@SuppressWarnings”语法，请参阅"),n("a",Hn,[s("注释"),e(a)]),s("。")]),Fn,Un,n("ul",null,[n("li",null,[n("a",Gn,[s("无法使用原始类型实例化泛型类型"),e(a)])]),n("li",null,[n("a",Xn,[s("无法创建类型参数的实例"),e(a)])]),n("li",null,[n("a",zn,[s("不能声明类型为类型参数的静态字段"),e(a)])]),n("li",null,[n("a",Rn,[s("不能对参数化类型使用 Casts 或 instanceof"),e(a)])]),n("li",null,[n("a",Qn,[s("无法创建参数化类型的数组"),e(a)])]),n("li",null,[n("a",Yn,[s("无法创建、捕获或抛出参数化类型的对象"),e(a)])]),n("li",null,[n("a",Zn,[s("无法重载每个重载的形式参数类型擦除为相同原始类型的方法"),e(a)])])]),$n,n("p",null,[s("有关自动装箱的更多信息，请参阅"),n("a",ns,[s("数字和字符串"),e(a)]),s("课程。")]),ss])}const cs=p(v,[["render",as],["__file","08.java-generics.html.vue"]]);export{cs as default};
