import{_ as n,r,o as c,c as d,a as i,b as e,d as l,e as t}from"./app.4659d0e0.js";const s={},a=t('<h1 id="swift基础-扩展" tabindex="-1"><a class="header-anchor" href="#swift基础-扩展" aria-hidden="true">#</a> Swift基础 - 扩展</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Extensions.html</p><p><em>扩展</em>为现有类、结构、枚举或协议类型添加了新功能。这包括扩展您无法访问原始源代码（称为<em>追溯建模</em>）的类型的能力。扩展类似于Objective-C中的类别。（与Objective-C类别不同，Swift扩展没有名称。）</p><p>Swift中的扩展可以：</p><ul><li>添加计算实例属性和计算类型属性</li><li>定义实例方法和类型方法</li><li>提供新的初始化器</li><li>定义下标</li><li>定义和使用新的嵌套类型</li><li>使现有类型符合协议</li></ul>',5),p={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID521",target:"_blank",rel:"noopener noreferrer"},h=t('<p>注意</p><p>扩展可以为类型添加新功能，但它们不能覆盖现有功能。</p><h2 id="扩展语法" tabindex="-1"><a class="header-anchor" href="#扩展语法" aria-hidden="true">#</a> 扩展语法</h2><p>使用<code>extension</code>关键字声明扩展：</p><ol><li>extension SomeType {</li><li>​ // new functionality to add to SomeType goes here</li><li>}</li></ol><p>扩展可以扩展现有类型，使其采用一个或多个协议。要添加协议一致性，您编写协议名称的方式与为类或结构编写协议名称的方式相同：</p><ol><li>extension SomeType: SomeProtocol, AnotherProtocol {</li><li>​ // implementation of protocol requirements goes here</li><li>}</li></ol>',7),u={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID277",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID277",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID185",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID553",target:"_blank",rel:"noopener noreferrer"},_=t('<p>注意</p><p>如果您定义了一个扩展来向现有类型添加新功能，则该新功能将在该类型的所有现有实例上可用，即使它们是在定义扩展之前创建的。</p><h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h2><p>扩展可以将计算实例属性和计算类型属性添加到现有类型中。此示例为Swift的内置<code>Double</code>类型添加了五个计算实例属性，为使用距离单元提供基本支持：</p><ol><li>extension Double {</li><li>​ var km: Double { return self * 1_000.0 }</li><li>​ var m: Double { return self }</li><li>​ var cm: Double { return self / 100.0 }</li><li>​ var mm: Double { return self / 1_000.0 }</li><li>​ var ft: Double { return self / 3.28084 }</li><li>}</li><li>let oneInch = 25.4.mm</li><li>print(&quot;One inch is (oneInch) meters&quot;)</li><li>// Prints &quot;One inch is 0.0254 meters&quot;</li><li>let threeFeet = 3.ft</li><li>print(&quot;Three feet is (threeFeet) meters&quot;)</li><li>// Prints &quot;Three feet is 0.914399970739201 meters&quot;</li></ol><p>这些计算属性表示，<code>Double</code>值应被视为一定的长度单位。虽然它们是作为计算属性实现的，但这些属性的名称可以附加到带有点语法的浮点字面值中，作为使用该字面值执行距离转换的一种方式。</p><p>在本例中，<code>1.0</code>的<code>Double</code>值被视为表示“一米”。这就是为什么<code>m</code>计算属性返回<code>self</code>——表达式<code>1.m</code>被认为是计算aDouble值<code>1.0</code>的原因。</p><p>其他单位需要一些转换才能表示为以米为单位的值。一公里与1000米相同，因此计算<code>km</code>属性将值乘以<code>1_000.00</code>，转换为以米为单位的数字。同样，一米有3.28084英尺，因此<code>ft</code>计算属性将底层<code>Double</code>值除以<code>3.28084</code>，将其从英尺转换为米。</p><p>这些属性是只读计算属性，因此它们在没有<code>get</code>关键字的情况下表示，以便简短。它们的返回值为<code>Double</code>类型，无论何时接受<code>Double</code>，都可以在数学计算中使用：</p><ol><li>let aMarathon = 42.km + 195.m</li><li>print(&quot;A marathon is (aMarathon) meters long&quot;)</li><li>// Prints &quot;A marathon is 42195.0 meters long&quot;</li></ol><p>注意</p><p>扩展可以添加新的计算属性，但它们不能添加存储的属性，也不能向现有属性添加属性观察器。</p><h2 id="初始化器" tabindex="-1"><a class="header-anchor" href="#初始化器" aria-hidden="true">#</a> 初始化器</h2><p>扩展可以为现有类型添加新的初始化器。这使您能够扩展其他类型，以接受自己的自定义类型作为初始化参数，或提供未作为类型原始实现的一部分的其他初始化选项。</p><p>扩展可以向类添加新的方便初始化器，但它们不能向类添加新的指定初始化器或去初始化器。指定的初始化器和去初始化器必须始终由原始类实现提供。</p>',15),b={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID215",target:"_blank",rel:"noopener noreferrer"},w=t("<p>如果您使用扩展程序将初始化器添加到另一个模块中声明的结构中，则新初始化器在从定义模块调用初始化器之前无法访问<code>self</code>。</p><p>下面的示例定义了一个自定义<code>Rect</code>结构来表示几何矩形。该示例还定义了两个名为<code>Size</code>和<code>Point</code>的支持结构，这两个结构都为其所有属性提供<code>0.0</code>的默认值：</p><ol><li>struct Size {</li><li>​ var width = 0.0, height = 0.0</li><li>}</li><li>struct Point {</li><li>​ var x = 0.0, y = 0.0</li><li>}</li><li>struct Rect {</li><li>​ var origin = Point()</li><li>​ var size = Size()</li><li>}</li></ol>",3),I=i("code",null,"Rect",-1),q={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID213",target:"_blank",rel:"noopener noreferrer"},x=i("code",null,"Rect",-1),k=t('<ol><li>let defaultRect = Rect()</li><li>let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),</li><li>size: Size(width: 5.0, height: 5.0))</li></ol><p>您可以扩展<code>Rect</code>结构，以提供具有特定中心点和大小的额外初始化器：</p><ol><li>extension Rect {</li><li>​ init(center: Point, size: Size) {</li><li>​ let originX = center.x - (size.width / 2)</li><li>​ let originY = center.y - (size.height / 2)</li><li>​ self.init(origin: Point(x: originX, y: originY), size: size)</li><li>​ }</li><li>}</li></ol><p>这个新的初始化器首先根据提供的<code>center</code>和<code>size</code>值计算适当的原点。然后，初始化器调用结构的自动成员初始化器<code>init(origin:size:)</code>该初始化器将新的原点和大小值存储在适当的属性中：</p><ol><li>let centerRect = Rect(center: Point(x: 4.0, y: 4.0),</li><li>​ size: Size(width: 3.0, height: 3.0))</li><li>// centerRect&#39;s origin is (2.5, 2.5) and its size is (3.0, 3.0)</li></ol><p>注意</p><p>如果您提供带有扩展的新初始化器，您仍然有责任确保初始化器完成后每个实例都已完全初始化。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>扩展可以向现有类型添加新的实例方法和类型方法。以下示例为<code>Int</code>类型添加了一个名为<code>repetitions</code>的新实例方法：</p><ol><li>extension Int {</li><li>​ func repetitions(task: () -&gt; Void) {</li><li>​ for _ in 0..&lt;self {</li><li>​ task()</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>The <code>repetitions(task:)</code> method takes a single argument of type <code>() -&gt; Void</code>, which indicates a function that has no parameters and doesn’t return a value.</p><p>定义此扩展后，您可以在任何整数上调用<code>repetitions(task:)</code>方法来执行多次任务：</p><ol><li>3.repetitions {</li><li>​ print(&quot;Hello!&quot;)</li><li>}</li><li>// Hello!</li><li>// Hello!</li><li>// Hello!</li></ol><h3 id="突变实例方法" tabindex="-1"><a class="header-anchor" href="#突变实例方法" aria-hidden="true">#</a> 突变实例方法</h3><p>使用扩展添加的实例方法也可以修改（或<em>突变</em>）实例本身。修改<code>self</code>或其属性的结构和枚举方法必须将实例方法标记为<code>mutating</code>，就像原始实现的突变方法一样。</p><p>以下示例在Swift的<code>Int</code>类型中添加了一种名为<code>square</code>的新突变方法，该方法将原始值平方：</p><ol><li>extension Int {</li><li>​ mutating func square() {</li><li>​ self = self * self</li><li>​ }</li><li>}</li><li>var someInt = 3</li><li>someInt.square()</li><li>// someInt is now 9</li></ol><h2 id="下标" tabindex="-1"><a class="header-anchor" href="#下标" aria-hidden="true">#</a> 下标</h2><p>扩展可以向现有类型添加新的下标。此示例为Swift的内置<code>Int</code>类型添加了整数下标。此下标<code>[n]</code>从数字右侧返回小数<code>n</code>位：</p><ul><li><code>123456789[0]</code>退货<code>9</code></li><li><code>123456789[1]</code>退货<code>8</code></li></ul><p>...等等：</p><ol><li>extension Int {</li><li>​ subscript(digitIndex: Int) -&gt; Int {</li><li>​ var decimalBase = 1</li><li>​ for _ in 0..&lt;digitIndex {</li><li>​ decimalBase *= 10</li><li>​ }</li><li>​ return (self / decimalBase) % 10</li><li>​ }</li><li>}</li><li>746381295[0]</li><li>// returns 5</li><li>746381295[1]</li><li>// returns 9</li><li>746381295[2]</li><li>// returns 2</li><li>746381295[8]</li><li>// returns 7</li></ol><p>如果<code>Int</code>值没有足够的数字来满足请求的索引，下标实现将返回<code>0</code>，就像数字在左侧填充了零一样：</p><ol><li>746381295[9]</li><li>// returns 0, as if you had requested:</li><li>0746381295[9]</li></ol><h2 id="嵌套类型" tabindex="-1"><a class="header-anchor" href="#嵌套类型" aria-hidden="true">#</a> 嵌套类型</h2><p>扩展可以向现有类、结构和枚举添加新的嵌套类型：</p><ol><li>extension Int {</li><li>​ enum Kind {</li><li>​ case negative, zero, positive</li><li>​ }</li><li>​ var kind: Kind {</li><li>​ switch self {</li><li>​ case 0:</li><li>​ return .zero</li><li>​ case let x where x &gt; 0:</li><li>​ return .positive</li><li>​ default:</li><li>​ return .negative</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>此示例为<code>Int</code>添加了一个新的嵌套枚举。这个枚举称为<code>Kind</code>，表示特定整数所代表的数字类型。具体来说，它表示数字是负数、零还是正数。</p><p>此示例还向<code>Int</code>添加了一个新的计算实例属性，称为<code>kind</code>，该属性返回该整数的适当<code>Kind</code>枚举情况。</p><p>嵌套枚举现在可以与任何<code>Int</code>值一起使用：</p><ol><li>func printIntegerKinds(_ numbers: [Int]) {</li><li>​ for number in numbers {</li><li>​ switch number.kind {</li><li>​ case .negative:</li><li>​ print(&quot;- &quot;, terminator: &quot;&quot;)</li><li>​ case .zero:</li><li>​ print(&quot;0 &quot;, terminator: &quot;&quot;)</li><li>​ case .positive:</li><li>​ print(&quot;+ &quot;, terminator: &quot;&quot;)</li><li>​ }</li><li>​ }</li><li>​ print(&quot;&quot;)</li><li>}</li><li>printIntegerKinds([3, 19, -27, 0, -6, 0, 7])</li><li>// Prints &quot;+ + - 0 - 0 + &quot;</li></ol><p>此函数<code>printIntegerKinds(_:)</code>接受<code>Int</code>值的输入数组，并依次迭代这些值。对于数组中的每个整数，函数考虑该整数的<code>kind</code>计算属性，并打印适当的描述。</p><p>注意</p><p><code>number.kind</code>已经知道是<code>Int.Kind</code>类型。因此，所有<code>Int.Kind</code>大小写值都可以在<code>switch</code>语句中以速记形式书写，例如<code>.negative</code>而不是<code>Int.Kind.negative</code>。</p>',34);function v(z,D){const o=r("ExternalLinkIcon");return c(),d("div",null,[a,i("p",null,[e("在 Swift 中，您甚至可以扩展协议，以提供其要求的实现，或添加符合要求的类型可以利用的其他功能。有关更多详细信息，请参阅"),i("a",p,[e("协议扩展"),l(o)]),e("。")]),h,i("p",null,[e("以这种方式添加协议一致性在"),i("a",u,[e("使用扩展添加协议一致性"),l(o)]),e("中"),i("a",f,[e("进行了"),l(o)]),e("描述。")]),i("p",null,[e("扩展可用于扩展现有的泛型类型，如"),i("a",m,[e("扩展通用类型"),l(o)]),e("中所述。您还可以扩展泛型类型以有条件地添加功能，如"),i("a",g,[e("带有通用Where子句的扩展"),l(o)]),e("中所述。")]),_,i("p",null,[e("如果您使用扩展程序将初始化器添加到为其所有存储属性提供默认值且不定义任何自定义初始化器的值类型中，您可以从扩展的初始化器中调用该值类型的默认初始化器和成员初始化器。如果您将初始化器写为值类型原始实现的一部分，则情况并非如此，如"),i("a",b,[e("值类型的初始化委托"),l(o)]),e("所述。")]),w,i("p",null,[e("由于"),I,e("结构为其所有属性提供默认值，因此它会自动接收默认初始化器和成员初始化器，如"),i("a",q,[e("默认初始化器"),l(o)]),e("所述。这些初始化器可用于创建新的"),x,e("实例：")]),k])}const P=n(s,[["render",v],["__file","30.swift-extensions.html.vue"]]);export{P as default};
