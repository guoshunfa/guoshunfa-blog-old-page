import{_ as o,r as p,o as c,c as i,a as s,b as n,d as e,e as t}from"./app.4659d0e0.js";const l={},u=t('<h1 id="swift基础-枚举" tabindex="-1"><a class="header-anchor" href="#swift基础-枚举" aria-hidden="true">#</a> Swift基础 - 枚举</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</p><p><em>枚举</em>为一组相关值定义了通用类型，并使您能够在代码中以类型安全的方式处理这些值。</p><p>如果您熟悉C，您将知道C枚举为一组整数值分配相关名称。Swift 中的枚举要灵活得多，不必为每个枚举案例提供值。如果为每个枚举情况提供了一个值（称为<em>原始</em>值），则该值可以是字符串、字符或任何整数或浮点类型的值。</p><p>或者，枚举大小写可以指定要存储<em>的任何</em>类型的关联值，以及每个不同的大小写值，就像其他语言中的联合或变体一样。您可以将一组常见的相关情况定义为一个枚举的一部分，每个枚举都有与之关联的不同类型值集。</p><p>Swift 中的枚举本身就是一流的类型。它们采用了许多传统上仅由类支持的功能，例如计算属性以提供有关枚举当前值的更多信息，以及实例方法，以提供与枚举所代表的值相关的功能。枚举还可以定义初始化器以提供初始大小写值；可以扩展其功能，使其功能超出原始实现；并且可以遵守协议以提供标准功能。</p>',6),r={href:"https://docs.swift.org/swift-book/LanguageGuide/Properties.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.swift.org/swift-book/LanguageGuide/Methods.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="枚举语法" tabindex="-1"><a class="header-anchor" href="#枚举语法" aria-hidden="true">#</a> 枚举语法</h2><p>您使用<code>enum</code>关键字引入枚举，并将它们的整个定义放在一对大括号中：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">SomeEnumeration</span> <span class="token punctuation">{</span>
   <span class="token comment">// enumeration definition goes here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是指南针四个要点的示例：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">CompassPoint</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> north
   <span class="token keyword">case</span> south
   <span class="token keyword">case</span> east
   <span class="token keyword">case</span> west
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举中定义的值（如<code>north</code>、<code>south</code>、<code>east</code>和<code>west</code>）是其<em>枚举情况</em>。您可以使用<code>case</code>关键字来引入新的枚举案例。</p><blockquote><p>注意</p><p>与C和Objective-C等语言不同，Swift枚举案例默认没有设置整数值。在上面的<code>CompassPoint</code>示例中，<code>north</code>、<code>south</code>、<code>east</code>和<code>west</code>不隐含等于<code>0</code>、1、<code>2</code>和3。相反，不同的枚举情况本身就是值，具有明确定义的<code>CompassPoint</code>类型。</p></blockquote><p>多个案例可以出现在一行上，用逗号分隔：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Planet</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> mercury<span class="token punctuation">,</span> venus<span class="token punctuation">,</span> earth<span class="token punctuation">,</span> mars<span class="token punctuation">,</span> jupiter<span class="token punctuation">,</span> saturn<span class="token punctuation">,</span> uranus<span class="token punctuation">,</span> neptune
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个枚举定义都定义了一种新类型。与Swift中的其他类型一样，他们的名字（如<code>CompassPoint</code>和<code>Planet</code>）以大写字母开头。给出枚举类型单数而不是复数名称，以便它们读起来不言而喻：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> directionToHead <span class="token operator">=</span> <span class="token class-name">CompassPoint</span><span class="token punctuation">.</span>west
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>&#39; directionToHead &#39;的类型在它被&#39; compaspoint &#39;的可能值之一初始化时被推断出来。一旦&#39; directionToHead &#39;被声明为&#39; compaspoint &#39;，你可以使用一个更短的点语法将它设置为一个不同的&#39; compaspoint &#39;值:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>directionToHead <span class="token operator">=</span> <span class="token punctuation">.</span>east
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>directionToHead</code>的类型已经知道，因此您可以在设置其值时删除该类型。这使得在处理显式类型的枚举值时具有高度可读性的代码。</p><h2 id="将枚举值与switch语句匹配" tabindex="-1"><a class="header-anchor" href="#将枚举值与switch语句匹配" aria-hidden="true">#</a> 将枚举值与Switch语句匹配</h2><p>您可以将单个枚举值与<code>switch</code>语句匹配：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>directionToHead <span class="token operator">=</span> <span class="token punctuation">.</span>south
<span class="token keyword">switch</span> directionToHead <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span>north<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Lots of planets have a north&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span>south<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Watch out for penguins&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span>east<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Where the sun rises&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span>west<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Where the skies are blue&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Watch out for penguins&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以将此代码读取为：</p><p>考虑<code>directionToHead</code>的价值。在它等于<code>.north</code>的情况下，打印<code>&quot;Lotsplanetshavenorth&quot;</code>在它等于<code>.south</code>的情况下，打印<code>&quot;Watchoutpenguins&quot;</code></p><p>...等等。</p>`,20),h={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"switch",-1),w=s("code",null,".west``case",-1),g=s("code",null,"CompassPoint",-1),y=t(`<p>如果不适合为每个枚举案例提供<code>case</code>，您可以提供<code>default</code>案例来涵盖任何未明确解决的案例：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> somePlanet <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span>earth
<span class="token keyword">switch</span> somePlanet <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span>earth<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mostly harmless&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not a safe place for humans&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Mostly harmless&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迭代枚举案例" tabindex="-1"><a class="header-anchor" href="#迭代枚举案例" aria-hidden="true">#</a> 迭代枚举案例</h2><p>对于某些枚举，收集所有枚举的案例是有用的。您通过在枚举名称后写入<code>:CaseIterable</code>来启用此功能。Swift将所有案例的集合公开为枚举类型的<code>allCases</code>属性。这里有一个例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Beverage</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> coffee<span class="token punctuation">,</span> tea<span class="token punctuation">,</span> juice
<span class="token punctuation">}</span>
<span class="token keyword">let</span> numberOfChoices <span class="token operator">=</span> <span class="token class-name">Beverage</span><span class="token punctuation">.</span>allCases<span class="token punctuation">.</span>count
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">numberOfChoices</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> beverages available&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;3 beverages available&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，您编写<code>Beverage.allCases</code>来访问包含<code>Beverage</code>枚举所有案例的集合。您可以像使用任何其他集合一样使用<code>allCases</code>——集合的元素是枚举类型的实例，因此在这种情况下，它们是<code>Beverage</code>值。上面的示例计算了有多少个案例，下面的示例使用<code>for</code>-<code>in</code>循环来迭代所有案例。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> beverage <span class="token keyword">in</span> <span class="token class-name">Beverage</span><span class="token punctuation">.</span>allCases <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>beverage<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// coffee</span>
<span class="token comment">// tea</span>
<span class="token comment">// juice</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),_={href:"https://developer.apple.com/documentation/swift/caseiterable",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"CaseIterable",-1),x={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<h2 id="关联值" tabindex="-1"><a class="header-anchor" href="#关联值" aria-hidden="true">#</a> 关联值</h2><p>上一节中的示例显示了枚举的情况本身是如何定义（和键入）的值。您可以为<code>Planet.earth</code>设置常量或变量，稍后检查此值。然而，有时将其他类型的值与这些大小写值一起存储是有用的。此附加信息称为<em>关联值</em>，每次您将该情况用作代码中的值时，它都会有所不同。</p><p>您可以定义Swift枚举来存储任何给定类型的关联值，如果需要，每个枚举情况下的值类型可能不同。类似的枚举被称为<em>歧视联合</em>、<em>标记联合</em>或其他编程语言的<em>变体</em>。</p><p>例如，假设库存跟踪系统需要通过两种不同类型的条形码跟踪产品。一些产品以UPC格式标有1D条形码，使用数字<code>0</code>到9。每个条形码都有一个数字系统数字，然后是五个制造商代码数字和五个产品代码数字。后面跟着一个检查数字，以验证代码是否已正确扫描：</p><img src="https://file.pandacode.cn/blog/202204051541473.png" alt="../_images/barcode_UPC_2x.png" style="zoom:33%;"><p>其他产品以二维码格式标有二维条形码，可以使用任何ISO 8859-1字符，并可以对长度高达2953个字符的字符串进行编码：</p><img src="https://file.pandacode.cn/blog/202204051541247.png" alt="../_images/barcode_QR_2x.png" style="zoom:33%;"><p>库存跟踪系统可以方便地将UPC条形码存储为四个整数的元组，并将二维码条形码存储为任何长度的字符串。</p><p>在 Swift 中，用于定义任一类型的产品条形码的枚举可能如下所示：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Barcode</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token function">upc</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>
   <span class="token keyword">case</span> <span class="token function">qrCode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可以理解为：</p><p>“定义一个名为‘Barcode’的枚举类型，它可以接受一个带有类型关联值(‘Int’，‘Int’，‘Int’，‘Int’)的‘upc’值，或者一个带有类型关联值(‘String’)的‘qrCode’值。”</p><p>此定义不提供任何实际的<code>Int</code>或<code>String</code>值——它只是定义了<code>Barcode</code>常量和变量在等于<code>Barcode.upc</code>或<code>Barcode.qrCode</code>时可以存储的关联值<em>类型</em>。</p><p>然后，您可以使用任一类型创建新条形码：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> productBarcode <span class="token operator">=</span> <span class="token class-name">Barcode</span><span class="token punctuation">.</span><span class="token function">upc</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">85909</span><span class="token punctuation">,</span> <span class="token number">51226</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的例子创建了一个名为“productBarcode”的新变量，并将其赋值为“Barcode”。Upc &#39;，关联元组值为&#39;(8,85909,51226,3)&#39;。</p><p>您可以为同一产品分配不同类型的条形码：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>productBarcode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">qrCode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ABCDEFGHIJKLMNOP&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，原始<code>Barcode.upc</code>及其整数值将被newBarcode<code>Barcode.qrCode</code>及其字符串值取代。<code>Barcode</code>类型的常量和变量可以存储<code>.upc</code>或<code>.qrCode</code>（及其相关值），但它们在任何给定时间只能存储其中之一。</p>`,19),P={href:"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID147",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"let",-1),B=s("code",null,"var",-1),E=s("code",null,"switch",-1),S=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">switch</span> productBarcode <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">upc</span><span class="token punctuation">(</span><span class="token keyword">let</span> numberSystem<span class="token punctuation">,</span> <span class="token keyword">let</span> manufacturer<span class="token punctuation">,</span> <span class="token keyword">let</span> product<span class="token punctuation">,</span> <span class="token keyword">let</span> check<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;UPC: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">numberSystem</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">manufacturer</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">product</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">check</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">qrCode</span><span class="token punctuation">(</span><span class="token keyword">let</span> productCode<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;QR code: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">productCode</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;QR code: ABCDEFGHIJKLMNOP.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果枚举情况的所有关联值都被提取为常量，或者所有关联值都被提取为变量，为了简洁起义，您可以在案例名称之前放置单个<code>var</code>或<code>let</code>注释：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">switch</span> productBarcode <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">upc</span><span class="token punctuation">(</span>numberSystem<span class="token punctuation">,</span> manufacturer<span class="token punctuation">,</span> product<span class="token punctuation">,</span> check<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;UPC : </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">numberSystem</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">manufacturer</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">product</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">check</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">qrCode</span><span class="token punctuation">(</span>productCode<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;QR code: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">productCode</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;QR code: ABCDEFGHIJKLMNOP.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原始值" tabindex="-1"><a class="header-anchor" href="#原始值" aria-hidden="true">#</a> 原始值</h2>`,4),A={href:"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID148",target:"_blank",rel:"noopener noreferrer"},L=s("em",null,"原始值",-1),G=t(`<p>以下是将原始ASCII值与命名枚举案例一起存储的示例：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">ASCIIControlCharacter</span><span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> tab <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\t&quot;</span></span>
   <span class="token keyword">case</span> lineFeed <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span>
   <span class="token keyword">case</span> carriageReturn <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\r&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=s("code",null,"ASCIIControlCharacter",-1),H=s("code",null,"Character",-1),V=s("code",null,"Character",-1),D={href:"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>原始值可以是字符串、字符或任何整数或浮点数类型。每个原始值在其枚举声明中必须是唯一的。</p><blockquote><p>注意</p><p>原始值与关联值不同。当您首次在代码中定义枚举时，原始值设置为预填充值，如上面的三个ASCII代码。特定枚举情况的原始值始终相同。当您根据枚举的一个情况创建新常量或变量时，会设置关联值，并且每次这样做时都可能不同。</p></blockquote><h3 id="隐式分配的原始值" tabindex="-1"><a class="header-anchor" href="#隐式分配的原始值" aria-hidden="true">#</a> 隐式分配的原始值</h3><p>当您处理存储整数或字符串原始值的枚举时，您不必为每个案例显式分配原始值。当您不这样做时，Swift会自动为您分配值。</p><p>例如，当整数用于原始值时，每种情况下的隐式值比上一个大小写多一个。如果第一个案例没有值集，则其值为<code>0</code>。</p><p>以下枚举是对早期<code>Planet</code>枚举的细化，其整数原始值表示每颗行星与太阳的顺序：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Planet</span><span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> mercury <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> venus<span class="token punctuation">,</span> earth<span class="token punctuation">,</span> mars<span class="token punctuation">,</span> jupiter<span class="token punctuation">,</span> saturn<span class="token punctuation">,</span> uranus<span class="token punctuation">,</span> neptune
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>Planet.mercury</code>的显式原始值为1，<code>Planet.venus</code>的隐式原始值为2，以此类推。</p><p>当字符串用于原始值时，每个案例的隐式值是该案例名称的文本。</p><p>下面的枚举是对早期<code>CompassPoint</code>枚举的细化，字符串原始值表示每个方向的名称：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">CompassPoint</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> north<span class="token punctuation">,</span> south<span class="token punctuation">,</span> east<span class="token punctuation">,</span> west
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>CompassPoint.south</code>具有<code>&quot;south&quot;</code>等隐式原始值。</p><p>您可以使用其<code>rawValue</code>属性访问枚举案例的原始值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> earthsOrder <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">.</span>earth<span class="token punctuation">.</span>rawValue
<span class="token comment">// earthsOrder is 3</span>

<span class="token keyword">let</span> sunsetDirection <span class="token operator">=</span> <span class="token class-name">CompassPoint</span><span class="token punctuation">.</span>west<span class="token punctuation">.</span>rawValue
<span class="token comment">// sunsetDirection is &quot;west&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从原始值初始化" tabindex="-1"><a class="header-anchor" href="#从原始值初始化" aria-hidden="true">#</a> 从原始值初始化</h3><p>如果您使用原始值类型定义枚举，枚举会自动收到一个初始化器，该初始化器接受原始值类型的值（作为称为<code>rawValue</code>的参数），并返回枚举大小写或<code>nil</code>。您可以使用此初始化器尝试创建枚举的新实例。</p><p>此示例从原始值<code>7</code>中识别天王星：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> possiblePlanet <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token comment">// possiblePlanet is of type Planet? and equals Planet.uranus</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，并不是所有可能的“Int”值都能找到匹配的行星。因此，原始值初始化器总是返回一个<em>可选的</em>枚举情况。在上面的例子中，“可能行星”的类型是“行星?”或者“可选的‘行星’。”</p>`,19),N=s("p",null,"注意",-1),O={href:"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID376",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>如果您试图找到位置为11的行星，原始值初始化器返回的可选<code>Planet</code>值将为<code>nil</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> positionToFind <span class="token operator">=</span> <span class="token number">11</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> somePlanet <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> positionToFind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">switch</span> somePlanet <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token punctuation">.</span>earth<span class="token punctuation">:</span>
       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mostly harmless&quot;</span></span><span class="token punctuation">)</span>
   <span class="token keyword">default</span><span class="token punctuation">:</span>
       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not a safe place for humans&quot;</span></span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There isn&#39;t a planet at position </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">positionToFind</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;There isn&#39;t a planet at position 11&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子使用了可选的绑定来访问一个原始值为&#39; 11 &#39;的行星。语句&#39; if let somePlanet = Planet(rawValue: 11) &#39;创建了一个可选的&#39; Planet &#39;，并将&#39; somePlanet &#39;设置为可选的&#39; Planet &#39;的值，如果它可以被检索。在这种情况下，不可能检索位置为“11”的行星，所以执行“else”分支。</p><h2 id="递归枚举" tabindex="-1"><a class="header-anchor" href="#递归枚举" aria-hidden="true">#</a> 递归枚举</h2><p><em>递归枚举</em>是一种枚举，其枚举的另一个实例作为一个或多个枚举案例的关联值。您通过在枚举前<code>indirect</code>写入来指示枚举情况是递归的，这告诉编译器插入必要的间接层。</p><p>例如，这里有一个存储简单算术表达式的枚举：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">ArithmeticExpression</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span>
   <span class="token keyword">indirect</span> <span class="token keyword">case</span> <span class="token function">addition</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticExpression</span><span class="token punctuation">,</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">)</span>
   <span class="token keyword">indirect</span> <span class="token keyword">case</span> <span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticExpression</span><span class="token punctuation">,</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以在枚举的开始之前写&#39; indirect &#39;来为所有有关联值的枚举情况启用间接:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">indirect</span> <span class="token keyword">enum</span> <span class="token class-name">ArithmeticExpression</span> <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span>
   <span class="token keyword">case</span> <span class="token function">addition</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticExpression</span><span class="token punctuation">,</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">)</span>
   <span class="token keyword">case</span> <span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticExpression</span><span class="token punctuation">,</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此枚举可以存储三种算术表达式:普通数字、两个表达式的加法和两个表达式的乘法。“加法”和“乘法”的关联值也是算术表达式——这些关联值使得嵌套表达式成为可能。例如，表达式&#39;(5 + 4)* 2 &#39;在乘法运算的右边有一个数字，在乘法运算的左边有另一个表达式。因为数据是嵌套的，所以用于存储数据的枚举也需要支持嵌套——这意味着</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">let</span> five <span class="token operator">=</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">let</span> four <span class="token operator">=</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">.</span><span class="token function">addition</span><span class="token punctuation">(</span>five<span class="token punctuation">,</span> four<span class="token punctuation">)</span>
<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">.</span><span class="token function">multiplication</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归函数是处理具有递归结构的数据的一种简单方法。例如，这里有一个计算算术表达式的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">evaluate</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> expression<span class="token punctuation">:</span> <span class="token class-name">ArithmeticExpression</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">switch</span> expression <span class="token punctuation">{</span>
   <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> value
   <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">addition</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">)</span>
   <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">multiplication</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">evaluate</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;18&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数只需返回相关值即可计算纯数。它通过评估左侧的表达式，在右侧评估表达式，然后将它们添加或乘以它们来计算加法或乘法。</p>`,14);function R(U,j){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("有关这些功能的更多信息，请参阅"),s("a",r,[n("属性"),e(a)]),n("、"),s("a",d,[n("方法"),e(a)]),n("、"),s("a",k,[n("初始化"),e(a)]),n("、"),s("a",m,[n("扩展"),e(a)]),n("和"),s("a",v,[n("协议"),e(a)]),n("。")]),b,s("p",null,[n("如"),s("a",h,[n("Control Flow"),e(a)]),n("中所述，在考虑枚举的情况时，"),f,n("语句必须详尽无遗。如果省略"),w,n("，此代码不会编译，因为它不考虑"),g,n("案例的完整列表。要求详尽无遗，确保枚举案例不会被意外省略。")]),y,s("p",null,[n("上面示例中使用的语法将枚举标记为符合"),s("a",_,[q,e(a)]),n("协议。有关协议的信息，请参阅"),s("a",x,[n("协议"),e(a)]),n("。")]),C,s("p",null,[n("您可以使用开关语句检查不同的条形码类型，类似于将"),s("a",P,[n("枚举值与交换机语句匹配"),e(a)]),n("中的示例。然而，这一次，关联值作为开关语句的一部分提取。您可以将每个关联值提取为常量（带有"),I,n("前缀）或变量（带有"),B,n("前缀），以便在"),E,n("大小写的正文中使用：")]),S,s("p",null,[s("a",A,[n("关联值"),e(a)]),n("中的条形码示例显示了枚举案例如何声明它们存储不同类型的关联值。作为关联值的替代品，枚举情况可以预先填充默认值（称为"),L,n("），这些值都是同一类型。")]),G,s("p",null,[n("在这里，名为"),T,n("的枚举的原始值被定义为"),H,n("类型，并设置为一些更常见的ASCII控制字符。"),V,n("值在"),s("a",D,[n("字符串和字符"),e(a)]),n("中描述。")]),F,s("blockquote",null,[N,s("p",null,[n("原始值初始化器是一个失败的初始化器，因为并非每个原始值都会返回一个枚举情况。有关更多信息，请参阅"),s("a",O,[n("失败的初始化器"),e(a)]),n("。")])]),M])}const W=o(l,[["render",R],["__file","17.swift-enumerations.html.vue"]]);export{W as default};
