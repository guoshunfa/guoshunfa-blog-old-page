import{_ as l,r as p,o as i,c as d,a as s,b as n,d as a,w as c,e}from"./app.4659d0e0.js";const r="/assets/202204042043654.6fa7fd3a.png",u={},k=s("h1",{id:"swift基础-基本运算符",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#swift基础-基本运算符","aria-hidden":"true"},"#"),n(" Swift基础 - 基本运算符")],-1),m=s("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72",-1),v=s("p",null,"操作符是用来检查、更改或合并值的特殊符号或短语。例如，加法运算符(' + ')将两个数字相加，如' let i = 1 + 2 '，逻辑和运算符(' && ')结合两个布尔值，如' if enteredDoorCode && passsedretinascan '。",-1),b=s("code",null,"==",-1),g=s("code",null,"+",-1),h=s("code",null,"-",-1),f=s("code",null,"*",-1),w=s("code",null,"/",-1),q=s("code",null,"%",-1),_={href:"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,[n("Swift还提供了C中找不到的范围运算符，例如"),s("code",null,"a..<b"),n("和"),s("code",null,"a...b"),n("，作为表达一系列值的快捷方式。")],-1),y=e(`<h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><p>运算符是一元、二进制或三元：</p><ul><li><em>一元</em>运算符对单个目标（如<code>-a</code>）进行操作。元<em>前缀</em>运算符出现在目标之前（例如<code>!b</code>），一元<em>后缀</em>运算符立即出现在目标后面（例如<code>c!</code>）。</li><li><em>Binary</em> operators operate on two targets (such as <code>2 + 3</code>) and are <em>infix</em> because they appear in between their two targets.</li><li><em>Ternary</em> operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (<code>a ? b : c</code>).</li></ul><p>操作符影响的值是<em>操作数</em>。在表达式 <code>1 + 2</code> 中，<code>+</code> 符号是一个中缀操作符，它的两个操作数是值 <code>1</code> 和 <code>2</code> 。</p><h2 id="分配操作员" tabindex="-1"><a class="header-anchor" href="#分配操作员" aria-hidden="true">#</a> 分配操作员</h2><p>赋值操作符 ( <code>a = b</code> )用 <code>b</code> 的值初始化或更新 <code>a</code> 的值:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span>
a <span class="token operator">=</span> b
<span class="token comment">// a is now equal to 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果赋值的右侧是一个具有多个值的元组，则其元素可以同时分解为多个常量或变量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">// x is equal to 1, and y is equal to 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与C和Objective-C中的赋值运算符不同，Swift中的赋值运算符本身不会返回值。以下陈述无效：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> x <span class="token operator">=</span> y <span class="token punctuation">{</span>
   <span class="token comment">// This isn&#39;t valid, because x = y doesn&#39;t return a value.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性可以防止在实际使用等于操作符( <code>==</code> )时意外使用赋值操作符( <code>=</code> )。通过使 <code>if x = y</code> 无效，Swift可以帮助你在代码中避免这类错误。</p><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>Swift支持所有数字类型的四个标准<em>算术运算符</em>：</p><ul><li>添加（<code>+</code>）</li><li>减法（<code>-</code>）</li><li>乘法（<code>*</code>）</li><li>司（<code>/</code>）</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>       <span class="token comment">// equals 3</span>
<span class="token number">5</span> <span class="token operator">-</span> <span class="token number">3</span>       <span class="token comment">// equals 2</span>
<span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span>       <span class="token comment">// equals 6</span>
<span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">2.5</span>  <span class="token comment">// equals 4.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),S=s("code",null,"a &+ b",-1),C={href:"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37",target:"_blank",rel:"noopener noreferrer"},D=e(`<p><code>String</code>串联也支持加法运算符：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token string-literal"><span class="token string">&quot;hello, &quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span>  <span class="token comment">// equals &quot;hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="剩余运算符" tabindex="-1"><a class="header-anchor" href="#剩余运算符" aria-hidden="true">#</a> 剩余运算符</h3><p><em>remainder操作符</em> ( <code>a % b</code> )计算出 <code>b</code> 的多少倍将适合于 <code>a</code> 并返回剩余的值(称为<em>remainder</em>)。</p><blockquote><p>注意</p><p>其余运算符（<code>%</code>）在其他语言中也被称为<em>模运算符</em>。然而，它在Swift中对负数的行为意味着，严格来说，它是一个剩余的操作，而不是一个模块化操作。</p></blockquote><p>以下是剩余运算符的工作原理。要计算<code>%</code>，您首先计算出<code>9</code>个<code>4</code>个内部有多少个：</p><p><img src="`+r+`" alt="../_images/remainderInteger_2x.png"></p><p>您可以在9个内部安装两个<code>4</code>s，其余为<code>1</code>（以橙色显示）。</p><p>在Swift中，这将写为：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token comment">// equals 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了确定<code>%b</code>的答案，<code>%</code>运算符计算以下方程，并将<code>remainder</code>作为其输出返回：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>a <span class="token operator">=</span> <span class="token punctuation">(</span>b x <span class="token keyword">some</span> multiplier<span class="token punctuation">)</span> <span class="token operator">+</span> remainder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中<code>somemultiplier</code>是适合<code>a</code>内部的<code>b</code>的最大倍数。</p><p>将<code>9</code>和<code>4</code>插入此方程会产生：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token number">9</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span> x <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在计算负值的余数时，也应用了相同的方法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">4</span>   <span class="token comment">// equals -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在方程中插入<code>-9</code>和<code>4</code>会产生：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token operator">-</span><span class="token number">9</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span> x <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给出剩余值<code>-1</code>。</p><p>当 <code>b</code> 值为负值时， <code>b</code> 的符号将被忽略。这意味着 <code>a % b</code> 和 <code>a % -b</code> 总是给出相同的答案。</p><h3 id="一元减号运算符" tabindex="-1"><a class="header-anchor" href="#一元减号运算符" aria-hidden="true">#</a> 一元减号运算符</h3><p>数字值的符号可以使用前缀<code>-</code>（称为<em>一元减号运算符</em>）切换：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> three <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> minusThree <span class="token operator">=</span> <span class="token operator">-</span>three       <span class="token comment">// minusThree equals -3</span>
<span class="token keyword">let</span> plusThree <span class="token operator">=</span> <span class="token operator">-</span>minusThree   <span class="token comment">// plusThree equals 3, or &quot;minus minus three&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一元减算符（<code>-</code>）直接放在它操作的值之前，没有任何空格。</p><h3 id="unary-plus运算符" tabindex="-1"><a class="header-anchor" href="#unary-plus运算符" aria-hidden="true">#</a> Unary Plus运算符</h3><p><em>一元加运算符</em>（<code>+</code>）只需返回其操作的值，无需任何更改：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> minusSix <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span>
<span class="token keyword">let</span> alsoMinusSix <span class="token operator">=</span> <span class="token operator">+</span>minusSix  <span class="token comment">// alsoMinusSix equals -6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然一元加运算符实际上什么都没做，但当使用一元减运算符进行负数时，您可以使用它来在代码中为正数提供对称性。</p><h2 id="复合分配运算符" tabindex="-1"><a class="header-anchor" href="#复合分配运算符" aria-hidden="true">#</a> 复合分配运算符</h2><p>与C一样，Swift提供了将赋值（=）与另一个操作相结合的<em>复合赋值运算符</em>。一个例子是<em>加法赋值运算符</em>（<code>+=</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
a <span class="token operator">+=</span> <span class="token number">2</span>
<span class="token comment">// a is now equal to 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式 <code>a += 2</code> 是 <code>a = a + 2</code> 的缩写。实际上，加法和赋值被合并到一个操作符中，同时执行这两个任务。</p><blockquote><p>注意</p><p>复合赋值操作符不返回值。例如，你不能写<code>let b = a += 2</code>。</p></blockquote>`,34),N={href:"https://developer.apple.com/documentation/swift/operator_declarations",target:"_blank",rel:"noopener noreferrer"},E=e('<h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>Swift 支持以下比较运算符：</p><ul><li>Equal to (<code>a == b</code>)</li><li>Not equal to (<code>a != b</code>)</li><li>Greater than (<code>a &gt; b</code>)</li><li>Less than (<code>a &lt; b</code>)</li><li>Greater than or equal to (<code>a &gt;= b</code>)</li><li>Less than or equal to (<code>a &lt;= b</code>)</li></ul>',3),I=s("p",null,"注意",-1),O=s("em",null,"身份运算符",-1),A=s("code",null,"===",-1),P=s("code",null,"!==",-1),B={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID90",target:"_blank",rel:"noopener noreferrer"},H=e(`<p>每个比较运算符都返回一个<code>Bool</code>值，以指示语句是否为真：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>   <span class="token comment">// true because 1 is equal to 1</span>
<span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span>   <span class="token comment">// true because 2 isn&#39;t equal to 1</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span>    <span class="token comment">// true because 2 is greater than 1</span>
<span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span>    <span class="token comment">// true because 1 is less than 2</span>
<span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">1</span>   <span class="token comment">// true because 1 is greater than or equal to 1</span>
<span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">1</span>   <span class="token comment">// false because 2 isn&#39;t less than or equal to 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较运算符通常用于条件语句，例如<code>if</code>语句：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span>
<span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;world&quot;</span></span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m sorry </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, but I don&#39;t recognize you&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;hello, world&quot;, because name is indeed equal to &quot;world&quot;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=s("code",null,"if",-1),T={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html",target:"_blank",rel:"noopener noreferrer"},R=e(`<p>如果两个元组具有相同的类型和相同数量的值，您可以比较它们。元组从左到右比较，一次一个值，直到比较发现两个不相等的值。对这两个值进行了比较，比较的结果决定了元组比较的总体结果。如果所有元素都是相等的，那么元组本身就是相等的。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;zebra&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;apple&quot;</span></span><span class="token punctuation">)</span>   <span class="token comment">// true because 1 is less than 2; &quot;zebra&quot; and &quot;apple&quot; aren&#39;t compared</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;apple&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;bird&quot;</span></span><span class="token punctuation">)</span>    <span class="token comment">// true because 3 is equal to 3, and &quot;apple&quot; is less than &quot;bird&quot;</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;dog&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;dog&quot;</span></span><span class="token punctuation">)</span>      <span class="token comment">// true because 4 is equal to 4, and &quot;dog&quot; is equal to &quot;dog&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，您可以在第一行看到从左到右的比较行为。因为<code>1</code>小于2<code>(1,&quot;zebra&quot;)</code>被认为是小于<code>(2,&quot;apple&quot;)</code>，无论元组中的任何其他值如何。<code>&quot;zebra&quot;</code>不亚于<code>&quot;apple&quot;</code>并不重要，因为比较已经由元组的第一个元素决定了。然而，当元组的第一个元素相同时，它们的第二个元素<em>会</em>进行比较——这就是第二行和第三行发生的事情。</p><p>只有当运算符可以应用于各自元组中的每个值时，元组才能与给定运算符进行比较。例如，如下代码所示，您可以比较两个类型的元组<code>(String,Int)</code>因为可以使用<code>&lt;</code>运算符比较<code>String</code>和<code>Int</code>值。相比之下，两个类型的元组<code>(String,Bool)</code>无法与<code>&lt;</code>运算符进行比较，因为<code>&lt;</code>运算符不能应用于<code>Bool</code>值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;purple&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// OK, evaluates to true</span>
<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;purple&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// Error because &lt; can&#39;t compare Boolean values</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>Swift标准库包括少于七个元素的元组的元组比较运算符。要将元组与七个或更多元素进行比较，您必须自己实现比较运算符。</p></blockquote><h2 id="三元条件运算符" tabindex="-1"><a class="header-anchor" href="#三元条件运算符" aria-hidden="true">#</a> 三元条件运算符</h2><p><em>三元条件算子</em>是一个有三个部分的特殊算子，它接受形式<code>question?answer1:answer2</code>。这是根据<code>question</code>是真还是假来评估两个表达式之一的快捷方式。如果<code>question</code>属实，它会评估<code>answer1</code>并返回其值；否则，它会评估<code>answer2</code>并返回其值。</p><p>三元条件运算符是以下代码的缩写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> question <span class="token punctuation">{</span>
   answer1
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   answer2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个例子，它计算了表格行的高度。如果行有标题，行高应比内容高度高50分，如果行没有标头，则高20分：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> contentHeight <span class="token operator">=</span> <span class="token number">40</span>
<span class="token keyword">let</span> hasHeader <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> rowHeight <span class="token operator">=</span> contentHeight <span class="token operator">+</span> <span class="token punctuation">(</span>hasHeader <span class="token operator">?</span> <span class="token number">50</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token comment">// rowHeight is equal to 90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例是以下代码的简写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> contentHeight <span class="token operator">=</span> <span class="token number">40</span>
<span class="token keyword">let</span> hasHeader <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> rowHeight<span class="token punctuation">:</span> <span class="token class-name">Int</span>
<span class="token keyword">if</span> hasHeader <span class="token punctuation">{</span>
   rowHeight <span class="token operator">=</span> contentHeight <span class="token operator">+</span> <span class="token number">50</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   rowHeight <span class="token operator">=</span> contentHeight <span class="token operator">+</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
<span class="token comment">// rowHeight is equal to 90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个示例对三元条件运算符的使用意味着<code>rowHeight</code>可以在一行代码上设置为正确的值，这比第二个示例中使用的代码更简洁。</p><p>三元条件算子为决定考虑两个表达式中的哪一个提供了一个高效的简写。然而，请小心使用三元条件操作员。如果过度使用，它的简洁性可能会导致难以阅读的代码。避免将三元条件运算符的多个实例组合成一个复合语句。</p><h2 id="nil-合并运算符" tabindex="-1"><a class="header-anchor" href="#nil-合并运算符" aria-hidden="true">#</a> nil 合并运算符</h2><p><em>零共同化操作员</em>（<code>a??b</code>) 如果可选<code>a</code>包含一个值，则解开它，如果<code>a</code>为<code>nil</code>则返回默认值<code>b</code>。表达式<code>a</code>总是可选类型。表达式<code>b</code>必须与存储在<code>a</code>中的类型匹配。</p><p>零共同算符是以下代码的缩写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>a <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token operator">?</span> a<span class="token operator">!</span> <span class="token punctuation">:</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的代码使用三元条件运算符和强制展开（<code>a!</code>）当<code>a</code>不是<code>nil</code>，访问包裹在<code>a</code>中的值，否则返回<code>b</code>。零凝聚运算符提供了一种更优雅的方式，以简洁易读的形式封装这种有条件的检查和展开包装。</p><blockquote><p>注意</p><p>如果<code>a</code>的值非<code>nil</code>，则不计算<code>b</code>的值。这被称为<em>短路评估</em>。</p></blockquote><p>以下示例使用零共同化运算符在默认颜色名称和可选用户定义的颜色名称之间进行选择：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> defaultColorName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;red&quot;</span></span>
<span class="token keyword">var</span> userDefinedColorName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>   <span class="token comment">// defaults to nil</span>

<span class="token keyword">var</span> colorNameToUse <span class="token operator">=</span> userDefinedColorName <span class="token operator">??</span> defaultColorName
<span class="token comment">// userDefinedColorName is nil, so colorNameToUse is set to the default of &quot;red&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>userDefinedColorName</code>变量定义为可选<code>String</code>，默认值为<code>nil</code>。由于<code>userDefinedColorName</code>是可选类型，因此您可以使用零强制运算符来考虑其值。在上面的示例中，运算符用于确定名为<code>colorNameToUse</code>的<code>String</code>变量的初始值。因为<code>userDefinedColorName</code>，所以表达式<code>userDefinedColorName??defaultColorName</code>返回<code>defaultColorName</code>或<code>&quot;red&quot;</code>的值。</p><p>如果您将非<code>nil</code>值分配给<code>userDefinedColorName</code>，并再次执行零共同计算符检查，则使用<code>userDefinedColorName</code>中包装的值，而不是默认值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>userDefinedColorName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;green&quot;</span></span>
colorNameToUse <span class="token operator">=</span> userDefinedColorName <span class="token operator">??</span> defaultColorName
<span class="token comment">// userDefinedColorName isn&#39;t nil, so colorNameToUse is set to &quot;green&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="范围操作员" tabindex="-1"><a class="header-anchor" href="#范围操作员" aria-hidden="true">#</a> 范围操作员</h2><p>Swift包括几个<em>范围运算符</em>，它们是表达一系列值的快捷方式。</p><h3 id="封闭式距离操作员" tabindex="-1"><a class="header-anchor" href="#封闭式距离操作员" aria-hidden="true">#</a> 封闭式距离操作员</h3><p><em>闭范围运算符</em>（<code>a...b</code>）定义了一个从<code>a</code>到<code>b</code>的范围，包括值<code>a</code>和<code>b</code>。<code>a</code>的值不得大于<code>b</code>。</p><p>在您想要使用所有值的范围上迭代时，闭合范围运算符非常有用，例如<code>for</code>-<code>in</code>循环：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times 5 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index <span class="token operator">*</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1 times 5 is 5</span>
<span class="token comment">// 2 times 5 is 10</span>
<span class="token comment">// 3 times 5 is 15</span>
<span class="token comment">// 4 times 5 is 20</span>
<span class="token comment">// 5 times 5 is 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),G=s("code",null,"for",-1),K=s("code",null,"in",-1),W=e(`<h3 id="半开放式范围操作员" tabindex="-1"><a class="header-anchor" href="#半开放式范围操作员" aria-hidden="true">#</a> 半开放式范围操作员</h3><p><em>半开范围运算符</em>（<code>a..&lt;b</code>）定义了一个从<code>a</code>到<code>b</code>运行的范围，但不包括<code>b</code>。据说它是<em>半开放的</em>，因为它包含它的第一个值，但不包含它的最终值。与闭区间运算符一样，<code>a</code>的值不得大于<code>b</code>。如果<code>a</code>的值等于<code>b</code>，那么结果范围将是空的。</p><p>当您使用基于零的列表（如数组）时，半开放范围特别有用，其中最多（但不包括）列表的长度非常有用：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Brian&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Jack&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> names<span class="token punctuation">.</span>count
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>count <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Person </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i <span class="token operator">+</span> <span class="token number">1</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is called </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">names<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Person 1 is called Anna</span>
<span class="token comment">// Person 2 is called Alex</span>
<span class="token comment">// Person 3 is called Brian</span>
<span class="token comment">// Person 4 is called Jack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),U=s("code",null,"0..<count",-1),z=s("code",null,"3",-1),V={href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID107",target:"_blank",rel:"noopener noreferrer"},J=e(`<h3 id="单面范围" tabindex="-1"><a class="header-anchor" href="#单面范围" aria-hidden="true">#</a> 单面范围</h3><p>闭区间运算符对尽可能在一个方向上继续的范围有另一种形式——例如，范围包括从索引2到数组末尾的数组的所有元素。在这些情况下，您可以省略范围运算符一侧的值。这种范围被称为<em>单边范围</em>，因为运算符只在一边有一个值。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Brian</span>
<span class="token comment">// Jack</span>

<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Anna</span>
<span class="token comment">// Alex</span>
<span class="token comment">// Brian</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>半开范围运算符还有一个单边形式，仅用其最终值书写。就像您在两侧都包含一个值一样，最终值不是范围的一部分。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">[</span><span class="token operator">..&lt;</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Anna</span>
<span class="token comment">// Alex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单边范围可用于其他上下文，而不仅仅是下标。您无法迭代省略第一个值的单边范围，因为不清楚迭代应该从哪里开始。<em>您可以</em>迭代省略其最终值的单边范围；但是，由于范围无限期地持续，请确保为循环添加显式结束条件。您还可以检查单边范围是否包含特定值，如下代码所示。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token operator">...</span><span class="token number">5</span>
range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>   <span class="token comment">// false</span>
range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// true</span>
range<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p><em>逻辑运算符</em>修改或组合布尔逻辑值<code>true</code>和<code>false</code>。Swift支持在基于C的语言中找到的三个标准逻辑运算符：</p><ul><li>逻辑不是（<code>!a</code>）</li><li>逻辑和（<code>a&amp;&amp;b</code>）</li><li>Logical OR (<code>a || b</code>)</li></ul><h3 id="逻辑非运算符" tabindex="-1"><a class="header-anchor" href="#逻辑非运算符" aria-hidden="true">#</a> 逻辑非运算符</h3><p><em>逻辑非运算符</em>（<code>!a</code>）反转布尔值，使<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>。</p><p>逻辑NOt运算符是一个前缀运算符，并显示在其操作的值之前，没有任何空格。它可以读作“不是<code>a</code>”，如以下示例所示：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> allowedEntry <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">if</span> <span class="token operator">!</span>allowedEntry <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ACCESS DENIED&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;ACCESS DENIED&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>短语<code>if!allowedEntry</code>可以读作“如果不允许进入”。只有当“不允许输入”为true时，才会执行后续行；也就是说，如果<code>allowedEntry</code>为<code>false</code>。</p><p>与本示例一样，仔细选择布尔常量和变量名称有助于保持代码的可读性和简洁性，同时避免双重否定或混淆逻辑语句。</p><h3 id="逻辑和运算符" tabindex="-1"><a class="header-anchor" href="#逻辑和运算符" aria-hidden="true">#</a> 逻辑和运算符(&amp;&amp;)</h3><p><em>逻辑和运算符</em>（<code>a&amp;&amp;b</code>）创建逻辑表达式，其中两个值都必须<code>true</code>，整体表达式也为<code>true</code>。</p><p>如果任一值为<code>false</code>，则整体表达式也为<code>false</code>。事实上，如果<em>第一个</em>值是<code>false</code>的，第二个值甚至不会被计算，因为它不可能使整个表达式等同于<code>true</code>。这被称为<em>短路评估</em>。</p><p>此示例考虑两个<code>Bool</code>值，并且仅当两个值都为<code>true</code>时才允许访问：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> enteredDoorCode <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> passedRetinaScan <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">if</span> enteredDoorCode <span class="token operator">&amp;&amp;</span> passedRetinaScan <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ACCESS DENIED&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;ACCESS DENIED&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑or运算符" tabindex="-1"><a class="header-anchor" href="#逻辑or运算符" aria-hidden="true">#</a> 逻辑OR运算符(||)</h3><p>逻辑OR操作符 ( <code>a || b</code> )是由两个相邻管道字符组成的中缀操作符。你可以用它来创建逻辑表达式，其中只有两个值中的一个必须为“true”，才能使整个表达式为“true”。</p><p>与上面的逻辑和运算符一样，逻辑OR运算符使用短路求值来考虑其表达式。如果逻辑OR表达式的左侧为<code>true</code>，则不会计算右侧，因为它无法改变整体表达式的结果。</p><p>在下面的示例中，第一个<code>Bool</code>值（<code>hasDoorKey</code>）为<code>false</code>，但第二个值（<code>knowsOverridePassword</code>）为<code>true</code>。因为一个值为<code>true</code>，因此整体表达式也计算为<code>true</code>，并且允许访问：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> hasDoorKey <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">let</span> knowsOverridePassword <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> hasDoorKey <span class="token operator">||</span> knowsOverridePassword <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ACCESS DENIED&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Welcome!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合逻辑运算符" tabindex="-1"><a class="header-anchor" href="#组合逻辑运算符" aria-hidden="true">#</a> 组合逻辑运算符</h3><p>您可以组合多个逻辑运算符来创建更长的复合表达式：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> enteredDoorCode <span class="token operator">&amp;&amp;</span> passedRetinaScan <span class="token operator">||</span> hasDoorKey <span class="token operator">||</span> knowsOverridePassword <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ACCESS DENIED&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Welcome!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例使用多个<code>&amp;&amp;</code>和<code>||</code>运算符来创建更长的复合表达式。然而，<code>&amp;&amp;</code>和<code>||</code>运算符仍然只在两个值上运行，因此这实际上是三个较小的表达式链在一起。该示例可以理解为：</p><p>如果我们输入了正确的门密码并通过了视网膜扫描，或者我们有有效的门钥匙，或者我们知道紧急覆盖密码，那么允许访问。</p><p>根据 <code>enteredDoorCode</code> ， <code>passedRetinaScan</code> 和 <code>hasDoorKey</code> 的值，前两个子表达式为 <code>false</code> 。但是，紧急重写密码是已知的，因此整个复合表达式的计算结果仍然为“true”。</p><blockquote><p>注意</p><p>Swift逻辑运算符<code>&amp;&amp;</code>和<code>||</code>是左关联，这意味着具有多个逻辑运算符的复合表达式首先计算最左边的子表达式。</p></blockquote><h3 id="显式括号" tabindex="-1"><a class="header-anchor" href="#显式括号" aria-hidden="true">#</a> 显式括号</h3><p>有时，在不严格需要括号时包含括号是有用的，以使复杂表达式的意图更容易阅读。在上面的门访问示例中，在复合表达式的第一部分周围添加括号以明确其意图是有用的：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>enteredDoorCode <span class="token operator">&amp;&amp;</span> passedRetinaScan<span class="token punctuation">)</span> <span class="token operator">||</span> hasDoorKey <span class="token operator">||</span> knowsOverridePassword <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ACCESS DENIED&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Welcome!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>括号清楚地表明，前两个值被视为整体逻辑中单独可能状态的一部分。复合表达式的输出不会改变，但整体意图对读者来说更清楚。可读性总是比简洁更受欢迎；使用括号，它们有助于明确你的意图。</p>`,37);function j(M,F){const o=p("ExternalLinkIcon"),t=p("RouterLink");return i(),d("div",null,[k,m,v,s("p",null,[n("Swift支持您可能已经从C等语言中知道的运算符，并改进了几种功能来消除常见的编码错误。赋值运算符（=）不返回值，以防止在等于运算符（"),b,n("时被错误使用。算术运算符（"),g,n("、"),h,n("、"),f,n("、"),w,n("、"),q,n("等）检测并禁止值溢出，以避免在处理大于或小于存储它们的类型允许值范围的数字时出现意外结果。您可以选择使用Swift的溢出运算符来评估溢出行为，如"),s("a",_,[n("溢出运算符"),a(o)]),n("中所述。")]),x,s("p",null,[n("本章介绍了Swift中的常见运算符。"),a(t,{to:"/pages/b5a382/"},{default:c(()=>[n("高级运算符")]),_:1}),n("涵盖了Swift的高级运算符，并描述了如何定义自己的自定义运算符，并实现您自己的自定义类型的标准运算符。")]),y,s("p",null,[n("与C和Objective-C中的算术操作符不同，Swift的算术操作符默认情况下不允许值溢出。你可以通过使用Swift的溢出操作符(例如 "),S,n(" )来选择值溢出行为。See "),s("a",C,[n("Overflow Operators"),a(o)]),n(".")]),D,s("p",null,[n("有关Swift标准库提供的运算符的信息，请参阅"),s("a",N,[n("运算符声明"),a(o)]),n("。")]),E,s("blockquote",null,[I,s("p",null,[n("Swift还提供了两个"),O,n("（"),A,n("和"),P,n("，用于测试两个对象引用是否都引用同一个对象实例。有关更多信息，请参阅"),s("a",B,[n("身份运营商"),a(o)]),n("。")])]),H,s("p",null,[n("有关"),L,n("语句的更多信息，请参阅"),s("a",T,[n("控制流"),a(o)]),n("。")]),R,s("p",null,[n("有关"),G,n("-"),K,n("循环的更多信息，请参阅"),a(t,{to:"/pages/24ff35/"},{default:c(()=>[n("控制流")]),_:1}),n("。")]),W,s("p",null,[n("请注意，数组包含四个项目，但"),U,n("仅计入"),z,n("（数组中最后一个项目的索引），因为它是一个半开放的范围。有关数组的更多信息，请参阅"),s("a",V,[n("数组"),a(o)]),n("。")]),J])}const X=l(u,[["render",j],["__file","11.swift-basic-operators.html.vue"]]);export{X as default};
