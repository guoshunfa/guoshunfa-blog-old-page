import{_ as n,r as d,o as c,c as r,a as o,b as e,d as t,e as l}from"./app.4659d0e0.js";const a={},s=o("h1",{id:"swift基础-自动参考计数",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#swift基础-自动参考计数","aria-hidden":"true"},"#"),e(" Swift基础 - 自动参考计数")],-1),p=o("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html",-1),u=o("p",null,[e("Swift 使用"),o("em",null,"自动参考计数"),e(" (ARC) 来跟踪和管理 app 的内存使用情况。在大多数情况下，这意味着内存管理在Swift中“有效”，您无需自己考虑内存管理。当不再需要类实例时，ARC会自动释放类实例使用的内存。")],-1),m={href:"https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html",target:"_blank",rel:"noopener noreferrer"},h=l('<p>引用计数仅适用于类实例。结构和枚举是值类型，而不是引用类型，不会通过引用存储和传递。</p><h2 id="arc的工作原理" tabindex="-1"><a class="header-anchor" href="#arc的工作原理" aria-hidden="true">#</a> ARC的工作原理</h2><p>每次您创建类的新实例时，ARC都会分配一大块内存来存储有关该实例的信息。此内存包含有关实例类型的信息，以及与该实例关联的任何存储属性的值。</p><p>此外，当不再需要实例时，ARC会释放该实例使用的内存，以便将内存用于其他目的。这确保了类实例在不再需要时不会占用内存空间。</p><p>但是，如果ARC要处理仍在使用的实例，将无法再访问该实例的属性或调用该实例的方法。事实上，如果您尝试访问该实例，您的应用程序很可能会崩溃。</p><p>为了确保实例在仍然需要时不会消失，ARC跟踪当前引用每个类实例的属性、常量和变量数量。只要至少存在对实例的至少一个活动引用，ARC就不会处理该实例。</p><p>为了做到这一点，每当您将类实例分配给属性、常量或变量时，该属性、常量或变量都会<em>强烈引用</em>该实例。该引用被称为“强”引用，因为它牢牢抓住该实例，只要该强引用仍然存在，就不允许将其交易。</p><h2 id="arc在行动" tabindex="-1"><a class="header-anchor" href="#arc在行动" aria-hidden="true">#</a> ARC在行动</h2><p>以下是自动引用计数工作原理的示例。此示例从一个名为<code>Person</code>的简单类开始，该类定义了一个名为<code>name</code>的存储常量属性：</p><ol><li>class Person {</li><li>​ let name: String</li><li>​ init(name: String) {</li><li>​ self.name = name</li><li>​ print(&quot;(name) is being initialized&quot;)</li><li>​ }</li><li>​ deinit {</li><li>​ print(&quot;(name) is being deinitialized&quot;)</li><li>​ }</li><li>}</li></ol><p><code>Person</code>类有一个初始化器，可以设置实例的<code>name</code>属性，并打印一条消息来指示初始化正在进行中。<code>Person</code>类还有一个去初始化器，当类的实例被释放时，它会打印消息。</p><p>下一个代码片段定义了类型为<code>Person?</code>的三个变量，用于在后续代码片段中设置对新<code>Person</code>实例的多个引用。由于这些变量是可选类型（<code>Person?</code>，而不是<code>Person</code>），它们会自动初始化，值为<code>nil</code>，目前不引用<code>Person</code>实例。</p><ol><li>var reference1: Person?</li><li>var reference2: Person?</li><li>var reference3: Person?</li></ol><p>您现在可以创建一个新的<code>Person</code>实例，并将其分配给以下三个变量之一：</p><ol><li>reference1 = Person(name: &quot;John Appleseed&quot;)</li><li>// Prints &quot;John Appleseed is being initialized&quot;</li></ol><p>Note that the message <code>&quot;John Appleseed is being initialized&quot;</code> is printed at the point that you call the <code>Person</code> class’s initializer. This confirms that initialization has taken place.</p><p>由于新的<code>Person</code>实例已分配给<code>reference1</code>变量，因此现在<code>reference1</code>对新<code>Person</code>实例有强烈引用。由于至少有一个强有力的参考，ARC确保这个人被保存在记忆中，并且没有被释放。</p><p>如果您将同一<code>Person</code>实例分配给另外两个变量，则会建立对该实例的两个更强引用：</p><ol><li>reference2 = reference1</li><li>reference3 = reference1</li></ol><p>现在<em>有三个</em>强烈的引用这个单一<code>Person</code>实例。</p><p>如果您通过将<code>nil</code>配给其中两个变量来破坏其中两个强引用（包括原始引用），则将保留一个强引用，并且<code>Person</code>实例未被释放：</p><ol><li>reference1 = nil</li><li>reference2 = nil</li></ol><p>在第三个也是最后一个强引用被破坏之前，ARC不会处理<code>Person</code>实例，此时很明显您不再使用<code>Person</code>实例：</p><ol><li>reference3 = nil</li><li>// Prints &quot;John Appleseed is being deinitialized&quot;</li></ol><h2 id="类实例之间的较强参考周期" tabindex="-1"><a class="header-anchor" href="#类实例之间的较强参考周期" aria-hidden="true">#</a> 类实例之间的较强参考周期</h2><p>在上面的示例中，ARC能够跟踪您创建的新<code>Person</code>实例的引用数量，并在不再需要时处理该<code>Person</code>实例。</p><p>然而，可以编写类实例<em>永远不会</em>达到零强引用的代码。如果两个类实例彼此保持强烈引用，这样每个实例都会保持另一个实例的活力，则会发生这种情况。这被称为<em>强参考周期</em>。</p>',27),f={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID52",target:"_blank",rel:"noopener noreferrer"},g=l('<p>Here’s an example of how a strong reference cycle can be created by accident. This example defines two classes called <code>Person</code> and <code>Apartment</code>, which model a block of apartments and its residents:</p><ol><li>class Person {</li><li>​ let name: String</li><li>​ init(name: String) { self.name = name }</li><li>​ var apartment: Apartment?</li><li>​ deinit { print(&quot;(name) is being deinitialized&quot;) }</li><li>}</li><li></li><li>class Apartment {</li><li>​ let unit: String</li><li>​ init(unit: String) { self.unit = unit }</li><li>​ var tenant: Person?</li><li>​ deinit { print(&quot;Apartment (unit) is being deinitialized&quot;) }</li><li>}</li></ol><p>每个<code>Person</code>实例都有一个<code>String</code>类型的<code>name</code>属性和一个最初为<code>nil</code>可选<code>apartment</code>属性。<code>apartment</code>物业是可选的，因为一个人可能并不总是有公寓。</p><p>同样，每个<code>Apartment</code>实例都有一个<code>String</code>类型的<code>unit</code>属性，并且有一个最初为<code>nil</code>的可选<code>tenant</code>属性。租户物业是可选的，因为公寓可能并不总是有租户。</p><p>这两个类还定义了一个去初始化器，该初始化器打印了该类的实例正在被非初始化的事实。这使您能够查看<code>Person</code>和<code>Apartment</code>的实例是否按预期进行处理。</p><p>下一个代码片段定义了两个可选类型的变量，称为<code>john</code>和<code>unit4A</code>，这些变量将设置为下面的特定<code>Apartment</code>和<code>Person</code>实例。由于是可选的，这两个变量的初始值为<code>nil</code>：</p><ol><li>var john: Person?</li><li>var unit4A: Apartment?</li></ol><p>您现在可以创建特定的<code>Person</code>实例和<code>Apartment</code>实例，并将这些新实例分配给<code>john</code>和<code>unit4A</code>变量：</p><ol><li>john = Person(name: &quot;John Appleseed&quot;)</li><li>unit4A = Apartment(unit: &quot;4A&quot;)</li></ol><p>以下是创建和分配这两个实例后强引用的外观。<code>john</code>变量现在强烈引用新的<code>Person</code>实例，<code>unit4A</code>变量强烈引用新的<code>Apartment</code>实例：</p><p><img src="https://docs.swift.org/swift-book/_images/referenceCycle01_2x.png" alt="../_images/referenceCycle01_2x.png"></p><p>您现在可以将这两个实例链接在一起，以便该人拥有公寓，而公寓则拥有租户。请注意，感叹号 (<code>!</code>)用于解开和访问存储在<code>john</code>和<code>unit4A</code>可选变量中的实例，以便可以设置这些实例的属性：</p><ol><li>john!.apartment = unit4A</li><li>unit4A!.tenant = john</li></ol><p>以下是将两个实例链接在一起后强引用的外观：</p><p><img src="https://docs.swift.org/swift-book/_images/referenceCycle02_2x.png" alt="../_images/referenceCycle02_2x.png"></p><p>不幸的是，将这两个实例联系起来会在它们之间产生强大的参考周期。<code>Person</code>实例现在强烈引用<code>Apartment</code>实例，<code>Apartment</code>实例强烈引用<code>Person</code>实例。因此，当您打破<code>john</code>和<code>unit4A</code>变量持有的强引用时，引用计数不会降至零，并且实例也不会由ARC分配：</p><ol><li>john = nil</li><li>unit4A = nil</li></ol><p>请注意，当您将这两个变量设置为<code>nil</code>时，两者都不调用非初始化器。强大的参考周期可防止<code>Person</code>和<code>Apartment</code>实例被释放，导致应用程序内存泄漏。</p><p>以下是将<code>john</code>和<code>unit4A</code>变量设置为<code>nil</code>后强引用的外观：</p><p><img src="https://docs.swift.org/swift-book/_images/referenceCycle03_2x.png" alt="../_images/referenceCycle03_2x.png"></p><p><code>Person</code>实例和<code>Apartment</code>实例之间的强烈引用仍然存在，不能被打破。</p><h2 id="解决类实例之间的强引用周期" tabindex="-1"><a class="header-anchor" href="#解决类实例之间的强引用周期" aria-hidden="true">#</a> 解决类实例之间的强引用周期</h2><p>当您处理类类型的属性时，Swift提供了两种解决强引用周期的方法：弱引用和无名引用。</p><p>弱和无拥有引用使参考周期中的一个实例能够引用另一个实例，<em>而无需</em>强势控制它。然后，这些实例可以相互引用，而不会创建强大的参考周期。</p><p>当另一个实例的生命周期较短时，即当另一个实例可以首先进行交易时，请使用弱引用。在上面的<code>Apartment</code>示例中，公寓在其生命周期的某个阶段没有租户是合适的，因此在这种情况下，弱参考是打破参考周期的适当方式。相比之下，当另一个实例具有相同的生命周期或更长的生命周期时，请使用非拥有的引用。</p><h3 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用" aria-hidden="true">#</a> 弱引用</h3><p><em>弱引用</em>是一种引用，它不会强烈保留它所指的实例，因此不会阻止ARC处理引用的实例。此行为阻止引用成为强引用周期的一部分。您可以通过将<code>weak</code>关键字放在属性或变量声明之前来指示弱引用。</p><p>由于弱引用不能强力保留其引用的实例，因此当弱引用仍在引用时，该实例可能会被释放。因此，当它引用的实例被释放时，ARC会自动将弱引用设置为<code>nil</code>。而且，由于弱引用需要允许其值在运行时更改为<code>nil</code>，因此它们总是声明为可选类型的变量，而不是常量。</p><p>您可以像任何其他可选值一样，检查弱引用中是否存在值，并且您永远不会引用不再存在的无效实例。</p><p>注意</p><p>当ARC将弱引用设置为<code>nil</code>时，不会调用属性观察者。</p><p>下面的示例与上面的<code>Person</code>和<code>Apartment</code>示例相同，有一个重要的区别。这一次，<code>Apartment</code>类型的<code>tenant</code>物业被宣布为薄弱的参考：</p><ol><li>class Person {</li><li>​ let name: String</li><li>​ init(name: String) { self.name = name }</li><li>​ var apartment: Apartment?</li><li>​ deinit { print(&quot;(name) is being deinitialized&quot;) }</li><li>}</li><li></li><li>class Apartment {</li><li>​ let unit: String</li><li>​ init(unit: String) { self.unit = unit }</li><li>​ weak var tenant: Person?</li><li>​ deinit { print(&quot;Apartment (unit) is being deinitialized&quot;) }</li><li>}</li></ol><p>来自两个变量（<code>john</code>和<code>unit4A</code>）的强引用以及两个实例之间的联系与以前一样创建：</p><ol><li>var john: Person?</li><li>var unit4A: Apartment?</li><li></li><li>john = Person(name: &quot;John Appleseed&quot;)</li><li>unit4A = Apartment(unit: &quot;4A&quot;)</li><li></li><li>john!.apartment = unit4A</li><li>unit4A!.tenant = john</li></ol><p>现在您已将这两个实例链接在一起，参考资料的外观如下：</p><p><img src="https://docs.swift.org/swift-book/_images/weakReference01_2x.png" alt="../_images/weakReference01_2x.png"></p><p><code>Person</code>实例仍然对<code>Apartment</code>实例有很强的引用，但<code>Apartment</code>实例现在对<code>Person</code>实例的引用<em>很弱</em>。这意味着，当您通过将<code>john</code>变量设置为<code>nil</code>来破坏其持有的强引用时，对<code>Person</code>实例不再有更强引用：</p><ol><li>john = nil</li><li>// Prints &quot;John Appleseed is being deinitialized&quot;</li></ol><p>由于没有更强烈的引用<code>Person</code>实例，因此它被分配，<code>tenant</code>属性设置为<code>nil</code>：</p><p><img src="https://docs.swift.org/swift-book/_images/weakReference02_2x.png" alt="../_images/weakReference02_2x.png"></p><p>对<code>Apartment</code>实例的唯一强烈引用来自<code>unit4A</code>变量。如果您打破了<em>该</em>强引用，则不再有对<code>Apartment</code>实例的强引用：</p><ol><li>unit4A = nil</li><li>// Prints &quot;Apartment 4A is being deinitialized&quot;</li></ol><p>由于没有更强烈的<code>Apartment</code>实例，所以它也被分配了：</p><p><img src="https://docs.swift.org/swift-book/_images/weakReference03_2x.png" alt="../_images/weakReference03_2x.png"></p><p>注意</p><p>在使用垃圾收集的系统中，有时使用弱指针来实现简单的缓存机制，因为只有当内存压力触发垃圾收集时，才会释放没有强引用的对象。然而，对于ARC，值在删除其最后一个强引用后立即进行分配，这使得弱引用不适合此目的。</p><h3 id="未知参考资料" tabindex="-1"><a class="header-anchor" href="#未知参考资料" aria-hidden="true">#</a> 未知参考资料</h3><p>与弱引用一样，<em>无拥有引用</em>不会强烈保留其引用的实例。然而，与弱引用不同，当另一个实例具有相同或更长的生命周期时，会使用非拥有引用。您可以通过将非<code>unowned</code>关键字放在属性或变量声明之前来指示非所有引用。</p><p>与弱引用不同，无拥有引用应该始终具有值。因此，将值标记为非所有值并不使其成为可选的，ARC永远不会将无拥有引用的值设置为<code>nil</code>。</p><p>重要</p><p>仅当您确定引用<em>总是</em>引用未被释放的实例时，才使用非拥有的引用。</p><p>如果您在实例被释放后尝试访问该实例的值，您将收到一个运行时错误。</p><p>以下示例定义了两个类别，<code>Customer</code>和<code>CreditCard</code>，它们为银行客户建模，并为该客户建模可能的信用卡。这两个类都存储另一个类的实例作为属性。这种关系有可能创造一个强大的参考周期。</p><p><code>Customer</code>和<code>CreditCard</code>之间的关系与上面薄弱的参考示例中看到的<code>Apartment</code>和<code>Person</code>之间的关系略有不同。在这种数据模型中，客户可能有也可能没有信用卡，但信用卡将<em>始终</em>与客户相关联。<code>CreditCard</code>实例永远不会比它所指<code>Customer</code>长寿。为了表示这一点，<code>Customer</code>类有一个可选的<code>card</code>属性，但<code>CreditCard</code>类有一个非拥有（和非可选）<code>customer</code>属性。</p><p>此外，新的<code>CreditCard</code>实例<em>只能</em>通过将<code>number</code>值和<code>customer</code>实例传递给自定义<code>CreditCard</code>初始化器来创建。这确保了在创建信用卡实例时，<code>CreditCard</code>实例始终有一个<code>customer</code>实例相关联。</p><p>由于信用卡总是有客户，因此您可以将其<code>customer</code>财产定义为非所有权参考，以避免强大的参考周期：</p><ol><li>class Customer {</li><li>​ let name: String</li><li>​ var card: CreditCard?</li><li>​ init(name: String) {</li><li>​ self.name = name</li><li>​ }</li><li>​ deinit { print(&quot;(name) is being deinitialized&quot;) }</li><li>}</li><li></li><li>class CreditCard {</li><li>​ let number: UInt64</li><li>​ unowned let customer: Customer</li><li>​ init(number: UInt64, customer: Customer) {</li><li>​ self.number = number</li><li>​ self.customer = customer</li><li>​ }</li><li>​ deinit { print(&quot;Card #(number) is being deinitialized&quot;) }</li><li>}</li></ol><p>注意</p><p><code>CreditCard</code>类<code>number</code>属性使用<code>UInt64</code>而不是<code>Int</code>来定义，以确保<code>number</code>属性的容量足够大，可以在32位和64位系统上存储16位卡号。</p><p>下一个代码片段定义了一个名为<code>john</code>可选<code>Customer</code>变量，该变量将用于存储对特定客户的引用。由于该变量是可选的，其初始值为零：</p><ol><li>var john: Customer?</li></ol><p>您现在可以创建一个<code>Customer</code>实例，并使用它来初始化和分配一个新的<code>CreditCard</code>实例作为该客户的<code>card</code>属性：</p><ol><li>john = Customer(name: &quot;John Appleseed&quot;)</li><li>john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)</li></ol><p>现在您已经链接了这两个实例，参考资料的外观如下：</p><p><img src="https://docs.swift.org/swift-book/_images/unownedReference01_2x.png" alt="../_images/unownedReference01_2x.png"></p><p><code>Customer</code>实例现在对<code>CreditCard</code>实例有强烈引用，<code>CreditCard</code>实例对<code>Customer</code>实例有非所有引用。</p><p>由于非拥有<code>customer</code>引用，当您破坏<code>john</code>变量持有的强引用时，对<code>Customer</code>实例没有更强的引用：</p><p><img src="https://docs.swift.org/swift-book/_images/unownedReference02_2x.png" alt="../_images/unownedReference02_2x.png"></p><p>由于没有对<code>Customer</code>实例的更强烈引用，因此它被交易了。发生这种情况后，没有对<code>CreditCard</code>实例的更强烈引用，它也被交易：</p><ol><li>john = nil</li><li>// Prints &quot;John Appleseed is being deinitialized&quot;</li><li>// Prints &quot;Card #1234567890123456 is being deinitialized&quot;</li></ol><p>上面的最终代码片段显示，<code>Customer</code>实例和<code>CreditCard</code>实例的去初始化器都在<code>john</code>变量设置为吨位后打印其“非初始化”消息。</p><p>注意</p><p>上面的示例展示了如何使用<em>安全的</em>非所有引用。Swift 还针对需要停用运行时安全检查（例如出于性能原因）的情形，提供了<em>不安全的</em>不拥有的参考。与所有不安全操作一样，您有责任检查该代码是否安全。</p><p>您通过写无<code>unowned(unsafe)</code>表示不安全的无名引用。如果您在引用的实例被释放后尝试访问不安全的无有引用，您的程序将尝试访问实例曾经所在的内存位置，这是一个不安全的操作。</p><h3 id="未拥有的可选参考资料" tabindex="-1"><a class="header-anchor" href="#未拥有的可选参考资料" aria-hidden="true">#</a> 未拥有的可选参考资料</h3><p>您可以将类的可选引用标记为非拥有。就ARC所有权模型而言，无主可选引用和弱引用都可以在同一上下文中使用。区别在于，当您使用非拥有的可选引用时，您有责任确保它始终引用有效对象或设置为<code>nil</code>。</p><p>以下是跟踪学校特定部门提供的课程的示例：</p><ol><li>class Department {</li><li>​ var name: String</li><li>​ var courses: [Course]</li><li>​ init(name: String) {</li><li>​ self.name = name</li><li>​ self.courses = []</li><li>​ }</li><li>}</li><li></li><li>class Course {</li><li>​ var name: String</li><li>​ unowned var department: Department</li><li>​ unowned var nextCourse: Course?</li><li>​ init(name: String, in department: Department) {</li><li>​ self.name = name</li><li>​ self.department = department</li><li>​ self.nextCourse = nil</li><li>​ }</li><li>}</li></ol><p><code>Department</code>对部门提供的每门课程都保持强有力的参考。在ARC所有权模式中，一个部门拥有自己的课程。<code>Course</code>有两个非自主参考资料，一个是系参考资料，另一个是学生应该参加的下一门课程；一门课程不拥有其中任何一个对象。每门课程都是某个部门的一部分，因此<code>department</code>属性不是可选的。然而，由于一些课程没有推荐的后续课程，<code>nextCourse</code>属性是可选的。</p><p>以下是使用这些类的示例：</p><ol><li>let department = Department(name: &quot;Horticulture&quot;)</li><li></li><li>let intro = Course(name: &quot;Survey of Plants&quot;, in: department)</li><li>let intermediate = Course(name: &quot;Growing Common Herbs&quot;, in: department)</li><li>let advanced = Course(name: &quot;Caring for Tropical Plants&quot;, in: department)</li><li></li><li>intro.nextCourse = intermediate</li><li>intermediate.nextCourse = advanced</li><li>department.courses = [intro, intermediate, advanced]</li></ol><p>上面的代码创建了一个部门及其三门课程。入门课程和中级课程都有一个建议的下一门课程存储在<code>nextCourse</code>属性中，该属性保留了学生在完成该课程后应该学习的课程的无选择参考。</p><p><img src="https://docs.swift.org/swift-book/_images/unownedOptionalReference_2x.png" alt="../_images/unownedOptionalReference_2x.png"></p><p>无人任用引用不会强烈保留其包装的类实例，因此不会阻止ARC对实例进行交易。它的行为与ARC下的无名引用相同，只是无拥有的可选引用可以benil。</p><p>Like non-optional unowned references, you’re responsible for ensuring that <code>nextCourse</code>always refers to a course that hasn’t been deallocated. In this case, for example, when you delete a course from <code>department.courses</code> you also need to remove any references to it that other courses might have.</p><p>注意</p><p>可选值的基础类型是<code>Optional</code>，这是Swift标准库中的枚举。然而，可选是值类型不能用<code>unowned</code>标记的规则的例外。</p><p>包装类的可选内容不使用引用计数，因此您不需要对可选的强烈引用。</p><h3 id="未拥有的引用和隐式解开的可选属性" tabindex="-1"><a class="header-anchor" href="#未拥有的引用和隐式解开的可选属性" aria-hidden="true">#</a> 未拥有的引用和隐式解开的可选属性</h3><p>上面弱引用和无名引用的示例涵盖了两个更常见的场景，在这两个场景中，有必要打破强引用周期。</p><p><code>Person</code>和<code>Apartment</code>示例显示了两种财产（均为<code>nil</code>）可能导致强烈参考周期的情况。最好在参考较弱的情况下解决此情景。</p><p><code>Customer</code>和<code>CreditCard</code>示例显示了一种情况，即一个允许为<code>nil</code>的属性和另一个不能为<code>nil</code>的属性可能会导致强大的参考周期。最好通过非自有参考来解决这个问题。</p><p>然而，还有第三种情况，在这种情况下，<em>两个</em>属性都应该始终有一个值，一旦初始化完成，这两个属性都不应该为<code>nil</code>。在这种情况下，将一个类上的非所有属性与另一个类上隐式解包装的可选属性相结合是有用的。</p><p>这使初始化完成后可以直接访问两个属性（无需可选的展开），同时仍然避免引用周期。本节向您展示如何建立这种关系。</p><p>以下示例定义了两个类，<code>Country</code>和<code>City</code>，每个类都存储另一个类的实例作为属性。在这个数据模型中，每个国家必须始终拥有一个首都，每个城市必须始终属于一个国家。为了代表这一点，<code>Country</code>级有一个<code>capitalCity</code>财产，<code>City</code>阶级有一个<code>country</code>财产：</p><ol><li>class Country {</li><li>​ let name: String</li><li>​ var capitalCity: City!</li><li>​ init(name: String, capitalName: String) {</li><li>​ self.name = name</li><li>​ self.capitalCity = City(name: capitalName, country: self)</li><li>​ }</li><li>}</li><li></li><li>class City {</li><li>​ let name: String</li><li>​ unowned let country: Country</li><li>​ init(name: String, country: Country) {</li><li>​ self.name = name</li><li>​ self.country = country</li><li>​ }</li><li>}</li></ol><p>为了在两个类之间建立相互依存关系，<code>City</code>的初始化器采用一个国家实例，并将该实例存储在其<code>country</code>属性中。</p>',98),C=o("code",null,"City",-1),_=o("code",null,"Country",-1),q=o("code",null,"Country",-1),w=o("code",null,"Country",-1),A=o("code",null,"self",-1),y=o("code",null,"City",-1),x={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID220",target:"_blank",rel:"noopener noreferrer"},b=o("code",null,"Country",-1),T=o("code",null,"capitalCity",-1),P=o("code",null,"City!",-1),L=o("code",null,"capitalCity",-1),M=o("code",null,"nil",-1),H={href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID334",target:"_blank",rel:"noopener noreferrer"},R=l('<p>Because <code>capitalCity</code> has a default <code>nil</code> value, a new <code>Country</code> instance is considered fully initialized as soon as the <code>Country</code> instance sets its <code>name</code> property within its initializer. This means that the <code>Country</code> initializer can start to reference and pass around the implicit <code>self</code>property as soon as the <code>name</code> property is set. The <code>Country</code> initializer can therefore pass <code>self</code>as one of the parameters for the <code>City</code> initializer when the <code>Country</code> initializer is setting its own <code>capitalCity</code> property.</p><p>所有这些都意味着您可以在单个语句中创建<code>Country</code>和<code>City</code>实例，而无需创建强大的参考周期，并且可以直接访问<code>capitalCity</code>属性，而无需使用感叹号来解开其可选值：</p><ol><li>var country = Country(name: &quot;Canada&quot;, capitalName: &quot;Ottawa&quot;)</li><li>print(&quot;(country.name)&#39;s capital city is called (country.capitalCity.name)&quot;)</li><li>// Prints &quot;Canada&#39;s capital city is called Ottawa&quot;</li></ol><p>在上面的示例中，使用隐式未包装的可选选项意味着满足所有两相类初始化器要求。一旦初始化完成，<code>capitalCity</code>属性可以像非可选值一样使用和访问，同时仍然避免了强大的参考周期。</p><h2 id="关闭的强参考周期" tabindex="-1"><a class="header-anchor" href="#关闭的强参考周期" aria-hidden="true">#</a> 关闭的强参考周期</h2><p>您在上面看到了当两个类实例属性相互保持强引用时，如何创建强引用周期。您还看到了如何使用弱引用和无名引用来打破这些强引用周期。</p><p>如果您为类实例的属性分配闭包，并且该闭包的主体捕获实例，也可能发生强引用周期。发生此捕获可能是因为闭包的主体访问实例的属性，如<code>self.someProperty</code>，或者因为闭包调用实例上的方法，如<code>self.someMethod()</code>。无论哪种情况，这些访问都会导致闭包“捕获”<code>self</code>，从而创建一个强大的参考周期。</p><p>出现这种强大的参考周期是因为闭包与类一样是<em>引用类型</em>。当您为属性分配闭包时，您将为该闭包分配<em>引用</em>。从本质上讲，这是与上面相同的问题——两个强有力的引用让彼此保持活力。然而，这次不是两个类实例，而是一个类实例和一个闭包，它们让彼此保持活力。</p><p>Swift为这个问题提供了一个优雅的解决方案，称为<em>闭包捕获列表</em>。然而，在您学习如何通过闭包捕获列表打破强大的参考周期之前，了解如何导致这样的循环是有用的。</p><p>下面的示例展示了在使用引用<code>self</code>的闭包时如何创建强引用周期。此示例定义了一个名为<code>HTMLElement</code>类，该类为HTML文档中的单个元素提供了一个简单的模型：</p><ol><li>class HTMLElement {</li><li></li><li>​ let name: String</li><li>​ let text: String?</li><li></li><li>​ lazy var asHTML: () -&gt; String = {</li><li>​ if let text = self.text {</li><li>​ return &quot;&lt;(self.name)&gt;(text)&lt;/(self.name)&gt;&quot;</li><li>​ } else {</li><li>​ return &quot;&lt;(self.name) /&gt;&quot;</li><li>​ }</li><li>​ }</li><li></li><li>​ init(name: String, text: String? = nil) {</li><li>​ self.name = name</li><li>​ self.text = text</li><li>​ }</li><li></li><li>​ deinit {</li><li>​ print(&quot;(name) is being deinitialized&quot;)</li><li>​ }</li><li></li><li>}</li></ol><p><code>HTMLElement</code>类定义了一个<code>name</code>属性，该属性指示元素的名称，例如标题元素的<code>&quot;h1&quot;</code>”，段落元素的<code>&quot;p&quot;</code>换行符元素的<code>&quot;br&quot;</code>”。<code>HTMLElement</code>还定义了一个可选的<code>text</code>属性，您可以将其设置为表示在该HTML元素中渲染的文本的字符串。</p><p>除了这两个简单的属性外，<code>HTMLElement</code>类还定义了一个名为<code>asHTML</code>惰性属性。此属性引用将<code>name</code>和<code>text</code>组合成HTML字符串片段的闭包。<code>asHTML</code>属性类型为<code>()-&gt;String</code>，或“不接受参数并返回<code>String</code>值的函数”。</p><p>By default, the <code>asHTML</code> property is assigned a closure that returns a string representation of an HTML tag. This tag contains the optional <code>text</code> value if it exists, or no text content if <code>text</code>doesn’t exist. For a paragraph element, the closure would return <code>&quot;&lt;p&gt;some text&lt;/p&gt;&quot;</code> or <code>&quot;&lt;p /&gt;&quot;</code>, depending on whether the <code>text</code> property equals <code>&quot;some text&quot;</code> or <code>nil</code>.</p><p><code>asHTML</code>属性的命名和使用有点像实例方法。但是，由于<code>asHTML</code>是一个闭包属性，而不是实例方法，如果您想更改特定HTML元素的HTML渲染，您可以将<code>asHTML</code>属性的默认值替换为自定义闭包。</p><p>例如，如果<code>text</code>属性为<code>nil</code>，则可以将<code>asHTML</code>属性设置为默认为某些文本的闭包，以防止表示返回空的HTML标签：</p><ol><li>let heading = HTMLElement(name: &quot;h1&quot;)</li><li>let defaultText = &quot;some default text&quot;</li><li>heading.asHTML = {</li><li>​ return &quot;&lt;(heading.name)&gt;(heading.text ?? defaultText)&lt;/(heading.name)&gt;&quot;</li><li>}</li><li>print(heading.asHTML())</li><li>// Prints &quot;<h1>some default text</h1>&quot;</li></ol><p>注意</p><p><code>asHTML</code>属性被声明为惰性属性，因为只有当元素实际上需要渲染为某些HTML输出目标的字符串值时，才需要它。<code>asHTML</code>是一个惰性属性，这意味着您可以在默认闭包中引用<code>self</code>，因为在初始化完成并已知<code>self</code>存在之前，才会访问惰性属性。</p><p><code>HTMLElement</code>类提供了一个初始化器，它使用<code>name</code>参数和（如果需要）<code>text</code>参数来初始化新元素。该类还定义了一个去初始化器，该初始化器打印一条消息，以便在<code>HTMLElement</code>实例被释放时显示。</p><p>以下是您如何使用<code>HTMLElement</code>类创建和打印新实例的方法：</p><ol><li>var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)</li><li>print(paragraph!.asHTML())</li><li>// Prints &quot;<p>hello, world</p>&quot;</li></ol><p>注意</p><p>上面的<code>paragraph</code>变量被定义为<em>可选</em>的<code>HTMLElement</code>，因此可以将其设置为<code>nil</code>，以证明存在强引用周期。</p><p>不幸的是，如上所述，<code>HTMLElement</code>类在<code>HTMLElement</code>实例和用于其默认为<code>asHTML</code>值的闭包之间创建了强大的参考周期。以下是周期的外观：</p><p><img src="https://docs.swift.org/swift-book/_images/closureReferenceCycle01_2x.png" alt="../_images/closureReferenceCycle01_2x.png"></p>',26),S=o("code",null,"asHTML",-1),k=o("code",null,"self",-1),v=o("code",null,"self.name",-1),E=o("code",null,"self.text",-1),z=o("em",null,"捕获",-1),j=o("code",null,"HTMLElement",-1),I={href:"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID103",target:"_blank",rel:"noopener noreferrer"},D=l('<p>注意</p><p>尽管闭包多次引用<code>self</code>，但它只捕获一个对<code>HTMLElement</code>实例的强烈引用。</p><p>如果您将<code>paragraph</code>变量设置为<code>nil</code>并破坏其对<code>HTMLElement</code>实例的强引用，则由于强引用周期，<code>HTMLElement</code>实例及其闭包都不会被释放：</p><ol><li>paragraph = nil</li></ol><p>Note that the message in the <code>HTMLElement</code> deinitializer isn’t printed, which shows that the <code>HTMLElement</code> instance isn’t deallocated.</p><h2 id="解决关闭的强参考周期" tabindex="-1"><a class="header-anchor" href="#解决关闭的强参考周期" aria-hidden="true">#</a> 解决关闭的强参考周期</h2><p>通过定义<em>捕获列表</em>作为闭包定义的一部分，您可以解决闭包和类实例之间的强引用周期。捕获列表定义了在闭包主体中捕获一个或多个引用类型时使用的规则。与两个类实例之间的强引用周期一样，您将每个捕获的引用声明为弱引用或非自有引用，而不是强引用。弱或无权的适当选择取决于代码不同部分之间的关系。</p><p>注意</p><p>每当您引用闭包中的<code>self</code>成员时，Swift要求您编写<code>self.someProperty</code>或<code>self.someMethod()</code>（而不是justsomeProperty或<code>someMethod()</code>）。这有助于你记住，偶然捕捉<code>self</code>是可能的。</p><h3 id="定义捕获列表" tabindex="-1"><a class="header-anchor" href="#定义捕获列表" aria-hidden="true">#</a> 定义捕获列表</h3><p>Each item in a capture list is a pairing of the <code>weak</code> or <code>unowned</code> keyword with a reference to a class instance (such as <code>self</code>) or a variable initialized with some value (such as <code>delegate = self.delegate</code>). These pairings are written within a pair of square braces, separated by commas.</p><p>将捕获列表放在闭包的参数列表之前，如果提供了它们，则返回类型：</p><ol><li>lazy var someClosure = {</li><li>​ [unowned self, weak delegate = self.delegate]</li><li>​ (index: Int, stringToProcess: String) -&gt; String in</li><li>​ // closure body goes here</li><li>}</li></ol><p>如果闭包没有指定参数列表或返回类型，因为它们可以从上下文中推断出来，请将捕获列表放在闭包的开头，后跟关键字：</p><ol><li>lazy var someClosure = {</li><li>​ [unowned self, weak delegate = self.delegate] in</li><li>​ // closure body goes here</li><li>}</li></ol><h3 id="弱引用和无所有引用" tabindex="-1"><a class="header-anchor" href="#弱引用和无所有引用" aria-hidden="true">#</a> 弱引用和无所有引用</h3><p>当闭包及其捕获的实例始终相互引用时，将闭包中的捕获定义为非自引用，并且始终同时被释放。</p><p>相反，当捕获的引用在未来某个时候可能变成<code>nil</code>，将捕获定义为弱引用。弱引用始终是可选类型，当它们引用的实例被释放时，它们会自动变成<code>nil</code>。这使您能够检查它们是否存在于闭合体中。</p><p>注意</p><p>如果捕获的引用永远不会变成<code>nil</code>，则应始终将其捕获为非拥有的引用，而不是弱引用。</p>',20),N={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56",target:"_blank",rel:"noopener noreferrer"},J=o("code",null,"HTMLElement",-1),G={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56",target:"_blank",rel:"noopener noreferrer"},O=o("code",null,"HTMLElement",-1),B=l('<ol><li>class HTMLElement {</li><li></li><li>​ let name: String</li><li>​ let text: String?</li><li></li><li>​ lazy var asHTML: () -&gt; String = {</li><li>​ [unowned self] in</li><li>​ if let text = self.text {</li><li>​ return &quot;&lt;(self.name)&gt;(text)&lt;/(self.name)&gt;&quot;</li><li>​ } else {</li><li>​ return &quot;&lt;(self.name) /&gt;&quot;</li><li>​ }</li><li>​ }</li><li></li><li>​ init(name: String, text: String? = nil) {</li><li>​ self.name = name</li><li>​ self.text = text</li><li>​ }</li><li></li><li>​ deinit {</li><li>​ print(&quot;(name) is being deinitialized&quot;)</li><li>​ }</li><li></li><li>}</li></ol><p>除了在<code>asHTML</code>闭包中添加捕获列表外，<code>HTMLElement</code>的实现与之前的实现相同。在这种情况下，捕获列表是<code>[unownedself]</code>，这意味着“捕获自我作为非自有参考，而不是强引用”。</p><p>您可以像以前一样创建和打印<code>HTMLElement</code>实例：</p><ol><li>var paragraph: HTMLElement? = HTMLElement(name: &quot;p&quot;, text: &quot;hello, world&quot;)</li><li>print(paragraph!.asHTML())</li><li>// Prints &quot;<p>hello, world</p>&quot;</li></ol><p>以下是捕获列表到位后参考资料的外观：</p><p><img src="https://docs.swift.org/swift-book/_images/closureReferenceCycle02_2x.png" alt="../_images/closureReferenceCycle02_2x.png"></p><p>这一次，闭包捕获<code>self</code>是一个非拥有的引用，并且不会强烈保留它捕获的<code>HTMLElement</code>实例。如果您将<code>paragraph</code>变量的强引用设置为<code>nil</code>，则<code>HTMLElement</code>实例将被释放，从以下示例中打印其去初始化器消息中可以看出：</p><ol><li>paragraph = nil</li><li>// Prints &quot;p is being deinitialized&quot;</li></ol>',8),V={href:"https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID544",target:"_blank",rel:"noopener noreferrer"};function U(F,K){const i=d("ExternalLinkIcon");return c(),r("div",null,[s,p,u,o("p",null,[e("然而，在少数情况下，ARC需要有关代码部分之间关系的更多信息，以便为您管理内存。本章介绍了这些情况，并展示了如何启用ARC来管理应用程序的所有内存。在Swift中使用ARC与"),o("a",m,[e("过渡到ARC发布说明"),t(i)]),e("中描述的将ARC与Objective-C一起使用的方法非常相似。")]),h,o("p",null,[e("您通过将类之间的一些关系定义为弱引用或无名引用而不是强引用来解决强引用周期。这个过程在"),o("a",f,[e("解决类实例之间的强引用周期中"),t(i)]),e("进行了描述。然而，在您学习如何解决强参考周期之前，了解这种周期是如何导致的非常有用。")]),g,o("p",null,[C,e("的初始化器从"),_,e("的初始化器中调用。但是，在新的"),q,e("实例完全初始化之前，"),w,e("的初始化器无法将"),A,e("传递给"),y,e("初始化器，如"),o("a",x,[e("两阶段初始化"),t(i)]),e("中所述。")]),o("p",null,[e("为了满足这一要求，您声明"),b,e("的"),T,e("财产为隐式未包装的可选属性，由其类型注释（"),P,e("）末尾的感叹号表示。这意味着，与任何其他可选属性一样，"),L,e("属性的默认值为"),M,e("，但无需按照"),o("a",H,[e("隐式未包装选项"),t(i)]),e("所述打开其值即可访问。")]),R,o("p",null,[e("实例的"),S,e("属性对其闭包有很强的引用。然而，由于闭包在其主体内引用"),k,e("（作为引用"),v,e("和"),E,e("的一种方式），闭包"),z,e("self，这意味着它具有对"),j,e("实例的强烈引用。两者之间创造了一个强大的参考周期。（有关在闭包中捕获值的更多信息，请参阅"),o("a",I,[e("捕获值"),t(i)]),e("。）")]),D,o("p",null,[e("无自有引用是从上面的"),o("a",N,[e("强引用周期"),t(i)]),e("到上文的"),J,e("示例中解析强引用周期"),o("a",G,[e("的"),t(i)]),e("适当捕获方法。以下是您编写"),O,e("类以避免循环的方法：")]),B,o("p",null,[e("有关捕获列表的更多信息，请参阅"),o("a",V,[e("捕获列表"),t(i)]),e("。")])])}const W=n(a,[["render",U],["__file","34.swift-automatic-reference-counting.html.vue"]]);export{W as default};
