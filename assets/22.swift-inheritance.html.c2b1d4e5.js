import{_ as d,r,o as l,c as a,a as o,b as e,d as t,e as c}from"./app.4659d0e0.js";const s={},n=c('<h1 id="swift基础-继承" tabindex="-1"><a class="header-anchor" href="#swift基础-继承" aria-hidden="true">#</a> Swift基础 - 继承</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html</p><p>一个类可以从另一个类<em>继承</em>方法、属性和其他特征。当一个类从另一个类继承时，继承类被称为<em>子类</em>，它继承的类被称为其<em>超类</em>。继承是一种基本行为，可以将类与 Swift 中的其他类型区分开来。</p><p>Swift中的类可以调用和访问属于其超类的方法、属性和下标，并可以提供这些方法、属性和下标的覆盖版本，以细化或修改其行为。Swift通过检查覆盖定义是否具有匹配的超类定义来帮助确保您的覆盖正确。</p><p>类还可以将属性观察者添加到继承的属性中，以便在属性值发生变化时收到通知。属性观察者可以添加到任何属性中，无论它最初是否被定义为存储或计算属性。</p><h2 id="定义基类" tabindex="-1"><a class="header-anchor" href="#定义基类" aria-hidden="true">#</a> 定义基类</h2><p>任何不从另一个类继承的类都被称为<em>基类</em>。</p><p>注意</p><p>Swift类不会从通用基类继承。您在不指定超类的情况下定义的类会自动成为供您构建的基类。</p><p>下面的示例定义了一个名为<code>Vehicle</code>的基类。该基类定义了一个名为<code>currentSpeed</code>存储属性，默认值为<code>0.0</code>（推断<code>Double</code>的属性类型）。<code>currentSpeed</code>属性的值被称为<code>description</code>的只读计算<code>String</code>属性用于创建车辆的描述。</p><p><code>Vehicle</code>基类还定义了一个名为<code>makeNoise</code>的方法。此方法实际上对基本<code>Vehicle</code>实例不起作用，但稍后将由<code>Vehicle</code>子类自定义：</p><ol><li>class Vehicle {</li><li>​ var currentSpeed = 0.0</li><li>​ var description: String {</li><li>​ return &quot;traveling at (currentSpeed) miles per hour&quot;</li><li>​ }</li><li>​ func makeNoise() {</li><li>​ // do nothing - an arbitrary vehicle doesn&#39;t necessarily make a noise</li><li>​ }</li><li>}</li></ol><p>您创建一个带有<em>初始化器语法</em>的新<code>Vehicle</code>实例，该语法写为类型名称，后跟空括号：</p><ol><li>let someVehicle = Vehicle()</li></ol><p>创建新的<code>Vehicle</code>实例后，您可以访问其<code>description</code>属性，以打印车辆当前速度的人类可读描述：</p><ol><li>print(&quot;Vehicle: (someVehicle.description)&quot;)</li><li>// Vehicle: traveling at 0.0 miles per hour</li></ol><p><code>Vehicle</code>类定义了任意车辆的常见特征，但其本身没有多大用处。为了使其更有用，您需要对其进行细化，以描述更具体的车辆类型。</p><h2 id="子分类" tabindex="-1"><a class="header-anchor" href="#子分类" aria-hidden="true">#</a> 子分类</h2><p><em>子类</em>是将新类建立在现有类的基础上的行为。子类继承了现有类的特征，然后您可以对其进行细化。您还可以为子类添加新特征。</p><p>要指示子类有一个超类，请在超类名称之前写下子类名称，用冒号分隔：</p><ol><li>class SomeSubclass: SomeSuperclass {</li><li>​ // subclass definition goes here</li><li>}</li></ol><p>以下示例定义了一个名为<code>Bicycle</code>的子类，具有超类<code>Vehicle</code>：</p><ol><li>class Bicycle: Vehicle {</li><li>​ var hasBasket = false</li><li>}</li></ol><p>新的<code>Bicycle</code>类会自动获得<code>Vehicle</code>的所有特征，例如其<code>currentSpeed</code>和<code>description</code>属性及其<code>makeNoise()</code>方法。</p><p>除了继承的特征外，<code>Bicycle</code>类还定义了一个新的存储属性<code>hasBasket</code>，默认值为<code>false</code>（为该属性推断一种<code>Bool</code>类型）。</p><p>默认情况下，您创建的任何新<code>Bicycle</code>实例都不会有篮子。创建特定<code>Bicycle</code>实例后，您可以将该实例的<code>hasBasket</code>属性设置为<code>true</code>：</p><ol><li>let bicycle = Bicycle()</li><li>bicycle.hasBasket = true</li></ol><p>您还可以修改<code>Bicycle</code>实例的继承的<code>currentSpeed</code>属性，并查询实例的继承<code>description</code>属性：</p><ol><li>bicycle.currentSpeed = 15.0</li><li>print(&quot;Bicycle: (bicycle.description)&quot;)</li><li>// Bicycle: traveling at 15.0 miles per hour</li></ol><p>子类本身可以被子类。下一个示例为被称为“串联”的双座自行车创建<code>Bicycle</code>子类：</p><ol><li>class Tandem: Bicycle {</li><li>​ var currentNumberOfPassengers = 0</li><li>}</li></ol><p><code>Tandem</code> inherits all of the properties and methods from <code>Bicycle</code>, which in turn inherits all of the properties and methods from <code>Vehicle</code>. The <code>Tandem</code> subclass also adds a new stored property called <code>currentNumberOfPassengers</code>, with a default value of <code>0</code>.</p><p>如果您创建<code>Tandem</code>实例，您可以处理其任何新的和继承的属性，并查询它从<code>Vehicle</code>继承的只读<code>description</code>属性：</p><ol><li>let tandem = Tandem()</li><li>tandem.hasBasket = true</li><li>tandem.currentNumberOfPassengers = 2</li><li>tandem.currentSpeed = 22.0</li><li>print(&quot;Tandem: (tandem.description)&quot;)</li><li>// Tandem: traveling at 22.0 miles per hour</li></ol><h2 id="压倒一切的" tabindex="-1"><a class="header-anchor" href="#压倒一切的" aria-hidden="true">#</a> 压倒一切的</h2><p>子类可以提供实例方法、类型方法、实例属性、类型属性或下标的自定义实现，否则它将从超类继承。这被称为<em>压倒一切</em>。</p><p>要覆盖否则会继承的特征，请在覆盖定义前加上<code>override</code>关键字。这样做会澄清您打算提供重写，并且没有错误地提供匹配的定义。意外覆盖可能会导致意外行为，任何没有<code>override</code>关键字的覆盖都会在编译代码时被诊断为错误。</p><p><code>override</code>关键字还会提示Swift编译器检查重写类的超类（或其父类之一）的声明是否与您为重写提供的声明相匹配。此检查可确保您的重写定义正确无误。</p><h3 id="访问超类方法、属性和下标" tabindex="-1"><a class="header-anchor" href="#访问超类方法、属性和下标" aria-hidden="true">#</a> 访问超类方法、属性和下标</h3><p>当您为子类提供方法、属性或下标覆盖时，有时使用现有的超类实现作为重写的一部分非常有用。例如，您可以细化该现有实现的行为，或将修改后的值存储在现有继承的变量中。</p><p>在适当的情况下，您可以使用<code>super</code>前缀访问方法、属性或下标的超类版本：</p><ul><li>名为<code>someMethod()</code>重写方法可以通过在重写方法实现中调用<code>super.someMethod()</code>来调用<code>someMethod()</code>的超类版本。</li><li>名为<code>someProperty</code>的重写属性可以在重写getter或setter实现中以<code>super.someProperty</code>的形式访问<code>someProperty</code>的超类版本。</li><li><code>someIndex</code>的重写下标可以从重写下标实现中访问与<code>super[someIndex]</code>相同的下标的超类版本。</li></ul><h3 id="压倒一切的方法" tabindex="-1"><a class="header-anchor" href="#压倒一切的方法" aria-hidden="true">#</a> 压倒一切的方法</h3><p>您可以重写继承的实例或类型方法，以便在子类中提供方法的定制或替代实现。</p><p>以下示例定义了一个名为<code>Train</code>的新<code>Vehicle</code>子类，该子类覆盖了<code>Train</code>从<code>Vehicle</code>继承的<code>makeNoise()</code>方法：</p><ol><li>class Train: Vehicle {</li><li>​ override func makeNoise() {</li><li>​ print(&quot;Choo Choo&quot;)</li><li>​ }</li><li>}</li></ol><p>如果您创建一个新的<code>Train</code>实例并调用其<code>makeNoise()</code>方法，您可以看到该方法的<code>Train</code>子类版本被调用：</p><ol><li>let train = Train()</li><li>train.makeNoise()</li><li>// Prints &quot;Choo Choo&quot;</li></ol><h3 id="压倒一切的属性" tabindex="-1"><a class="header-anchor" href="#压倒一切的属性" aria-hidden="true">#</a> 压倒一切的属性</h3><p>您可以重写继承的实例或类型属性，为该属性提供自己的自定义获取器和设置器，或添加属性观察器，以使重写属性能够观察基础属性值何时更改。</p><h4 id="压倒一切的财产获取者和设定者" tabindex="-1"><a class="header-anchor" href="#压倒一切的财产获取者和设定者" aria-hidden="true">#</a> 压倒一切的财产获取者和设定者</h4><p>您可以提供自定义获取器（如果适用，并酌情提供设置器）来覆盖<em>任何</em>继承的属性，无论继承的属性是在源代码中实现为存储的还是计算属性。子类不知道继承属性的存储或计算性质——它只知道继承属性具有特定的名称和类型。您必须始终声明要重写的属性的名称和类型，以使编译器能够检查您的重写是否与具有相同名称和类型的超类属性匹配。</p><p>您可以通过在子类属性重写中同时提供获取器和设置器来将继承的只读属性呈现为读写属性。但是，您不能将继承的读写属性显示为只读属性。</p><p>注意</p><p>如果您提供设置器作为属性覆盖的一部分，您还必须为该覆盖提供获取器。如果您不想在覆盖getter中修改继承属性的值，只需从getter返回<code>super.someProperty</code>来传递继承的值，其中<code>someProperty</code>是您要重写的属性的名称。</p><p>以下示例定义了一个名为<code>Car</code>的新类，这是<code>Vehicle</code>的一个子类。TheCar类引入了一个新的存储属性，称为<code>gear</code>，默认整数值为1。TheCar类还覆盖了它从<code>Vehicle</code>继承的<code>description</code>属性，以提供包含当前齿轮的自定义描述：</p><ol><li>class Car: Vehicle {</li><li>​ var gear = 1</li><li>​ override var description: String {</li><li>​ return super.description + &quot; in gear (gear)&quot;</li><li>​ }</li><li>}</li></ol><p>The override of the <code>description</code> property starts by calling <code>super.description</code>, which returns the <code>Vehicle</code> class’s <code>description</code> property. The <code>Car</code> class’s version of <code>description</code>then adds some extra text onto the end of this description to provide information about the current gear.</p><p>如果您创建<code>Car</code>类的实例并设置其<code>gear</code>和<code>currentSpeed</code>属性，您可以看到它的<code>description</code>属性返回在<code>Car</code>类中定义的定制描述：</p><ol><li>let car = Car()</li><li>car.currentSpeed = 25.0</li><li>car.gear = 3</li><li>print(&quot;Car: (car.description)&quot;)</li><li>// Car: traveling at 25.0 miles per hour in gear 3</li></ol><h4 id="压倒一切的财产观察者" tabindex="-1"><a class="header-anchor" href="#压倒一切的财产观察者" aria-hidden="true">#</a> 压倒一切的财产观察者</h4>',61),p={href:"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262",target:"_blank",rel:"noopener noreferrer"},h=c('<p>注意</p><p>您无法将属性观察者添加到继承的常量存储属性或继承的只读计算属性。无法设置这些属性的值，因此不宜提供将<code>willSet</code>或<code>didSet</code>实现作为重写的一部分。</p><p>另请注意，您无法同时提供同一属性的重写设置器和重写属性观察器。如果您想观察属性值的变化，并且您已经在为该属性提供自定义设置器，您可以简单地从自定义设置器中观察任何值更改。</p><p>以下示例定义了一个名为<code>AutomaticCar</code>的新类，这是<code>Car</code>的一个子类。<code>AutomaticCar</code>类表示带有自动变速箱的汽车，该变速箱根据当前速度自动选择要使用的适当齿轮：</p><ol><li>class AutomaticCar: Car {</li><li>​ override var currentSpeed: Double {</li><li>​ didSet {</li><li>​ gear = Int(currentSpeed / 10.0) + 1</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>每当您设置<code>AutomaticCar</code>实例的<code>currentSpeed</code>属性时，该属性的sdidSet观察器都会将实例的<code>gear</code>属性设置为新速度的适当齿轮选择。具体来说，属性观察者选择一个新的<code>currentSpeed</code>值除以10的齿轮，四舍五入到最近的整数，加上1。<code>35.0</code>的速度产生<code>4</code>的齿轮：</p><ol><li>let automatic = AutomaticCar()</li><li>automatic.currentSpeed = 35.0</li><li>print(&quot;AutomaticCar: (automatic.description)&quot;)</li><li>// AutomaticCar: traveling at 35.0 miles per hour in gear 4</li></ol><h2 id="防止重写" tabindex="-1"><a class="header-anchor" href="#防止重写" aria-hidden="true">#</a> 防止重写</h2><p>You can prevent a method, property, or subscript from being overridden by marking it as <em>final</em>. Do this by writing the <code>final</code> modifier before the method, property, or subscript’s introducer keyword (such as <code>final var</code>, <code>final func</code>, <code>final class func</code>, and <code>final subscript</code>).</p><p>任何在子类中重写最终方法、属性或下标的尝试都将报告为编译时错误。您添加到扩展类的方法、属性或下标也可以在扩展的定义中标记为最终。</p><p>您可以通过在类定义（<code>finalclass</code>）中的<code>class</code>关键字之前编写<code>final</code>修饰符，将整个类标记为最终修饰语。任何对最终类进行子类的尝试都将报告为编译时错误。</p>',11);function u(m,f){const i=r("ExternalLinkIcon");return l(),a("div",null,[n,o("p",null,[e("您可以使用属性重写将属性观察者添加到继承的属性中。这使您能够在继承属性的值发生变化时收到通知，无论该属性最初是如何实现的。有关财产观察员的更多信息，请参阅"),o("a",p,[e("财产观察员"),t(i)]),e("。")]),h])}const b=d(s,[["render",u],["__file","22.swift-inheritance.html.vue"]]);export{b as default};
