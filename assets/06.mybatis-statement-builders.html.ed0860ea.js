import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app.4659d0e0.js";const i={},u=n("h1",{id:"mybatis-sql-语句构建器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-sql-语句构建器","aria-hidden":"true"},"#"),s(" MyBatis - SQL 语句构建器")],-1),k={href:"https://mybatis.org/mybatis-3/zh/statement-builders.html",target:"_blank",rel:"noopener noreferrer"},d=l(`<h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>Java 程序员面对的最痛苦的事情之一就是在 Java 代码中嵌入 SQL 语句。这通常是因为需要动态生成 SQL 语句，不然我们可以将它们放到外部文件或者存储过程中。如你所见，MyBatis 在 XML 映射中具备强大的 SQL 动态生成能力。但有时，我们还是需要在 Java 代码里构建 SQL 语句。此时，MyBatis 有另外一个特性可以帮到你，让你从处理典型问题中解放出来，比如加号、引号、换行、格式化问题、嵌入条件的逗号管理及 AND 连接。确实，在 Java 代码中动态生成 SQL 代码真的就是一场噩梦。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME, &quot;</span>
<span class="token string">&quot;P.LAST_NAME,P.CREATED_ON, P.UPDATED_ON &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;FROM PERSON P, ACCOUNT A &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;INNER JOIN DEPARTMENT D on D.ID = P.DEPARTMENT_ID &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;INNER JOIN COMPANY C on D.COMPANY_ID = C.ID &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;WHERE (P.ID = A.ID AND P.FIRST_NAME like ?) &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;OR (P.LAST_NAME like ?) &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;GROUP BY P.ID &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;HAVING (P.LAST_NAME like ?) &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;OR (P.FIRST_NAME like ?) &quot;</span> <span class="token operator">+</span>
<span class="token string">&quot;ORDER BY P.ID, P.FULL_NAME&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><p>MyBatis 3 提供了方便的工具类来帮助解决此问题。借助 SQL 类，我们只需要简单地创建一个实例，并调用它的方法即可生成 SQL 语句。让我们来用 SQL 类重写上面的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">selectPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;ACCOUNT A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">INNER_JOIN</span><span class="token punctuation">(</span><span class="token string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">INNER_JOIN</span><span class="token punctuation">(</span><span class="token string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID = A.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.FIRST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GROUP_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAVING</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HAVING</span><span class="token punctuation">(</span><span class="token string">&quot;P.FIRST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.FULL_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子有什么特别之处吗？仔细看一下你会发现，你不用担心可能会重复出现的 &quot;AND&quot; 关键字，或者要做出用 &quot;WHERE&quot; 拼接还是 &quot;AND&quot; 拼接还是不用拼接的选择。SQL 类已经为你处理了哪里应该插入 &quot;WHERE&quot;、哪里应该使用 &quot;AND&quot; 的问题，并帮你完成所有的字符串拼接工作。</p><h3 id="sql-类" tabindex="-1"><a class="header-anchor" href="#sql-类" aria-hidden="true">#</a> SQL 类</h3><p>这里有一些示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 匿名内部类风格</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deletePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">DELETE_FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;ID = #{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Builder / Fluent 风格</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;ID, FIRST_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{id}, #{firstName}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;LAST_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{lastName}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sql<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 动态条件（注意参数需要使用 final 修饰，以便匿名内部类对它们进行访问）</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectPersonLike</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID like #{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.FIRST_NAME like #{firstName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME like #{lastName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deletePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">DELETE_FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;ID = #{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;ID, FIRST_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{id}, #{firstName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;LAST_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{lastName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updatePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">UPDATE</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SET</span><span class="token punctuation">(</span><span class="token string">&quot;FIRST_NAME = #{firstName}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;ID = #{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SELECT(String)\`\`SELECT(String...)</code></td><td style="text-align:left;">开始新的或追加到已有的 <code>SELECT</code>子句。可以被多次调用，参数会被追加到 <code>SELECT</code> 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。</td></tr><tr><td style="text-align:left;"><code>SELECT_DISTINCT(String)\`\`SELECT_DISTINCT(String...)</code></td><td style="text-align:left;">开始新的或追加到已有的 <code>SELECT</code>子句，并添加 <code>DISTINCT</code> 关键字到生成的查询中。可以被多次调用，参数会被追加到 <code>SELECT</code> 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。</td></tr><tr><td style="text-align:left;"><code>FROM(String)\`\`FROM(String...)</code></td><td style="text-align:left;">开始新的或追加到已有的 <code>FROM</code>子句。可以被多次调用，参数会被追加到 <code>FROM</code>子句。 参数通常是一个表名或别名，也可以是数据库驱动程序接受的任意参数。</td></tr><tr><td style="text-align:left;"><code>JOIN(String)\`\`JOIN(String...)\`\`INNER_JOIN(String)\`\`INNER_JOIN(String...)\`\`LEFT_OUTER_JOIN(String)\`\`LEFT_OUTER_JOIN(String...)\`\`RIGHT_OUTER_JOIN(String)\`\`RIGHT_OUTER_JOIN(String...)</code></td><td style="text-align:left;">基于调用的方法，添加新的合适类型的 <code>JOIN</code> 子句。 参数可以包含一个由列和连接条件构成的标准连接。</td></tr><tr><td style="text-align:left;"><code>WHERE(String)\`\`WHERE(String...)</code></td><td style="text-align:left;">插入新的 <code>WHERE</code> 子句条件，并使用 <code>AND</code> 拼接。可以被多次调用，对于每一次调用产生的新条件，会使用 <code>AND</code> 拼接起来。要使用 <code>OR</code> 分隔，请使用 <code>OR()</code>。</td></tr><tr><td style="text-align:left;"><code>OR()</code></td><td style="text-align:left;">使用 <code>OR</code> 来分隔当前的 <code>WHERE</code> 子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 <code>SQL</code>。</td></tr><tr><td style="text-align:left;"><code>AND()</code></td><td style="text-align:left;">使用 <code>AND</code> 来分隔当前的 <code>WHERE</code>子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 <code>SQL</code>。由于 <code>WHERE</code> 和 <code>HAVING</code>都会自动使用 <code>AND</code> 拼接, 因此这个方法并不常用，只是为了完整性才被定义出来。</td></tr><tr><td style="text-align:left;"><code>GROUP_BY(String)\`\`GROUP_BY(String...)</code></td><td style="text-align:left;">追加新的 <code>GROUP BY</code> 子句，使用逗号拼接。可以被多次调用，每次调用都会使用逗号将新的条件拼接起来。</td></tr><tr><td style="text-align:left;"><code>HAVING(String)\`\`HAVING(String...)</code></td><td style="text-align:left;">追加新的 <code>HAVING</code> 子句。使用 AND 拼接。可以被多次调用，每次调用都使用<code>AND</code>来拼接新的条件。要使用 <code>OR</code> 分隔，请使用 <code>OR()</code>。</td></tr><tr><td style="text-align:left;"><code>ORDER_BY(String)\`\`ORDER_BY(String...)</code></td><td style="text-align:left;">追加新的 <code>ORDER BY</code> 子句，使用逗号拼接。可以多次被调用，每次调用会使用逗号拼接新的条件。</td></tr><tr><td style="text-align:left;"><code>LIMIT(String)\`\`LIMIT(int)</code></td><td style="text-align:left;">追加新的 <code>LIMIT</code> 子句。 仅在 SELECT()、UPDATE()、DELETE() 时有效。 当在 SELECT() 中使用时，应该配合 OFFSET() 使用。（于 3.5.2 引入）</td></tr><tr><td style="text-align:left;"><code>OFFSET(String)\`\`OFFSET(long)</code></td><td style="text-align:left;">追加新的 <code>OFFSET</code> 子句。 仅在 SELECT() 时有效。 当在 SELECT() 时使用时，应该配合 LIMIT() 使用。（于 3.5.2 引入）</td></tr><tr><td style="text-align:left;"><code>OFFSET_ROWS(String)\`\`OFFSET_ROWS(long)</code></td><td style="text-align:left;">追加新的 <code>OFFSET n ROWS</code> 子句。 仅在 SELECT() 时有效。 该方法应该配合 FETCH_FIRST_ROWS_ONLY() 使用。（于 3.5.2 加入）</td></tr><tr><td style="text-align:left;"><code>FETCH_FIRST_ROWS_ONLY(String)\`\`FETCH_FIRST_ROWS_ONLY(int)</code></td><td style="text-align:left;">追加新的 <code>FETCH FIRST n ROWS ONLY</code> 子句。 仅在 SELECT() 时有效。 该方法应该配合 OFFSET_ROWS() 使用。（于 3.5.2 加入）</td></tr><tr><td style="text-align:left;"><code>DELETE_FROM(String)</code></td><td style="text-align:left;">开始新的 delete 语句，并指定删除表的表名。通常它后面都会跟着一个 WHERE 子句！</td></tr><tr><td style="text-align:left;"><code>INSERT_INTO(String)</code></td><td style="text-align:left;">开始新的 insert 语句，并指定插入数据表的表名。后面应该会跟着一个或多个 VALUES() 调用，或 INTO_COLUMNS() 和 INTO_VALUES() 调用。</td></tr><tr><td style="text-align:left;"><code>SET(String)\`\`SET(String...)</code></td><td style="text-align:left;">对 update 语句追加 &quot;set&quot; 属性的列表</td></tr><tr><td style="text-align:left;"><code>UPDATE(String)</code></td><td style="text-align:left;">开始新的 update 语句，并指定更新表的表名。后面都会跟着一个或多个 SET() 调用，通常也会有一个 WHERE() 调用。</td></tr><tr><td style="text-align:left;"><code>VALUES(String, String)</code></td><td style="text-align:left;">追加数据值到 insert 语句中。第一个参数是数据插入的列名，第二个参数则是数据值。</td></tr><tr><td style="text-align:left;"><code>INTO_COLUMNS(String...)</code></td><td style="text-align:left;">追加插入列子句到 insert 语句中。应与 INTO_VALUES() 一同使用。</td></tr><tr><td style="text-align:left;"><code>INTO_VALUES(String...)</code></td><td style="text-align:left;">追加插入值子句到 insert 语句中。应与 INTO_COLUMNS() 一同使用。</td></tr><tr><td style="text-align:left;"><code>ADD_ROW()</code></td><td style="text-align:left;">添加新的一行数据，以便执行批量插入。（于 3.5.2 引入）</td></tr></tbody></table><p><strong>提示</strong> 注意，SQL 类将原样插入 <code>LIMIT</code>、<code>OFFSET</code>、<code>OFFSET n ROWS</code> 以及 <code>FETCH FIRST n ROWS ONLY</code> 子句。换句话说，类库不会为不支持这些子句的数据库执行任何转换。 因此，用户应该要了解目标数据库是否支持这些子句。如果目标数据库不支持这些子句，产生的 SQL 可能会引起运行错误。</p><p>从版本 3.4.2 开始，你可以像下面这样使用可变长度参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A.USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;A.PASSWORD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P.FULL_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D.DEPARTMENT_NAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C.COMPANY_NAME&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON P&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ACCOUNT A&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INNER_JOIN</span><span class="token punctuation">(</span><span class="token string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID = A.ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P.FULL_NAME like #{name}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;P.FULL_NAME&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INTO_COLUMNS</span><span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FULL_NAME&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INTO_VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;#{id}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{fullName}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updatePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UPDATE</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SET</span><span class="token punctuation">(</span><span class="token string">&quot;FULL_NAME = #{fullName}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DATE_OF_BIRTH = #{dateOfBirth}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;ID = #{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从版本 3.5.2 开始，你可以像下面这样构建批量插入语句：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertPersonsSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// INSERT INTO PERSON (ID, FULL_NAME)</span>
  <span class="token comment">//     VALUES (#{mainPerson.id}, #{mainPerson.fullName}) , (#{subPerson.id}, #{subPerson.fullName})</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INTO_COLUMNS</span><span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FULL_NAME&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INTO_VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;#{mainPerson.id}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{mainPerson.fullName}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ADD_ROW</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">INTO_VALUES</span><span class="token punctuation">(</span><span class="token string">&quot;#{subPerson.id}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#{subPerson.fullName}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从版本 3.5.2 开始，你可以像下面这样构建限制返回结果数的 SELECT 语句,：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectPersonsWithOffsetLimitSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// SELECT id, name FROM PERSON</span>
  <span class="token comment">//     LIMIT #{limit} OFFSET #{offset}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">LIMIT</span><span class="token punctuation">(</span><span class="token string">&quot;#{limit}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OFFSET</span><span class="token punctuation">(</span><span class="token string">&quot;#{offset}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectPersonsWithFetchFirstSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// SELECT id, name FROM PERSON</span>
  <span class="token comment">//     OFFSET #{offset} ROWS FETCH FIRST #{limit} ROWS ONLY</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">OFFSET_ROWS</span><span class="token punctuation">(</span><span class="token string">&quot;#{offset}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FETCH_FIRST_ROWS_ONLY</span><span class="token punctuation">(</span><span class="token string">&quot;#{limit}&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sqlbuilder-和-selectbuilder-已经废弃" tabindex="-1"><a class="header-anchor" href="#sqlbuilder-和-selectbuilder-已经废弃" aria-hidden="true">#</a> SqlBuilder 和 SelectBuilder (已经废弃)</h3><p>在版本 3.2 之前，我们的实现方式不太一样，我们利用 ThreadLocal 变量来掩盖一些对 Java DSL 不太友好的语言限制。现在，现代 SQL 构建框架使用的构建器和匿名内部类思想已被人们所熟知。因此，我们废弃了基于这种实现方式的 SelectBuilder 和 SqlBuilder 类。</p><p>下面的方法仅仅适用于废弃的 SqlBuilder 和 SelectBuilder 类。</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>BEGIN()</code> /<code>RESET()</code></td><td style="text-align:left;">这些方法清空 SelectBuilder 类的 ThreadLocal 状态，并准备好构建一个新的语句。开始新的语句时，<code>BEGIN()</code> 是最名副其实的（可读性最好的）。但如果由于一些原因（比如程序逻辑在某些条件下需要一个完全不同的语句），在执行过程中要重置语句构建状态，就很适合使用 <code>RESET()</code>。</td></tr><tr><td style="text-align:left;"><code>SQL()</code></td><td style="text-align:left;">该方法返回生成的 <code>SQL()</code> 并重置 <code>SelectBuilder</code> 状态（等价于调用了 <code>BEGIN()</code> 或 <code>RESET()</code>）。因此，该方法只能被调用一次！</td></tr></tbody></table><p>SelectBuilder 和 SqlBuilder 类并不神奇，但最好还是知道它们的工作原理。 SelectBuilder 以及 SqlBuilder 借助静态导入和 ThreadLocal 变量实现了对插入条件友好的简洁语法。要使用它们，只需要静态导入这个类的方法即可，就像这样（只能使用其中的一条，不能同时使用）:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">SelectBuilder</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">SqlBuilder</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以像下面这样创建一些方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 已被废弃 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectBlogsSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">BEGIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重置 ThreadLocal 状态变量</span>
  <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;BLOG&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
        
<span class="token comment">/* 已被废弃 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">selectPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">BEGIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重置 ThreadLocal 状态变量</span>
  <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;PERSON P&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">&quot;ACCOUNT A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INNER_JOIN</span><span class="token punctuation">(</span><span class="token string">&quot;DEPARTMENT D on D.ID = P.DEPARTMENT_ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INNER_JOIN</span><span class="token punctuation">(</span><span class="token string">&quot;COMPANY C on D.COMPANY_ID = C.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID = A.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.FIRST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">OR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">GROUP_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAVING</span><span class="token punctuation">(</span><span class="token string">&quot;P.LAST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">OR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">HAVING</span><span class="token punctuation">(</span><span class="token string">&quot;P.FIRST_NAME like ?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">&quot;P.FULL_NAME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function r(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("转载自："),n("a",k,[s("MyBatis 官网(SQL语句构建器)"),c(a)])])]),d])}const S=t(i,[["render",r],["__file","06.mybatis-statement-builders.html.vue"]]);export{S as default};
