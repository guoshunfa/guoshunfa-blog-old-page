import{_ as o,r as p,o as c,c as i,a as s,b as n,d as e,e as t}from"./app.4659d0e0.js";const l="/assets/202204051010377.27f7a5e6.png",u={},r=t(`<h1 id="swift基础-控制流程" tabindex="-1"><a class="header-anchor" href="#swift基础-控制流程" aria-hidden="true">#</a> Swift基础 - 控制流程</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html</p><p>Swift提供了各种控制流语句。这些包括<code>while</code>循环多次执行任务；<code>if</code>、<code>guard</code>和<code>switch</code>语句，以根据特定条件执行不同的代码分支；以及<code>break</code>和<code>continue</code>将执行流程转移到代码中的另一个点等语句。</p><p>Swift还提供了一个<code>for</code>-<code>in</code>循环，可以轻松地在数组、字典、范围、字符串和其他序列上迭代。</p><p>Swift的<code>switch</code>语句在许多类似C语言中比它的对应语句强大得多。案例可以匹配许多不同的模式，包括间隔匹配、元组和特定类型的转换。<code>switch</code>情况下的匹配值可以绑定到临时常量或变量，以便在案例正文中使用，复杂的匹配条件可以用每个案例的<code>where</code>子句表示。</p><h2 id="for-in循环" tabindex="-1"><a class="header-anchor" href="#for-in循环" aria-hidden="true">#</a> For-In循环</h2><p>您可以使用<code>for</code>-<code>in</code>循环迭代序列，例如数组中的项、数字范围或字符串中的字符。</p><p>此示例使用<code>for</code>-<code>in</code>循环来迭代数组中的项目：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Brian&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Jack&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Hello, Anna!</span>
<span class="token comment">// Hello, Alex!</span>
<span class="token comment">// Hello, Brian!</span>
<span class="token comment">// Hello, Jack!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以迭代字典以访问其键值对。字典迭代时，字典中的每个项目都会作为<code>(key,value)</code>元组返回，您可以将<code>(key,value)</code>元组的成员分解为显式命名的常量，以便在<code>for</code>-<code>in</code>循环的正文中使用。在下面的代码示例中，字典的键被分解为名为<code>animalName</code>的常量，字典的值被分解为名为<code>legCount</code>的常量。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> numberOfLegs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;spider&quot;</span></span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;ant&quot;</span></span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;cat&quot;</span></span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>animalName<span class="token punctuation">,</span> legCount<span class="token punctuation">)</span> <span class="token keyword">in</span> numberOfLegs <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">animalName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">s have </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">legCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> legs&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// cats have 4 legs</span>
<span class="token comment">// ants have 6 legs</span>
<span class="token comment">// spiders have 8 legs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),d=s("code",null,"Dictionary",-1),k=s("code",null,"Dictionary",-1),m={href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>您还可以使用数字范围的<code>for</code>-<code>in</code>循环。此示例打印五次表中的前几个条目：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times 5 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index <span class="token operator">*</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1 times 5 is 5</span>
<span class="token comment">// 2 times 5 is 10</span>
<span class="token comment">// 3 times 5 is 15</span>
<span class="token comment">// 4 times 5 is 20</span>
<span class="token comment">// 5 times 5 is 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正在迭代的序列是从<code>1</code>到5的数字范围，包括使用闭区间运算符（<code>...</code>）所示。<code>index</code>的值设置为范围（1）中的第一个数字，并执行循环中的语句。在这种情况下，循环只包含一个语句，该语句从五次表中打印<code>index</code>当前值的条目。执行语句后，<code>index</code>值将更新为包含范围（2）中的第二个值，并再次调用<code>print(_:separator:terminator:)</code>函数。这个过程一直持续到范围结束。</p><p>在上面的示例中，<code>index</code>是一个常量，其值在循环每次迭代开始时自动设置。因此，<code>index</code>在使用之前不必声明。它仅通过包含在循环声明中来隐式声明，而无需<code>let</code>声明关键字。</p><p>如果您不需要序列中的每个值，您可以使用下划线代替变量名称来忽略这些值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> answer <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span>power <span class="token punctuation">{</span>
   answer <span class="token operator">*=</span> base
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">base</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> to the power of </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">power</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">answer</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;3 to the power of 10 is 59049&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例计算了一个数字对另一个数字幂的值（在这种情况下，<code>3</code>到<code>10</code>的幂）。它使用以<code>1</code>开头和以10结尾的闭合范围将<code>1</code>（即<code>3</code>到<code>0</code>的幂）乘以3、十倍。对于此计算，每次通过循环的单个计数器值是不必要的——代码只需正确执行循环次数。代替循环变量的下划线字符（<code>_</code>）会导致单个值被忽略，并且在循环的每次迭代中不提供对当前值的访问。</p>`,7),b=s("code",null,"60",-1),g=s("code",null,"0",-1),h=s("code",null,"..<",-1),w={href:"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID73",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> minutes <span class="token operator">=</span> <span class="token number">60</span>
<span class="token keyword">for</span> tickMark <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>minutes <span class="token punctuation">{</span>
   <span class="token comment">// render the tick mark each minute (60 times)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些用户可能希望在他们的UI中少打勾。他们可以选择每“5”分钟打一个分数。使用&#39; <code>stride(from:to:by:)</code> &#39;函数来跳过不需要的标记。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> minuteInterval <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">for</span> tickMark <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> minutes<span class="token punctuation">,</span> by<span class="token punctuation">:</span> minuteInterval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭合范围也可用，使用 <code>stride(from:through:by:)</code>代替：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">let</span> hourInterval <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">for</span> tickMark <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> through<span class="token punctuation">:</span> hours<span class="token punctuation">,</span> by<span class="token punctuation">:</span> hourInterval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// render the tick mark every 3 hours (3, 6, 9, 12)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q=s("code",null,"for",-1),y=s("code",null,"in",-1),x=s("em",null,"任何",-1),_={href:"https://developer.apple.com/documentation/swift/sequence",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"Sequence",-1),S=t('<h2 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环" aria-hidden="true">#</a> While循环</h2><p><code>while</code>循环执行一组语句，直到条件变成<code>false</code>。当第一次迭代开始前不知道迭代次数时，最好使用这些类型的循环。Swift提供了两种类型的<code>while</code>循环：</p><ul><li><code>while</code>在每次通过循环开始时评估其状态。</li><li><code>repeat</code>-<code>while</code>在每次通过循环结束时评估其状态。</li></ul><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h3><p><code>while</code>循环从评估单个条件开始。如果条件为<code>true</code>，则重复一组语句，直到条件变为<code>false</code>。</p><p>以下是<code>while</code>循环的一般形式：</p><ol><li>while <code>condition</code> {</li><li>​ <code>statements</code></li><li>}</li></ol><p>这个例子玩一个简单的<em>蛇和梯子</em>游戏（也称为<em>滑槽和梯子</em>）：</p><p><img src="'+l+`" alt="../_images/snakesAndLadders_2x.png"></p><p>游戏规则如下：</p><ul><li>董事会有25个正方形，目标是降落在25个正方形或25个以上。</li><li>玩家的起始方块是“正方形零”，就在棋盘的左下角。</li><li>每次转弯，您滚动一个六面骰子，并沿着上面虚线箭头指示的水平路径按该数量的正方形移动。</li><li>如果你的转弯在梯子底部结束，你就向上移动。</li><li>如果你的转弯在蛇的头上结束，你就沿着那条蛇向下移动。</li></ul><p>游戏板由<code>Int</code>值数组表示。它的大小基于一个名为<code>finalSquare</code>常量，该常量用于初始化数组，并在示例后面检查获胜条件。因为玩家从棋盘开始，在“平方零”上，棋盘初始化为26个零<code>Int</code>值，而不是25个。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> finalSquare <span class="token operator">=</span> <span class="token number">25</span>
<span class="token keyword">var</span> board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> finalSquare <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将一些正方形设置为蛇和梯子具有更具体的值。带梯子底座的正数可以将您向上移动，而带蛇头的正方形则有一个负数将您移回板上。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>board<span class="token punctuation">[</span><span class="token number">03</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">06</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">09</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">09</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">02</span>
board<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">02</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">08</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正方形3包含一个梯子的底部，该梯子将您移动到正方形11。为了表示这一点，<code>board[03]</code>等于<code>+08</code>，这相当于整数值<code>8</code>（<code>3</code>和<code>11</code>之间的差）。为了对齐值和语句，一元加运算符（<code>+i</code>）显式地与一元减运算符（<code>-i</code>）一起使用，小于<code>10</code>的数字用零填充。（两者都不是严格必要的文体技术，但它们会导致代码更整洁。）</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> diceRoll <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> square <span class="token operator">&lt;</span> finalSquare <span class="token punctuation">{</span>
   <span class="token comment">// roll the dice</span>
   diceRoll <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token keyword">if</span> diceRoll <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">{</span> diceRoll <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>
   <span class="token comment">// move by the rolled amount</span>
   square <span class="token operator">+=</span> diceRoll
   <span class="token keyword">if</span> square <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>count <span class="token punctuation">{</span>
       <span class="token comment">// if we&#39;re still on the board, move up or down for a snake or a ladder</span>
       square <span class="token operator">+=</span> board<span class="token punctuation">[</span>square<span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Game over!&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子使用一种非常简单的方法来掷骰子。它不是生成随机数，而是以<code>diceRoll</code>值<code>0</code>开头。每次通过<code>while</code>循环，<code>diceRoll</code>都会增加一个，然后检查它是否变得太大。每当这个返回值等于7时，骰子卷就变得太大，并重置为1。结果是一系列<code>diceRoll</code>值，总是1、2、3、4、5、6、1、<code>2</code>等等。</p><p>掷骰子后，玩家通过<code>diceRoll</code>正方形向前移动。骰子卷可能已经将玩家移到了25方块之外，在这种情况下，游戏就结束了。为了应对这种情况，代码检查该<code>square</code>小于<code>board</code>数组的<code>count</code>属性。如果<code>square</code>有效，则将存储在<code>board[square]</code>中的值添加到当前<code>square</code>值中，以向上或向下移动任何梯子或蛇。</p><blockquote><p>注意</p><p>如果不执行此检查，<code>board[square]</code>可能会尝试访问<code>board</code>数组范围之外的值，这将触发运行时错误。</p></blockquote><p>然后，电流<code>while</code>循环执行结束，并检查循环的条件，看看是否应该再次执行循环。如果玩家在正方形25上移动或超过25，循环的条件将计算为<code>false</code>，游戏结束。</p><p>在这种情况下，<code>while</code>循环是合适的，因为<code>while</code>循环开始时游戏的长度不明确。相反，循环被执行，直到满足特定条件。</p><h3 id="repeat-while" tabindex="-1"><a class="header-anchor" href="#repeat-while" aria-hidden="true">#</a> Repeat-While</h3><p><code>while</code>循环的另一个变体，称为<code>repeat\`\`while</code>循环，在考虑循环的条件<em>之前</em>，先执行一次循环块的传递。然后，它继续重复循环，直到条件为<code>false</code>。</p><blockquote><p>注意</p><p>Swift 中的<code>repeat</code>循环类似于其他语言中的<code>while</code>循环。</p></blockquote><p>以下是<code>repeat</code>循环的一般形式：</p><ol><li>repeat {</li><li>​ <code>statements</code></li><li>} while <code>condition</code></li></ol><p>这是<em>蛇和梯子</em>的例子，写成<code>repeat</code>循环，而不是<code>while</code>循环。<code>finalSquare</code>、<code>board</code>、<code>square</code>和<code>diceRoll</code>的值初始化方式与<code>while</code>循环完全相同。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> finalSquare <span class="token operator">=</span> <span class="token number">25</span>
<span class="token keyword">var</span> board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> finalSquare <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
board<span class="token punctuation">[</span><span class="token number">03</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">06</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">09</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">09</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">02</span>
board<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">02</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">08</span>
<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> diceRoll <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个版本的游戏中，循环中<em>的第一个</em>动作是检查梯子或蛇。棋盘上没有梯子将玩家直接带到25号方块，因此不可能通过向上移动梯子来赢得比赛。因此，检查蛇或梯子作为循环中的第一个动作是安全的。</p><p>在游戏开始时，玩家处于“平方零”。<code>board[0]</code>总是等于<code>0</code>，没有效果。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">repeat</span> <span class="token punctuation">{</span>
   <span class="token comment">// move up or down for a snake or ladder</span>
   square <span class="token operator">+=</span> board<span class="token punctuation">[</span>square<span class="token punctuation">]</span>
   <span class="token comment">// roll the dice</span>
   diceRoll <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token keyword">if</span> diceRoll <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">{</span> diceRoll <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>
   <span class="token comment">// move by the rolled amount</span>
   square <span class="token operator">+=</span> diceRoll
<span class="token punctuation">}</span> <span class="token keyword">while</span> square <span class="token operator">&lt;</span> finalSquare
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Game over!&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码检查蛇和梯子后，掷骰子，玩家被<code>diceRoll</code>正方形向前移动。然后，当前的循环执行结束。</p><p>循环的条件（<code>whilesquare&lt;finalSquare</code>）与以前相同，但这次要到第一次循环运行<em>结束时</em>才会进行评估。<code>repeat</code>循环的结构比上一个示例中的<code>while</code>循环更适合这个游戏。在上面的<code>while</code>循环中，<code>square+=board[square]</code>总是在循环<em>后立即</em>执行，<code>while</code>条件确认<code>square</code>仍在板上。此行为消除了前面描述的游戏<code>while</code>循环版本中对数组边界检查的需求。</p><h2 id="条件声明" tabindex="-1"><a class="header-anchor" href="#条件声明" aria-hidden="true">#</a> 条件声明</h2><p>根据特定条件执行不同的代码通常非常有用。您可能希望在发生错误时运行额外的代码，或者在值变得太高或太低时显示消息。为此，您可以将部分代码<em>附加条件</em>。</p><p>Swift提供了两种向代码添加条件分支的方法：<code>if</code>语句和<code>switch</code>语句。通常，您使用<code>if</code>语句来评估只有少数可能结果的简单条件。<code>switch</code>语句更适合具有多种可能排列的更复杂条件，在模式匹配可以帮助选择适当的代码分支执行的情况下非常有用。</p><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h3><p>在最简单的形式中，<code>if</code>语句有一个单一的<code>if</code>条件。只有当条件为<code>true</code>时，它才会执行一组语句。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> temperatureInFahrenheit <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s very cold. Consider wearing a scarf.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;It&#39;s very cold. Consider wearing a scarf.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子检查温度是小于还是等于32华氏度（水的冰点）。如果是，则打印一条消息。否则，不会打印消息，代码执行在<code>if</code>语句的关闭大括号后继续。</p><p><code>if</code>语句可以为<code>if</code>条件为<code>false</code>的情况提供一组替代语句，称为<em>e else子句</em>。这些语句由<code>else</code>关键字表示。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>temperatureInFahrenheit <span class="token operator">=</span> <span class="token number">40</span>
<span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s very cold. Consider wearing a scarf.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s not that cold. Wear a t-shirt.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;It&#39;s not that cold. Wear a t-shirt.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个分支中的一个总是被执行的。由于温度已升至华氏<code>40</code>度，因此不再足够冷，无法建议戴围巾，因此会触发<code>else</code>分支。</p><p>您可以将多个<code>if</code>语句链接在一起，以考虑其他子句。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>temperatureInFahrenheit <span class="token operator">=</span> <span class="token number">90</span>
<span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s very cold. Consider wearing a scarf.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&gt;=</span> <span class="token number">86</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s really warm. Don&#39;t forget to wear sunscreen.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s not that cold. Wear a t-shirt.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;It&#39;s really warm. Don&#39;t forget to wear sunscreen.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，添加了一个额外的<code>if</code>语句，以应对特别温暖的温度。最后的<code>else</code>句仍然存在，它打印了对任何既不太温暖也不太冷的温度的响应。</p><p>然而，最终的al <code>else</code>子句是可选的，如果一组条件不需要完整，则可以排除。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>temperatureInFahrenheit <span class="token operator">=</span> <span class="token number">72</span>
<span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s very cold. Consider wearing a scarf.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> temperatureInFahrenheit <span class="token operator">&gt;=</span> <span class="token number">86</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s really warm. Don&#39;t forget to wear sunscreen.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于温度既不太冷也不太暖，无法触发<code>if</code>或<code>if</code>条件，因此没有打印任何消息。</p><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h3><p><code>switch</code>语句考虑一个值，并将其与几种可能的匹配模式进行比较。然后，它根据第一个成功匹配的模式执行适当的代码块。<code>switch</code>语句提供了<code>if</code>语句的替代方案，用于响应多个潜在状态。</p><p>以最简单的形式，<code>switch</code>语句将一个值与同一类型的一个或多个值进行比较。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">switch</span> <span class="token keyword">some</span> value to consider <span class="token punctuation">{</span>
<span class="token keyword">case</span> value <span class="token number">1</span><span class="token punctuation">:</span>
   respond to value <span class="token number">1</span>
<span class="token keyword">case</span> value <span class="token number">2</span><span class="token punctuation">,</span>
    value <span class="token number">3</span><span class="token punctuation">:</span>
   respond to value <span class="token number">2</span> or <span class="token number">3</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   otherwise<span class="token punctuation">,</span> <span class="token keyword">do</span> something <span class="token keyword">else</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个<code>switch</code>语句由多个可能的<em>大小写组成</em>，每个<code>case</code>关键字开头。除了与特定值进行比较外，Swift还为每种情况提供了几种方法来指定更复杂的匹配模式。本章后面将介绍这些选项。</p><p><code>if</code>语句的正文一样，每个<code>case</code>都是代码执行的单独分支。<code>switch</code>语句决定应该选择哪个分支。此过程被称为对正在考虑的值进行<em>切换</em>。</p><p>每个<code>switch</code>语句必须<em>详尽无遗</em>。也就是说，所考虑的类型的每个可能值都必须与其中一个<code>switch</code>情况匹配。如果为每个可能的值提供一个案例不合适，您可以定义一个默认大小写，以涵盖任何未显式处理的值。此默认情况由<code>default</code>关键字表示，并且必须始终显示在最后。</p><p>此示例使用<code>switch</code>语句来考虑单个小写字符，称为<code>someCharacter</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> someCharacter<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;z&quot;</span></span>
<span class="token keyword">switch</span> someCharacter <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The first letter of the alphabet&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The last letter of the alphabet&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Some other character&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The last letter of the alphabet&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code>语句的第一个大小写与英语字母表<code>a</code>的第一个字母匹配，其第二个大小写与最后一个字母<code>z</code>匹配。由于<code>switch</code>必须为每个可能的字符（而不仅仅是每个字母字符）有一个大小写，因此此<code>switch</code>语句使用<code>default</code>大小写来匹配<code>a</code>和<code>z</code>以外的所有字符。该条款确保了<code>switch</code>语句详尽无遗。</p><h3 id="没有隐含fallthrough" tabindex="-1"><a class="header-anchor" href="#没有隐含fallthrough" aria-hidden="true">#</a> 没有隐含Fallthrough</h3><p>与C和Objective-C中的<code>switch</code>语句不同，Swift中的<code>switch</code>语句不会默认地从每个案例的底部掉到下一个案例中。相反，整个<code>switch</code>语句在第一个匹配的<code>switch</code>案例完成后立即完成执行，而无需显式<code>break</code>语句。这使得<code>switch</code>语句比C中的交换机语句更安全、更易于使用，并避免错误地执行多个<code>switch</code>案例。</p>`,62),C=s("p",null,"注意",-1),P=s("code",null,"break",-1),A=s("code",null,"break",-1),R={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID139",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>每个案例的正文<em>必须</em>包含至少一个可执行的语句。编写以下代码无效，因为第一个案例为空：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> anotherCharacter<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span>
<span class="token keyword">switch</span> anotherCharacter <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">:</span> <span class="token comment">// Invalid, the case has an empty body</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The letter A&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not the letter A&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// This will report a compile-time error.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与C中的<code>switch</code>语句不同，此<code>switch</code>语句与<code>&quot;a&quot;</code>和<code>&quot;A&quot;</code>都不匹配。相反，它报告了一个编译时错误，<code>case&quot;a&quot;:</code>不包含任何可执行语句。这种方法避免了从一个案例到另一个案例的意外故障，并使其意图更安全的代码更加清晰。</p><p>要使用同时匹配<code>&quot;a&quot;</code>和<code>&quot;A&quot;</code>的单个大小写进行<code>switch</code>请将这两个值组合成一个复合大小写，用逗号分隔值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> anotherCharacter<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span>
<span class="token keyword">switch</span> anotherCharacter <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The letter A&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not the letter A&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The letter A&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID548",target:"_blank",rel:"noopener noreferrer"},L=s("p",null,"注意",-1),z=s("code",null,"switch",-1),F=s("code",null,"fallthrough",-1),D={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID140",target:"_blank",rel:"noopener noreferrer"},G=t(`<h3 id="间隔匹配" tabindex="-1"><a class="header-anchor" href="#间隔匹配" aria-hidden="true">#</a> 间隔匹配</h3><p><code>switch</code>情况下的值可以检查它们是否在间隔内包含。此示例使用数字间隔为任何大小的数字提供自然语言计数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> approximateCount <span class="token operator">=</span> <span class="token number">62</span>
<span class="token keyword">let</span> countedThings <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;moons orbiting Saturn&quot;</span></span>
<span class="token keyword">let</span> naturalCount<span class="token punctuation">:</span> <span class="token class-name">String</span>
<span class="token keyword">switch</span> approximateCount <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;no&quot;</span></span>
<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">5</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;a few&quot;</span></span>
<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">..&lt;</span><span class="token number">12</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;several&quot;</span></span>
<span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;dozens of&quot;</span></span>
<span class="token keyword">case</span> <span class="token number">100</span><span class="token operator">..&lt;</span><span class="token number">1000</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hundreds of&quot;</span></span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   naturalCount <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;many&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There are </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">naturalCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">countedThings</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;There are dozens of moons orbiting Saturn.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>approximateCount</code>在<code>switch</code>语句中计算。每个<code>case</code>都将该值与数字或区间进行比较。由于<code>approximateCount</code>的值在12到100之间，<code>naturalCount</code>被分配到<code>&quot;dozens</code>并从<code>switch</code>语句中转移执行。</p><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><p>您可以使用元组在同一<code>switch</code>语句中测试多个值。元组的每个元素都可以根据不同的值或值间隔进行测试。或者，使用下划线字符（<code>_</code>），也称为通配符模式，以匹配任何可能的值。</p><p>下面的示例取了一个（x，y）点，表示为类型的简单元组<code>(Int,Int)</code>并在示例后面的图表上对其进行分类。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> somePoint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> somePoint <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">somePoint</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is at the origin&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">somePoint</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is on the x-axis&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">somePoint</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is on the y-axis&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">somePoint</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is inside the box&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">somePoint</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is outside of the box&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;(1, 1) is inside the box&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://file.pandacode.cn/blog/202204051023130.png" alt="../_images/coordinateGraphSimple_2x.png" style="zoom:50%;"><p><code>switch</code>语句确定该点是在原点（0，0）、红色x轴上、绿色y轴上、以原点为中心的蓝色4乘4框内，还是在框外。</p><p>与C不同，Swift允许多个<code>switch</code>考虑相同的值。事实上，点（0，0）可以匹配本示例中的所有<em>四个</em>情况。但是，如果可以进行多次匹配，则始终使用第一个匹配案例。点（0，0）将首先匹配<code>case(0,0)</code>因此所有其他匹配情况将被忽略。</p><h3 id="价值绑定" tabindex="-1"><a class="header-anchor" href="#价值绑定" aria-hidden="true">#</a> 价值绑定</h3><p><code>switch</code>大小写可以命名其匹配的值或值，以用于临时常量或变量，以便在正文中使用。这种行为被称为<em>值绑定</em>，因为值绑定到案例正文中的临时常量或变量。</p><p>下面的示例取了一个（x，y）点，表示为类型<code>(Int,Int)</code>的元组，并将其分类如下图：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> anotherPoint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> anotherPoint <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;on the x-axis with an x value of </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">x</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">let</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;on the y-axis with a y value of </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">y</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;somewhere else at (</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">x</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">y</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;on the x-axis with an x value of 2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://file.pandacode.cn/blog/202204051024139.png" alt="../_images/coordinateGraphMedium_2x.png" style="zoom:50%;"><p><code>switch</code>语句决定了该点是在红色x轴上，还是在绿色y轴上，还是在其他地方（在两个轴上）。</p><p>这三种&#39; switch &#39;情况声明了占位符常量&#39; x &#39;和&#39; y &#39;，它们临时接受&#39; anotherPoint &#39;中的一个或两个元组值。第一种情况，&#39; case (let x, 0) &#39;，匹配任何点的&#39; y &#39;值为&#39; 0 &#39;，并将该点的&#39; x &#39;值赋给临时常数&#39; x &#39;。类似地，第二种情况，&#39; case (0, let y) &#39;，匹配任何点的&#39; x &#39;值为&#39; 0 &#39;，并将该点的&#39; y &#39;值赋给临时常数&#39; y &#39;。</p><p>声明临时常量后，它们可以在案例的代码块中使用。在这里，它们用于打印点的分类。</p><p>此<code>switch</code>语句没有<code>default</code>案例。最后一个案例，<code>caselet(x,y)</code>声明一个由两个占位符常量组成，可以匹配任何值。由于<code>anotherPoint</code>始终是两个值的元组，因此此情况与所有可能的剩余值匹配，并且不需要<code>default</code>大小写即可使<code>switch</code>语句详尽无遗。</p><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> where</h3><p><code>switch</code>盒可以使用<code>where</code>子句来检查其他条件。</p><p>以下示例对以下图表上的（x，y）点进行了分类：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> yetAnotherPoint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> yetAnotherPoint <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;(</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">x</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">y</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is on the line x == y&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">where</span> x <span class="token operator">==</span> <span class="token operator">-</span>y<span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;(</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">x</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">y</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is on the line x == -y&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;(</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">x</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">y</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is just some arbitrary point&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;(1, -1) is on the line x == -y&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://docs.swift.org/swift-book/_images/coordinateGraphComplex_2x.png" alt="../_images/coordinateGraphComplex_2x.png" style="zoom:50%;"><p>&#39; switch &#39;语句确定这个点是在绿色对角线上的&#39; x == y &#39;，还是在紫色对角线上的&#39; x == -y &#39;，或者两者都不在。</p><p>三个<code>switch</code>情况声明占位符常量<code>x</code>和<code>y</code>，这些常量暂时接受 <code>yetAnotherPoint</code>的两个元组值。这些常量被用作<code>where</code>子句的一部分，以创建动态过滤器。<code>where</code>子句的条件计算为<code>true</code>时，<code>switch</code>大小写才匹配<code>point</code>的当前值。</p><p>与上一个示例一样，最终大小写匹配所有可能的剩余值，因此不需要<code>default</code>大小写来使<code>switch</code>语句详尽无遗。</p><h3 id="复合病例" tabindex="-1"><a class="header-anchor" href="#复合病例" aria-hidden="true">#</a> 复合病例</h3><p>共享同一主体的多个开关案例可以通过在<code>case</code>后写多个模式组合，每个模式之间都有一个逗号。如果任何模式匹配，则认为情况匹配。如果列表很长，图案可以写在多行上。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> someCharacter<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;e&quot;</span></span>
<span class="token keyword">switch</span> someCharacter <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;e&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;i&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;o&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;u&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someCharacter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is a vowel&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;d&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;f&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;g&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;h&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;j&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;k&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;l&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;m&quot;</span></span><span class="token punctuation">,</span>
    <span class="token string-literal"><span class="token string">&quot;n&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;p&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;q&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;r&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;s&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;t&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;v&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;w&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someCharacter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is a consonant&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someCharacter</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> isn&#39;t a vowel or a consonant&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;e is a vowel&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code>语句的第一个大小写与英语中的所有五个小写元音相匹配。同样，它的第二个大小写匹配所有小写英语辅音。最后，<code>default</code>大小写与任何其他字符匹配。</p><p>复合情况也可以包括值绑定。复合情况的所有模式都必须包含相同的值绑定集，并且每个绑定必须从复合情况下的所有模式中获得相同类型的值。这确保了无论复合情况的哪个部分匹配，大小写正文中的代码都可以始终访问绑定的值，并且该值始终具有相同的类型。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> stillAnotherPoint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> stillAnotherPoint <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token keyword">let</span> distance<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">let</span> distance<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;On an axis, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">distance</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from the origin&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not on an axis&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;On an axis, 9 from the origin&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述<code>case</code>有两种模式：<code>(letdistance,0)</code>匹配x轴上的点，<code>(0,letdistance)</code>匹配y轴上的点。这两种模式都包括<code>distance</code>的绑定，<code>distance</code>是两种模式中的整数——这意味着<code>case</code>正文中的代码始终可以访问<code>distance</code>值。</p><h2 id="控制转移声明" tabindex="-1"><a class="header-anchor" href="#控制转移声明" aria-hidden="true">#</a> 控制转移声明</h2><p><em>控制转移语句</em>通过将控制权从一段代码传输到另一段代码来更改代码的执行顺序。Swift有五个控制转移语句：</p><ul><li><code>continue</code></li><li><code>break</code></li><li><code>fallthrough</code></li><li><code>return</code></li><li><code>throw</code></li></ul>`,38),V=s("code",null,"continue",-1),N=s("code",null,"break",-1),H=s("code",null,"fallthrough",-1),B=s("code",null,"return",-1),J={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html",target:"_blank",rel:"noopener noreferrer"},W=s("code",null,"throw",-1),E={href:"https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID510",target:"_blank",rel:"noopener noreferrer"},M=t(`<h3 id="continue" tabindex="-1"><a class="header-anchor" href="#continue" aria-hidden="true">#</a> continue</h3><p><code>continue</code>语句告诉循环停止它正在做的事情，并在下一个迭代开始时通过循环重新开始。它说“我完成了当前的循环迭代”，而没有完全离开循环。</p><p>以下示例从小写字符串中删除所有元音和空格，以创建神秘的益智短语：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> puzzleInput <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;great minds think alike&quot;</span></span>
<span class="token keyword">var</span> puzzleOutput <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span>
<span class="token keyword">let</span> charactersToRemove<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Character</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;e&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;i&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;o&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;u&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">for</span> character <span class="token keyword">in</span> puzzleInput <span class="token punctuation">{</span>
   <span class="token keyword">if</span> charactersToRemove<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">continue</span>
   <span class="token punctuation">}</span>
   puzzleOutput<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>puzzleOutput<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;grtmndsthnklk&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码每当它匹配元音或空格时都会调用<code>continue</code>关键字，导致循环的当前迭代立即结束，并直接跳转到下一个迭代的开始。</p><h3 id="break" tabindex="-1"><a class="header-anchor" href="#break" aria-hidden="true">#</a> break</h3><p><code>break</code>语句立即结束整个控制流语句的执行。当您想提前终止<code>switch</code>或循环语句的执行时，可以在<code>switch</code>或循环语句中使用。</p><h4 id="打破循环语句" tabindex="-1"><a class="header-anchor" href="#打破循环语句" aria-hidden="true">#</a> 打破循环语句</h4><p>当在循环语句中使用时，<code>break</code>会立即结束循环的执行，并在循环的关闭大括号（<code>}</code>）后将控制权传输到代码。没有执行循环当前迭代的进一步代码，也没有开始循环的进一步迭代。</p><h4 id="切换语句中的中断" tabindex="-1"><a class="header-anchor" href="#切换语句中的中断" aria-hidden="true">#</a> 切换语句中的中断</h4><p>当在<code>switch</code>语句中使用时，<code>break</code>会导致<code>switch</code>语句立即结束执行，并在<code>switch</code>语句的关闭大括号（<code>}</code>）后将控制权转移到代码中。</p><p>此行为可用于匹配和忽略<code>switch</code>语句中的一个或多个案例。由于 Swift 的<code>switch</code>语句非常详尽，不允许空案例，因此有时需要故意匹配和忽略案例，以便明确您的意图。您通过将<code>break</code>声明写成您要忽略的整个案例正文来做到这一点。当该案例与<code>switch</code>语句匹配时，案例中的<code>break</code>语句将立即结束<code>switch</code>语句的执行。</p><blockquote><p>注意</p><p>仅包含注释的<code>switch</code>案例被报告为编译时错误。评论不是陈述，也不会导致<code>switch</code>案例被忽略。务必使用<code>break</code>语句来忽略<code>switch</code>案例。</p></blockquote><p>以下示例切换<code>Character</code>值，并确定它是否代表四种语言之一的数字符号。为了简洁起，单个<code>switch</code>案例中包含多个值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> numberSymbol<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;三&quot;</span></span>  <span class="token comment">// Chinese symbol for the number 3</span>
<span class="token keyword">var</span> possibleIntegerValue<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>
<span class="token keyword">switch</span> numberSymbol <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;١&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;一&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;๑&quot;</span></span><span class="token punctuation">:</span>
   possibleIntegerValue <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;٢&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;二&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;๒&quot;</span></span><span class="token punctuation">:</span>
   possibleIntegerValue <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;٣&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;三&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;๓&quot;</span></span><span class="token punctuation">:</span>
   possibleIntegerValue <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;4&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;٤&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;四&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;๔&quot;</span></span><span class="token punctuation">:</span>
   possibleIntegerValue <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   <span class="token keyword">break</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token keyword">let</span> integerValue <span class="token operator">=</span> possibleIntegerValue <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The integer value of </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">numberSymbol</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">integerValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;An integer value couldn&#39;t be found for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">numberSymbol</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The integer value of 三 is 3.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例检查<code>numberSymbol</code>，以确定数字<code>1</code>到4的符号是拉丁文、阿拉伯文、中文还是泰语符号。如果找到匹配项，<code>switch</code>语句的一个案例会设置一个可选的<code>Int?</code>变量称为<code>possibleIntegerValue</code>到适当的整数值。</p><p>在<code>switch</code>语句完成执行后，该示例使用可选绑定来确定是否找到了值。由于是可选类型，<code>possibleIntegerValue</code>变量的隐式初始值为<code>nil</code>，因此只有当<code>possibleIntegerValue</code>被<code>switch</code>语句的前四种情况之一设置为实际值时，可选绑定才会成功。</p><p>因为在上面的例子中列出所有可能的&#39; Character &#39;值是不实际的，所以&#39; default &#39; case处理任何不匹配的字符。这种&#39; default &#39;情况不需要执行任何操作，所以它是用一个&#39; break &#39;语句作为它的主体编写的。只要匹配到&#39; default &#39;的大小写，&#39; break &#39;语句就会结束&#39; switch &#39;语句的执行，代码的执行从&#39; if let &#39;语句开始。</p><h3 id="fallthrough" tabindex="-1"><a class="header-anchor" href="#fallthrough" aria-hidden="true">#</a> fallthrough</h3><p>在 Swift 中，<code>switch</code>语句不会从每个案例的底部掉到下一个案例中。也就是说，整个<code>switch</code>语句在第一个匹配案例完成后立即完成执行。相比之下，C要求您在每个<code>switch</code>盒的末尾插入一个显式<code>break</code>语句，以防止掉线。避免默认的故障意味着Swift<code>switch</code>语句比C中的对应语句更简洁、更可预测，因此它们避免错误地执行多个<code>switch</code>案例。</p><p>如果您需要C型跌倒性行为，您可以使用<code>fallthrough</code>关键字逐案选择加入此行为。下面的示例使用<code>fallthrough</code>创建数字的文本描述。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> integerToDescribe <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The number </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">integerToDescribe</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is&quot;</span></span>
<span class="token keyword">switch</span> integerToDescribe <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">:</span>
   description <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; a prime number, and also&quot;</span></span>
   <span class="token keyword">fallthrough</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
   description <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; an integer.&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;The number 5 is a prime number, and also an integer.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例声明一个名为<code>description</code>的新<code>String</code>变量，并为其分配初始值。然后，函数使用<code>switch</code>语句考虑<code>integerToDescribe</code>的值。如果<code>integerToDescribe</code>的值是列表中的素数之一，则函数会将文本附加到<code>description</code>的末尾，以注意该数字是素数。然后，它使用<code>fallthrough</code>关键字来“落入”<code>default</code>情况。<code>default</code>情况下，在描述的末尾添加了一些额外的文本，<code>switch</code>语句已完成。</p><p>除非<code>integerToDescribe</code>的值在已知素数列表中，否则它根本不与第一个<code>switch</code>情况匹配。由于没有其他特定情况，<code>integerToDescribe</code>与<code>default</code>情况匹配。</p><p><code>switch</code>语句执行完成后，使用<code>print(_:separator:terminator:)</code>函数打印数字描述。在本例中，数字<code>5</code>被正确标识为素数。</p><blockquote><p>注意</p><p><code>fallthrough</code>关键字不会检查它导致执行陷入的<code>switch</code>案例的大小写条件。<code>fallthrough</code>关键字只是导致代码执行直接移动到下一个案例（或<code>default</code>大小写）块中的语句，就像C的标准<code>switch</code>语句行为一样。</p></blockquote><h3 id="带标签的语句" tabindex="-1"><a class="header-anchor" href="#带标签的语句" aria-hidden="true">#</a> 带标签的语句</h3><p>在Swift中，您可以在其他循环和条件语句中嵌套循环和条件语句，以创建复杂的控制流结构。然而，循环语句和条件语句都可以使用<code>break</code>语句过早地结束其执行。因此，有时明确您希望<code>break</code>语句终止哪个循环或条件语句是有用的。同样，如果您有多个嵌套循环，明确<code>continue</code>语句应该影响哪个循环可能会有用。</p><p>为了实现这些目标，您可以使用<em>声明标签</em>标记循环语句或条件语句。使用条件语句，您可以使用带有<code>break</code>语句的语句标签来结束标记语句的执行。使用循环语句，您可以使用带有<code>break</code>或<code>continue</code>语句的语句标签来结束或继续执行标记语句。</p><p>标记语句通过在与语句的介绍关键字相同的行上放置标签来指示，后跟冒号。以下是<code>while</code>循环语法的一个示例，尽管所有循环和<code>switch</code>语句的原则都是一样的：</p><ol><li><code>label name</code>: while <code>condition</code> {</li><li>​ <code>statements</code></li><li>}</li></ol><p>以下示例使用您在本章前面看到的<em>Snakes</em> and <em>Ladders</em>游戏改编版本的带有标签<code>while</code>循环的<code>break</code><em>和</em><code>continue</code>语句。这一次，游戏有一个额外的规则：</p><ul><li>要获胜，你必须<em>正好</em>降落在25号广场。</li></ul><p>如果一个特定的骰子卷会带你超过25方块，你必须再次滚动，直到你滚动落在25方块所需的确切数字。</p><p>游戏板和以前一样。</p><p><img src="https://file.pandacode.cn/blog/202204051033766.png" alt="../_images/snakesAndLadders_2x.png"></p><p><code>finalSquare</code>、<code>board</code>、<code>square</code>和<code>diceRoll</code>的值与之前相同初始化：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> finalSquare <span class="token operator">=</span> <span class="token number">25</span>
<span class="token keyword">var</span> board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> finalSquare <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
board<span class="token punctuation">[</span><span class="token number">03</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">06</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">09</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">09</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">02</span>
board<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">02</span><span class="token punctuation">;</span> board<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">08</span>
<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> diceRoll <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个版本的游戏使用<code>while</code>循环和<code>switch</code>语句来实现游戏的逻辑。<code>while</code>循环有一个名为<code>gameLoop</code>的语句标签，表示它是蛇和梯子游戏的主要游戏循环。</p><p>The <code>while</code> loop’s condition is <code>while square != finalSquare</code>, to reflect that you must land exactly on square 25.</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token label important">gameLoop</span><span class="token punctuation">:</span> <span class="token keyword">while</span> square <span class="token operator">!=</span> finalSquare <span class="token punctuation">{</span>
   diceRoll <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token keyword">if</span> diceRoll <span class="token operator">==</span> <span class="token number">7</span> <span class="token punctuation">{</span> diceRoll <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span>
   <span class="token keyword">switch</span> square <span class="token operator">+</span> diceRoll <span class="token punctuation">{</span>
   <span class="token keyword">case</span> finalSquare<span class="token punctuation">:</span>
       <span class="token comment">// diceRoll will move us to the final square, so the game is over</span>
       <span class="token keyword">break</span><span class="token label important"> gameLoop</span>
   <span class="token keyword">case</span> <span class="token keyword">let</span> newSquare <span class="token keyword">where</span> newSquare <span class="token operator">&gt;</span> finalSquare<span class="token punctuation">:</span>
       <span class="token comment">// diceRoll will move us beyond the final square, so roll again</span>
       <span class="token keyword">continue</span><span class="token label important"> gameLoop</span>
   <span class="token keyword">default</span><span class="token punctuation">:</span>
       <span class="token comment">// this is a valid move, so find out its effect</span>
       square <span class="token operator">+=</span> diceRoll
       square <span class="token operator">+=</span> board<span class="token punctuation">[</span>square<span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Game over!&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>骰子在每个循环的开头滚动。Loop不立即移动播放器，而是使用<code>switch</code>语句来考虑移动的结果，并确定是否允许移动：</p><ul><li>如果掷骰子将玩家带到最后一个方格，那么游戏就结束了。“break gamelloop”语句将控制转移到“while”循环之外的第一行代码，从而结束游戏。</li><li>如果掷骰子将玩家移出最后的方格，那么这一移动就是无效的，玩家需要再次掷骰子。“continue gameLoop”语句结束当前的“while”循环迭代，并开始下一个循环迭代。</li><li>在所有其他情况下，掷骰子是一个有效的举动。玩家通过<code>diceRoll</code>方块向前移动，游戏逻辑检查是否有任何蛇和梯子。然后循环结束，控件返回到<code>while</code>条件，以决定是否需要再次回合。</li></ul><blockquote><p>注意</p><p>如果上面的<code>break</code>语句没有使用<code>gameLoop</code>标签，它将从<code>switch</code>语句中脱颖而出，而不是<code>while</code>语句。使用<code>gameLoop</code>标签可以明确应该终止哪个控制语句。</p></blockquote><p>当调用“continue gameLoop”来跳转到循环的下一个迭代时，并不一定要使用“gameLoop”标签。游戏中只有一个循环，因此“continue”语句将影响哪个循环并不含糊。然而，在“continue”语句中使用“gameLoop”标签并没有什么坏处。这样做与标签的使用与“中断”声明是一致的，并有助于让游戏的逻辑更清晰地阅读和理解。</p><h2 id="提前退出" tabindex="-1"><a class="header-anchor" href="#提前退出" aria-hidden="true">#</a> 提前退出</h2><p><code>guard</code>语句，如<code>if</code>语句，根据表达式的布尔值执行语句。您使用<code>guard</code>语句要求条件必须为真，才能执行<code>guard</code>语句之后的代码。与<code>if</code>语句不同，<code>guard</code>语句总是有一个<code>else</code>子句——如果条件不正确，则执行<code>else</code>子句中的代码。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">guard</span> <span class="token keyword">let</span> name <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span>
   <span class="token punctuation">}</span>

   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>

   <span class="token keyword">guard</span> <span class="token keyword">let</span> location <span class="token operator">=</span> person<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I hope the weather is nice near you.&quot;</span></span><span class="token punctuation">)</span>
       <span class="token keyword">return</span>
   <span class="token punctuation">}</span>

   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I hope the weather is nice in </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello John!&quot;</span>
<span class="token comment">// Prints &quot;I hope the weather is nice near you.&quot;</span>
<span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Jane&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cupertino&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello Jane!&quot;</span>
<span class="token comment">// Prints &quot;I hope the weather is nice in Cupertino.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果满足<code>guard</code>语句的条件，则在<code>guard</code>语句的闭幕大括号后继续执行代码。使用可选绑定作为条件的一部分分配值的任何变量或常量都可用于<code>guard</code>语句中显示的代码块的其余部分。</p><p>如果不符合此条件，则执行<code>else</code>分支内的代码。该分支必须传输控件才能退出出现<code>guard</code>语句的代码块。它可以通过<code>return</code>、<code>break</code>、<code>continue</code>或<code>throw</code>等控件传输语句来执行此操作，也可以调用不返回的函数或方法，例如<code>fatalError(_:file:line:)</code></p><p>与对<code>if</code>语句进行相同的检查相比，对需求使用<code>guard</code>语句可以提高代码的可读性。它允许您编写通常执行的代码，而无需将其包装在<code>else</code>块中，并允许您将处理违反要求的代码保留在需求旁边。</p><h2 id="检查api可用性" tabindex="-1"><a class="header-anchor" href="#检查api可用性" aria-hidden="true">#</a> 检查API可用性</h2><p>Swift内置了对检查API可用性的支持，这确保您不会意外使用给定部署目标上不可用的API。</p><p>编译器使用SDK中的可用性信息来验证代码中使用的所有API是否在项目指定的部署目标上可用。如果您尝试使用不可用的API，Swift会在编译时报告错误。</p><p>您在<code>if</code>或<code>guard</code>语句中使用<em>可用性条件</em>执行代码块，具体取决于您要使用的API在运行时是否可用。编译器在验证该代码块中的API是否可用时，使用可用性条件中的信息。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token other-directive property">#available</span><span class="token punctuation">(</span>iOS <span class="token number">10</span><span class="token punctuation">,</span> macOS <span class="token number">10.12</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token comment">// Fall back to earlier iOS and macOS APIs</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述可用性条件指定，在iOS中，<code>if</code>语句的正文仅在iOS 10及更高版本中执行；在macOS中，仅在macOS 10.12及更高版本中执行。最后一个参数<code>*</code>是必需的，并指定在任何其他平台上，<code>if</code>的正文对目标指定的最小部署目标执行。</p>`,57),j={href:"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID348",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token other-directive property">#available</span><span class="token punctuation">(</span>platform name version<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   statements to execute <span class="token keyword">if</span> the <span class="token class-name">APIs</span> are available
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   fallback statements to execute <span class="token keyword">if</span> the <span class="token class-name">APIs</span> are unavailable
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function K(Q,X){const a=p("ExternalLinkIcon");return c(),i("div",null,[r,s("p",null,[d,n("的内容本质上是无序的，迭代它们并不能保证检索它们的顺序。特别是，您在"),k,n("中插入项目的顺序并不能定义它们迭代的顺序。有关数组和字典的更多信息，请参阅"),s("a",m,[n("集合类型"),e(a)]),n("。")]),v,s("p",null,[n("在某些情况下，您可能不想使用闭合范围，包括两个端点。考虑在表盘上每分钟绘制刻度。你想画"),b,n("勾号，从"),g,n("分钟开始。使用半开范围运算符（"),h,n("）包括下界，但不包括上界。有关范围的更多信息，请参阅"),s("a",w,[n("范围操作员"),e(a)]),n("。")]),f,s("p",null,[n("上面的示例使用"),q,n("-"),y,n("循环来迭代范围、数组、字典和字符串。但是，您可以使用此语法迭代"),x,n("集合，包括您自己的类和集合类型，只要这些类型符合"),s("a",_,[I,e(a)]),n("协议。")]),S,s("blockquote",null,[C,s("p",null,[n("虽然 Swift 中不需要"),P,n("，但您可以使用"),A,n("语句来匹配和忽略特定案例，或者在案例完成执行之前打破匹配的案例。有关详细信息，请参阅"),s("a",R,[n("切换语句中的断裂"),e(a)]),n("。")])]),O,s("p",null,[n("为了可读性，复合情况也可以写在多行上。有关复合病例的更多信息，请参阅"),s("a",T,[n("复合案例"),e(a)]),n("。")]),s("blockquote",null,[L,s("p",null,[n("要在特定"),z,n("大小写的末尾显式掉线，请使用"),F,n("关键字，如"),s("a",D,[n("Fallthrough"),e(a)]),n("中所述。")])]),G,s("p",null,[V,n("、"),N,n("和"),H,n("的陈述如下所述。"),B,n("语句在"),s("a",J,[n("函数"),e(a)]),n("中描述，"),W,n("语句在"),s("a",E,[n("使用抛出函数传播错误"),e(a)]),n("中描述。")]),M,s("p",null,[n("在其一般形式中，可用性条件接受平台名称和版本列表。您可以使用平台名称，如' iOS '， ' macOS '， ' watchOS '和' tvOS ' -完整的列表，请参阅"),s("a",j,[n("声明属性"),e(a)]),n("。除了指定主要版本号(如iOS 8或macOS 10.10)外，还可以指定次要版本号(如iOS 11.2.6和macOS 10.13.3)。")]),U])}const Z=o(u,[["render",K],["__file","14.swift-control-flow.html.vue"]]);export{Z as default};
