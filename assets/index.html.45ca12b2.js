import{_ as e,r as o,o as p,c,a,b as n,d as t,e as l}from"./app.4659d0e0.js";const i={},r=a("h1",{id:"react框架-router",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#react框架-router","aria-hidden":"true"},"#"),n(" React框架 - Router")],-1),u={href:"https://reactrouter.com/docs/en/v6",target:"_blank",rel:"noopener noreferrer"},d=a("p",null,"react-router-dom为针对web开发的组件库。",-1),k=l(`<h2 id="_1-v6-版本" tabindex="-1"><a class="header-anchor" href="#_1-v6-版本" aria-hidden="true">#</a> 1. v6 版本</h2><h3 id="_1-1-版本更新内容" tabindex="-1"><a class="header-anchor" href="#_1-1-版本更新内容" aria-hidden="true">#</a> 1.1. 版本更新内容</h3><blockquote><p>推出了很多好用hooks，但是路由组件内props的三个实用属性去掉了。 = =</p></blockquote><ol><li><code>&lt;Switch&gt;</code>重命名为<code>&lt;Routes&gt;</code>。</li><li><code>&lt;Route&gt;</code>的新特性变更。</li><li>嵌套路由变得更简单。</li><li>用<code>useNavigate</code>代替<code>useHistory</code>。</li><li>新钩子<code>useRoutes</code>代替<code>react-router-config</code>。</li><li>大小减少：从<code>20kb</code>到<code>8kb</code></li></ol><h3 id="_1-2-常用路由组件和hooks" tabindex="-1"><a class="header-anchor" href="#_1-2-常用路由组件和hooks" aria-hidden="true">#</a> 1.2. 常用路由组件和hooks</h3><table><thead><tr><th>组件名</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;Routers&gt;</code></td><td>一组路由</td><td>代替原有<code>&lt;Switch&gt;</code>，所有子路由都用基础的Router children来表示</td></tr><tr><td><code>&lt;Router&gt;</code></td><td>基础路由</td><td>Router是可以嵌套的，解决原有V5中严格模式，后面与V5区别会详细介绍</td></tr><tr><td><code>&lt;Link&gt;</code></td><td>导航组件</td><td>在实际页面中跳转使用</td></tr><tr><td><code>&lt;Outlet/&gt;</code></td><td>自适应渲染组件</td><td>根据实际路由url自动选择组件</td></tr></tbody></table><table><thead><tr><th>hooks名</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>useParams</code></td><td>返回当前参数</td><td>根据路径读取参数</td></tr><tr><td><code>useNavigate</code></td><td>返回当前路由</td><td>代替原有V5中的 useHistory</td></tr><tr><td><code>useOutlet</code></td><td>返回根据路由生成的element</td><td></td></tr><tr><td><code>useLocation</code></td><td>返回当前的location 对象</td><td></td></tr><tr><td><code>useRoutes</code></td><td>同Routers组件一样，只不过是在js中使用</td><td></td></tr><tr><td><code>useSearchParams</code></td><td>用来匹配URL中?后面的搜索参数</td><td></td></tr></tbody></table><h3 id="_1-2-路由的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-2-路由的基本使用" aria-hidden="true">#</a> 1.2. 路由的基本使用</h3><ol><li>导航，使用Link标签。<code>&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;</code></li><li>路由Routes与Route搭配使用。</li></ol><blockquote><p>element直接写入组件，可以传入props。</p></blockquote><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-嵌套路由" tabindex="-1"><a class="header-anchor" href="#_1-3-嵌套路由" aria-hidden="true">#</a> 1.3. 嵌套路由</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">index</span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>teams<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Teams</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>:teamId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>new<span class="token punctuation">&quot;</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NewTeamForm</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">index</span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LeagueStandings</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-outlet" tabindex="-1"><a class="header-anchor" href="#_1-4-outlet" aria-hidden="true">#</a> 1.4. Outlet</h3><p><code>&lt;Outlet/&gt;</code>根据定义的不同路由参数进行渲染组件。</p><h2 id="_2-v5-版本" tabindex="-1"><a class="header-anchor" href="#_2-v5-版本" aria-hidden="true">#</a> 2. v5 版本</h2><h3 id="_2-1-路由的基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-路由的基本使用" aria-hidden="true">#</a> 2.1. 路由的基本使用</h3><p>​ 1.明确好界面中的导航区、展示区 ​ 2.导航区的a标签改为Link标签 ​ <code>&lt;Link to=&quot;/xxxxx&quot;&gt;Demo&lt;/Link&gt;</code> ​ 3.展示区写Route标签进行路径的匹配 ​ <code>&lt;Route path=&#39;/xxxx&#39; component={Demo}/&gt;</code> ​ 4.<code>&lt;App&gt;</code>的最外侧包裹了一个<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code></p><h3 id="_2-2-路由组件与一般组件" tabindex="-1"><a class="header-anchor" href="#_2-2-路由组件与一般组件" aria-hidden="true">#</a> 2.2. 路由组件与一般组件</h3><p>​ 1.写法不同： ​ 一般组件：<code>&lt;Demo/&gt;</code> ​ 路由组件：<code>&lt;Route path=&quot;/demo&quot; component={Demo}/&gt;</code> ​ 2.存放位置不同： ​ 一般组件：components ​ 路由组件：pages ​ 3.接收到的props不同： ​ 一般组件：写组件标签时传递了什么，就能收到什么 ​ 路由组件：接收到三个固定的属性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>history:
	go: ƒ go(n)
	goBack: ƒ goBack()
	goForward: ƒ goForward()
	push: ƒ push(path, state)
	replace: ƒ replace(path, state)
location:
	pathname: &quot;/about&quot;
	search: &quot;&quot;
	state: undefined
match:
	params: {}
	path: &quot;/about&quot;
	url: &quot;/about&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-navlink与封装navlink" tabindex="-1"><a class="header-anchor" href="#_2-3-navlink与封装navlink" aria-hidden="true">#</a> 2.3. NavLink与封装NavLink</h3><p>​ 1.NavLink可以实现路由链接的高亮，通过activeClassName指定样式名</p><h3 id="_2-4-switch的使用" tabindex="-1"><a class="header-anchor" href="#_2-4-switch的使用" aria-hidden="true">#</a> 2.4. Switch的使用</h3><p>​ 1.通常情况下，path和component是一一对应的关系。 ​ 2.Switch可以提高路由匹配效率(单一匹配)。</p><h3 id="_2-5-解决多级路径刷新页面样式丢失的问题" tabindex="-1"><a class="header-anchor" href="#_2-5-解决多级路径刷新页面样式丢失的问题" aria-hidden="true">#</a> 2.5. 解决多级路径刷新页面样式丢失的问题</h3><p>​ 1.public/index.html 中 引入样式时不写 ./ 写 / （常用） ​ 2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用） ​ 3.使用HashRouter</p><h3 id="_2-6-路由的严格匹配与模糊匹配" tabindex="-1"><a class="header-anchor" href="#_2-6-路由的严格匹配与模糊匹配" aria-hidden="true">#</a> 2.6. 路由的严格匹配与模糊匹配</h3><p>​ 1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致） ​ 2.开启严格匹配：<code>&lt;Route exact={true} path=&quot;/about&quot; component={About}/&gt;</code> ​ 3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p><h3 id="_2-7-redirect的使用" tabindex="-1"><a class="header-anchor" href="#_2-7-redirect的使用" aria-hidden="true">#</a> 2.7. Redirect的使用</h3><p>​ 1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由 ​ 2.具体编码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Switch<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><h3 id="_2-8-嵌套路由" tabindex="-1"><a class="header-anchor" href="#_2-8-嵌套路由" aria-hidden="true">#</a> 2.8. 嵌套路由</h3><p>​ 1.注册子路由时要写上父路由的path值 ​ 2.路由的匹配是按照注册路由的顺序进行的</p><h3 id="_2-9-向路由组件传递参数" tabindex="-1"><a class="header-anchor" href="#_2-9-向路由组件传递参数" aria-hidden="true">#</a> 2.9. 向路由组件传递参数</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.params参数
	路由链接(携带参数)：&lt;Link to=&#39;/demo/test/tom/18&#39;}&gt;详情&lt;/Link&gt;
	注册路由(声明接收)：&lt;Route path=&quot;/demo/test/:name/:age&quot; component={Test}/&gt;
	接收参数：this.props.match.params
2.search参数
  路由链接(携带参数)：&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;}&gt;详情&lt;/Link&gt;
  注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component={Test}/&gt;
  接收参数：this.props.location.search
  备注：获取到的search是urlencoded编码字符串，需要借助querystring解析
3.state参数
  路由链接(携带参数)：&lt;Link to={{pathname:&#39;/demo/test&#39;,state:{name:&#39;tom&#39;,age:18}}}&gt;详情&lt;/Link&gt;
  注册路由(无需声明，正常注册即可)：&lt;Route path=&quot;/demo/test&quot; component={Test}/&gt;
  接收参数：this.props.location.state
  备注：刷新也可以保留住参数        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-10-编程式路由导航" tabindex="-1"><a class="header-anchor" href="#_2-10-编程式路由导航" aria-hidden="true">#</a> 2.10. 编程式路由导航</h3><p>​ 借助this.prosp.history对象上的API对操作路由跳转、前进、后退</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-this.prosp.history.push()
-this.prosp.history.replace()
-this.prosp.history.goBack()
-this.prosp.history.goForward()
-this.prosp.history.go()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-11-browserrouter与hashrouter的区别" tabindex="-1"><a class="header-anchor" href="#_2-11-browserrouter与hashrouter的区别" aria-hidden="true">#</a> 2.11. BrowserRouter与HashRouter的区别</h3><p>​ 1.底层原理不一样： ​ BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。 ​ HashRouter使用的是URL的哈希值。 ​ 2.path表现形式不一样 ​ BrowserRouter的路径中没有#,例如：localhost:3000/demo/test ​ HashRouter的路径包含#,例如：localhost:3000/#/demo/test ​ 3.刷新后对路由state参数的影响 ​ (1).BrowserRouter没有任何影响，因为state保存在history对象中。 ​ (2).HashRouter刷新后会导致路由state参数的丢失！！！ ​ 4.备注：HashRouter可以用于解决一些路径错误相关的问题。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,43),h={href:"https://atguigu.com",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7033313711947251743#heading-2",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/weixin_40906515/article/details/104957712",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7025418839454122015",target:"_blank",rel:"noopener noreferrer"};function b(x,_){const s=o("ExternalLinkIcon");return p(),c("div",null,[r,a("blockquote",null,[a("p",null,[n("前往 "),a("a",u,[n("React Router V6 官方文档"),t(s)])]),d]),k,a("ul",null,[a("li",null,[a("a",h,[n("尚硅谷"),t(s)])]),a("li",null,[a("a",m,[n("React-Router V6 使用详解(干货)"),t(s)])]),a("li",null,[a("a",g,[n("React-Router v6 新特性解读及迁移指南"),t(s)])]),a("li",null,[a("a",v,[n("什么，React Router已经到V6了 ？？"),t(s)])])])])}const q=e(i,[["render",b],["__file","index.html.vue"]]);export{q as default};
