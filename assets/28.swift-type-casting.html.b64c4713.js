import{_ as t,r as l,o as d,c,a as e,b as o,d as n,e as a}from"./app.4659d0e0.js";const s={},r=e("h1",{id:"swift基础-类型铸造",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#swift基础-类型铸造","aria-hidden":"true"},"#"),o(" Swift基础 - 类型铸造")],-1),u=e("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html",-1),p=e("p",null,[e("em",null,"类型转换"),o("是一种检查实例类型的方法，或将该实例视为与自身类层次结构中其他地方不同的超类或子类。")],-1),m=e("p",null,[o("Swift中的类型转换是用"),e("code",null,"is``as"),o("运算符实现的。这两个运算符提供了一种简单而富有表现力的方式来检查值的类型或将值转换为其他类型。")],-1),h={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID283",target:"_blank",rel:"noopener noreferrer"},g=a('<h2 id="定义类型铸造的类层次结构" tabindex="-1"><a class="header-anchor" href="#定义类型铸造的类层次结构" aria-hidden="true">#</a> 定义类型铸造的类层次结构</h2><p>您可以使用带有类和子类层次结构的类型转换来检查特定类实例的类型，并将该实例转换为同一层次结构中的另一个类。下面的三个代码片段定义了类的层次结构和包含这些类实例的数组，用于类型转换示例。</p><p>第一个片段定义了一个名为<code>MediaItem</code>的新基类。该类为数字媒体库中出现的任何类型的项目提供基本功能。具体来说，它声明<code>String</code>类型的<code>name</code>属性和<code>initname</code>初始化器。（假设所有媒体项目，包括所有电影和歌曲，都将有一个名称。）</p><ol><li>class MediaItem {</li><li>​ var name: String</li><li>​ init(name: String) {</li><li>​ self.name = name</li><li>​ }</li><li>}</li></ol><p>下一个片段定义了<code>MediaItem</code>的两个子类。第一个子类“<code>Movie</code>会封装有关某部或某部电影的其他信息。它在基础<code>MediaItem</code>类之上添加了一个<code>director</code>属性，并带有相应的初始化器。第二个子类<code>Song</code>在基类之上添加了<code>artist</code>属性和初始化器：</p><ol><li>class Movie: MediaItem {</li><li>​ var director: String</li><li>​ init(name: String, director: String) {</li><li>​ self.director = director</li><li>​ super.init(name: name)</li><li>​ }</li><li>}</li><li></li><li>class Song: MediaItem {</li><li>​ var artist: String</li><li>​ init(name: String, artist: String) {</li><li>​ self.artist = artist</li><li>​ super.init(name: name)</li><li>​ }</li><li>}</li></ol><p>最后一个片段创建一个名为<code>library</code>的常量数组，其中包含两个<code>Movie</code>实例和三个<code>Song</code>实例。通过使用数组文字的内容初始化库数组来推断<code>library</code>数组的类型。Swift的类型检查器能够推断<code>Movie</code>和<code>Song</code>具有常见的<code>MediaItem</code>超类，因此它推断出库数组的<code>[MediaItem]</code>类型：</p><ol><li>let library = [</li><li>​ Movie(name: &quot;Casablanca&quot;, director: &quot;Michael Curtiz&quot;),</li><li>​ Song(name: &quot;Blue Suede Shoes&quot;, artist: &quot;Elvis Presley&quot;),</li><li>​ Movie(name: &quot;Citizen Kane&quot;, director: &quot;Orson Welles&quot;),</li><li>​ Song(name: &quot;The One And Only&quot;, artist: &quot;Chesney Hawkes&quot;),</li><li>​ Song(name: &quot;Never Gonna Give You Up&quot;, artist: &quot;Rick Astley&quot;)</li><li>]</li><li>// the type of &quot;library&quot; is inferred to be [MediaItem]</li></ol><p>存储在<code>library</code>中的项目仍然是幕后<code>Movie</code>和<code>Song</code>实例。但是，如果您迭代此数组的内容，则您收到的项目被键入为<code>MediaItem</code>，而不是<code>Movie</code>或<code>Song</code>。为了将他们作为他们的原生类型，您需要<em>检查</em>他们的类型，或将他们<em>降</em>为其他类型，如下所述。</p><h2 id="检查类型" tabindex="-1"><a class="header-anchor" href="#检查类型" aria-hidden="true">#</a> 检查类型</h2><p>使用<em>类型检查运算符</em>（<code>is</code>）来检查实例是否属于特定子类类型。如果实例属于该子类类型，类型检查运算符返回<code>true</code>，如果不是该子类类型，则返回<code>false</code>。</p><p>以下示例定义了两个变量，<code>movieCount</code>和<code>songCount</code>，它们计算<code>library</code>数组中的<code>Movie</code>和<code>Song</code>实例数量：</p><ol><li>var movieCount = 0</li><li>var songCount = 0</li><li></li><li>for item in library {</li><li>​ if item is Movie {</li><li>​ movieCount += 1</li><li>​ } else if item is Song {</li><li>​ songCount += 1</li><li>​ }</li><li>}</li><li></li><li>print(&quot;Media library contains (movieCount) movies and (songCount) songs&quot;)</li><li>// Prints &quot;Media library contains 2 movies and 3 songs&quot;</li></ol><p>此示例迭代<code>library</code>数组中的所有项目。在每次传递中，<code>for</code>-<code>in</code>循环将<code>item</code>常量设置为数组中的下一个<code>MediaItem</code>。</p><p><code>item is Movie</code>如果当前<code>MediaItem</code>是<code>Movie</code>实例，则返回<code>true</code>，如果不是，则返回<code>false</code>。同样，<code>itemisSong</code>，检查项目是否是<code>Song</code>实例。在<code>for</code>-<code>in</code>循环的末尾，<code>movieCount</code>和<code>songCount</code>的值包含每种类型的<code>MediaItem</code>实例数量。</p><h2 id="压倒" tabindex="-1"><a class="header-anchor" href="#压倒" aria-hidden="true">#</a> 压倒</h2><p>特定类类型的常量或变量实际上可能指幕后子类的实例。如果您认为情况就是这样，您可以尝试使用<em>类型转换运算符**降</em>到子类类型（<code>as?</code>或者<code>as!</code>）。</p><p>由于下调可能会失败，类型转换运算符有两种不同的形式。条件形式<code>as?</code>返回您试图向下转换的类型的可选值。强迫形式，<code>as!</code>，尝试压倒和强迫将结果包装为单个复合动作。</p><p>使用类型转换运算符的条件形式（<code>as?</code>）当你不确定沮丧的人是否会成功时。这种形式的运算符将始终返回一个可选值，如果无法进行向下转换，该值将为<code>nil</code>。这使您能够检查是否成功下调。</p><p>使用类型转换运算符的强制形式（<code>as!</code>）只有当你确信沮丧的人会永远成功的时候。如果您尝试将这种形式的运算符降到错误的类类型，将触发运行时错误。</p><p>以下示例对<code>library</code>中的每个<code>MediaItem</code>迭代，并为每个项目打印适当的描述。要做到这一点，它需要将每个项目作为真正的<code>Movie</code>或<code>Song</code>访问，而不仅仅是作为<code>MediaItem</code>。这是必要的，这样它才能访问<code>Movie</code>或<code>Song</code>的<code>director</code>或<code>artist</code>属性，以便在描述中使用。</p><p>在本例中，数组中的每个项目可能是<code>Movie</code>，也可能是<code>Song</code>。您事先不知道每个项目应使用哪个实际类，因此使用类型转换运算符的条件形式是合适的（<code>as?</code>）每次通过循环检查降压：</p><ol><li>for item in library {</li><li>​ if let movie = item as? Movie {</li><li>​ print(&quot;Movie: (movie.name), dir. (movie.director)&quot;)</li><li>​ } else if let song = item as? Song {</li><li>​ print(&quot;Song: (song.name), by (song.artist)&quot;)</li><li>​ }</li><li>}</li><li></li><li>// Movie: Casablanca, dir. Michael Curtiz</li><li>// Song: Blue Suede Shoes, by Elvis Presley</li><li>// Movie: Citizen Kane, dir. Orson Welles</li><li>// Song: The One And Only, by Chesney Hawkes</li><li>// Song: Never Gonna Give You Up, by Rick Astley</li></ol><p>该示例首先尝试将当前<code>item</code>降为<code>Movie</code>。因为<code>item</code>是<code>MediaItem</code>实例，所以它可能是一部<code>Movie</code>；同样，它也可能是一首<code>Song</code>，甚至只是一个基本的<code>MediaItem</code>。因为这种不确定性，<code>as?</code>当尝试将类型转换为子类类型时，类型转换运算符的形式返回一个<em>可选</em>值。<code>item</code>的结果<code>as?Movie</code>类型为<code>Movie?</code>，或“可选<code>Movie</code>”。</p><p>当应用于库数组中<code>Song</code>实例时，将向下转换到<code>Movie</code>失败。为了应对这种情况，上面的示例使用可选绑定来检查可选<code>Movie</code>是否真的包含一个值（即找出被关闭的版本是否成功）。这个可选绑定写为“<code>ifletmovie=itemas?Movie</code>”，可以读作：</p><p>“尝试将<code>item</code>作为<code>Movie</code>访问。如果成功，请将名为<code>movie</code>的新临时常量设置为存储在返回的可选<code>Movie</code>中的值。”</p><p>如果压制成功，则使用<code>movie</code>的属性来打印该<code>Movie</code>实例的描述，包括其<code>director</code>的姓名。类似的原则用于检查<code>Song</code>实例，并在库中找到<code>Song</code>时打印适当的描述（包括<code>artist</code>姓名）。</p><p>注意</p><p>铸造实际上不会修改实例或更改其值。基础实例保持不变；它只是作为其被转换到的类型的实例进行处理和访问。</p><h2 id="任何和anyobject的类型铸造" tabindex="-1"><a class="header-anchor" href="#任何和anyobject的类型铸造" aria-hidden="true">#</a> 任何和AnyObject的类型铸造</h2><p>Swift 提供了两种特殊类型，用于处理非特定类型：</p><ul><li><code>Any</code>可以表示任何类型的实例，包括函数类型。</li><li><code>AnyObject</code>可以表示任何类类型的实例。</li></ul><p>仅当您明确需要它们提供的行为和功能时，才使用<code>Any</code>和<code>AnyObject</code>。最好具体说明您希望在代码中使用的类型。</p><p>以下是使用<code>Any</code>处理不同类型组合的示例，包括函数类型和非类类型。该示例创建一个名为<code>things</code>的数组，可以存储类型为<code>Any</code>的值：</p><ol><li>var things: [Any] = []</li><li></li><li>things.append(0)</li><li>things.append(0.0)</li><li>things.append(42)</li><li>things.append(3.14159)</li><li>things.append(&quot;hello&quot;)</li><li>things.append((3.0, 5.0))</li><li>things.append(Movie(name: &quot;Ghostbusters&quot;, director: &quot;Ivan Reitman&quot;))</li><li>things.append({ (name: String) -&gt; String in &quot;Hello, (name)&quot; })</li></ol><p><code>things</code>数组包含两个<code>Int</code>值、两个<code>Double</code>值、一个<code>String</code>值、一个类型的元组<code>(Double,Double)</code>电影“Ghostbusters”和一个接受<code>String</code>值并返回另一个<code>String</code>值的闭包表达式。</p><p>To discover the specific type of a constant or variable that’s known only to be of type <code>Any</code> or <code>AnyObject</code>, you can use an <code>is</code> or <code>as</code> pattern in a <code>switch</code> statement’s cases. The example below iterates over the items in the <code>things</code> array and queries the type of each item with a <code>switch</code> statement. Several of the <code>switch</code> statement’s cases bind their matched value to a constant of the specified type to enable its value to be printed:</p><ol><li>for thing in things {</li><li>​ switch thing {</li><li>​ case 0 as Int:</li><li>​ print(&quot;zero as an Int&quot;)</li><li>​ case 0 as Double:</li><li>​ print(&quot;zero as a Double&quot;)</li><li>​ case let someInt as Int:</li><li>​ print(&quot;an integer value of (someInt)&quot;)</li><li>​ case let someDouble as Double where someDouble &gt; 0:</li><li>​ print(&quot;a positive double value of (someDouble)&quot;)</li><li>​ case is Double:</li><li>​ print(&quot;some other double value that I don&#39;t want to print&quot;)</li><li>​ case let someString as String:</li><li>​ print(&quot;a string value of &quot;(someString)&quot;&quot;)</li><li>​ case let (x, y) as (Double, Double):</li><li>​ print(&quot;an (x, y) point at (x), (y)&quot;)</li><li>​ case let movie as Movie:</li><li>​ print(&quot;a movie called (movie.name), dir. (movie.director)&quot;)</li><li>​ case let stringConverter as (String) -&gt; String:</li><li>​ print(stringConverter(&quot;Michael&quot;))</li><li>​ default:</li><li>​ print(&quot;something else&quot;)</li><li>​ }</li><li>}</li><li></li><li>// zero as an Int</li><li>// zero as a Double</li><li>// an integer value of 42</li><li>// a positive double value of 3.14159</li><li>// a string value of &quot;hello&quot;</li><li>// an (x, y) point at 3.0, 5.0</li><li>// a movie called Ghostbusters, dir. Ivan Reitman</li><li>// Hello, Michael</li></ol><p>注意</p><p><code>Any</code>类型表示任何类型的值，包括可选类型。如果您使用可选值，其中需要<code>Any</code>类型的值，Swift会向您发出警告。如果您确实需要将可选值用作Any值，您可以使用<code>as</code>运算符将可选值显式转换为<code>Any</code>，如下所示。</p><ol><li>let optionalNumber: Int? = 3</li><li>things.append(optionalNumber) // Warning</li><li>things.append(optionalNumber as Any) // No warning</li></ol>',41);function v(q,b){const i=l("ExternalLinkIcon");return d(),c("div",null,[r,u,p,m,e("p",null,[o("您还可以使用类型转换来检查类型是否符合协议，如"),e("a",h,[o("“检查协议一致性"),n(i)]),o("”中所述。")]),g])}const y=t(s,[["render",v],["__file","28.swift-type-casting.html.vue"]]);export{y as default};
