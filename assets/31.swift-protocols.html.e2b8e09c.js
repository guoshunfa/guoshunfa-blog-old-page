import{_ as c,r as d,o as a,c as r,a as o,b as e,d as l,e as t}from"./app.4659d0e0.js";const n={},s=t('<h1 id="swift基础-协议" tabindex="-1"><a class="header-anchor" href="#swift基础-协议" aria-hidden="true">#</a> Swift基础 - 协议</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</p><p><em>协议</em>定义了适合特定任务或功能的方法、属性和其他要求的蓝图。然后，该协议可以由类、结构或枚举<em>采用</em>，以提供这些要求的实际实现。任何满足协议要求的类型都被称为<em>符合</em>该协议。</p><p>除了指定符合类型必须实现的要求外，您还可以扩展协议来实现其中一些需求或实现符合类型可以利用的其他功能。</p><h2 id="协议语法" tabindex="-1"><a class="header-anchor" href="#协议语法" aria-hidden="true">#</a> 协议语法</h2><p>您以与类、结构和枚举非常相似的方式定义协议：</p><ol><li>protocol SomeProtocol {</li><li>​ // protocol definition goes here</li><li>}</li></ol><p>自定义类型声明，他们采用特定协议，将协议的名称放在类型名称之后，用冒号分隔，作为其定义的一部分。可以列出多个协议，并用逗号分隔：</p><ol><li>struct SomeStructure: FirstProtocol, AnotherProtocol {</li><li>​ // structure definition goes here</li><li>}</li></ol><p>如果一个类有一个超类，请在它采用的任何协议之前列出超类名称，后跟逗号：</p><ol><li>class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {</li><li>​ // class definition goes here</li><li>}</li></ol><h2 id="财产要求" tabindex="-1"><a class="header-anchor" href="#财产要求" aria-hidden="true">#</a> 财产要求</h2><p>协议可以要求任何符合要求的类型为实例属性或类型属性提供特定名称和类型。该协议没有指定该属性是存储属性还是计算属性，它只指定所需的属性名称和类型。该协议还指定每个属性必须是可获取的还是可获取<em>和</em>可设置的。</p><p>如果协议要求属性可获取和可设置，则该属性要求无法由常量存储属性或只读计算属性满足。如果协议仅要求属性是可获取的，则任何类型的属性都可以满足该要求，如果这对您自己的代码有用，则该属性也可以设置。</p><p>Property requirements are always declared as variable properties, prefixed with the <code>var</code>keyword. Gettable and settable properties are indicated by writing <code>{ get set }</code> after their type declaration, and gettable properties are indicated by writing <code>{ get }</code>.</p><ol><li>protocol SomeProtocol {</li><li>​ var mustBeSettable: Int { get set }</li><li>​ var doesNotNeedToBeSettable: Int { get }</li><li>}</li></ol><p>在协议中定义类型属性要求时，请务必用静态关键字作为类型属性要求前缀。即使类型属性要求在类实现时可以以<code>class</code>或静态关键字为前缀，但此规则也适用：</p><ol><li>protocol AnotherProtocol {</li><li>​ static var someTypeProperty: Int { get set }</li><li>}</li></ol><p>以下是具有单个实例属性要求的协议示例：</p><ol><li>protocol FullyNamed {</li><li>​ var fullName: String { get }</li><li>}</li></ol><p><code>FullyNamed</code>协议要求符合要求的类型来提供完全限定的名称。该协议没有指定任何关于符合类型性质的任何其他信息——它只指定该类型必须能够为自己提供全名。该协议规定，任何<code>FullyNamed</code>类型都必须有一个名为<code>fullName</code>的gettable实例属性，该属性类型为<code>String</code>。</p><p>以下是采用并符合<code>FullyNamed</code>协议的简单结构示例：</p><ol><li>struct Person: FullyNamed {</li><li>​ var fullName: String</li><li>}</li><li>let john = Person(fullName: &quot;John Appleseed&quot;)</li><li>// john.fullName is &quot;John Appleseed&quot;</li></ol><p>此示例定义了一个名为<code>Person</code>结构，该结构表示一个特定的命名人。它表示，它采用<code>FullyNamed</code>协议作为其定义第一行的一部分。</p><p>Each instance of <code>Person</code> has a single stored property called <code>fullName</code>, which is of type <code>String</code>. This matches the single requirement of the <code>FullyNamed</code> protocol, and means that <code>Person</code> has correctly conformed to the protocol. (Swift reports an error at compile time if a protocol requirement isn’t fulfilled.)</p><p>这里有一个更复杂的类，它也采用并符合<code>FullyNamed</code>协议：</p><ol><li>class Starship: FullyNamed {</li><li>​ var prefix: String?</li><li>​ var name: String</li><li>​ init(name: String, prefix: String? = nil) {</li><li>​ self.name = name</li><li>​ self.prefix = prefix</li><li>​ }</li><li>​ var fullName: String {</li><li>​ return (prefix != nil ? prefix! + &quot; &quot; : &quot;&quot;) + name</li><li>​ }</li><li>}</li><li>var ncc1701 = Starship(name: &quot;Enterprise&quot;, prefix: &quot;USS&quot;)</li><li>// ncc1701.fullName is &quot;USS Enterprise&quot;</li></ol><p>该类实现<code>fullName</code>属性要求，作为星际飞船的计算只读属性。每个<code>Starship</code>类实例都存储一个必填<code>name</code>和一个可选<code>prefix</code>。如果存在，<code>fullName</code>属性使用<code>prefix</code>值，并将其前置于<code>name</code>开头，为星舰创建全名。</p><h2 id="方法要求" tabindex="-1"><a class="header-anchor" href="#方法要求" aria-hidden="true">#</a> 方法要求</h2><p>协议可以要求通过符合类型实现特定的实例方法和类型方法。这些方法作为协议定义的一部分，以与普通实例和类型方法完全相同的方式编写，但没有花括号或方法主体。允许变量参数，但须遵守与正常方法相同的规则。然而，无法为协议定义中的方法参数指定默认值。</p><p>与类型属性要求一样，当在协议中定义<code>static</code>关键字时，您总是在类型方法要求前加上静态关键字。即使类型方法要求在类实现时以<code>class</code>或静态关键字为前缀，也是如此：</p><ol><li>protocol SomeProtocol {</li><li>​ static func someTypeMethod()</li><li>}</li></ol><p>以下示例定义了具有单个实例方法要求的协议：</p><ol><li>protocol RandomNumberGenerator {</li><li>​ func random() -&gt; Double</li><li>}</li></ol><p>该协议<code>RandomNumberGenerator</code>要求任何符合要求的类型都有一个名为<code>random</code>实例方法，该方法在调用时返回一个<code>Double</code>值。虽然它没有指定为协议的一部分，但假设这个值将从<code>0.0</code>到（但不包括）<code>1.0</code>。</p><p><code>RandomNumberGenerator</code>协议不会对如何生成每个随机数做出任何假设——它只是要求生成器提供一种标准方法来生成新的随机数。</p><p>以下是采用并符合<code>RandomNumberGenerator</code>协议的类的实现。该类实现了伪随机数生成器算法，称为<em>线性同余生成器</em>：</p><ol><li>class LinearCongruentialGenerator: RandomNumberGenerator {</li><li>​ var lastRandom = 42.0</li><li>​ let m = 139968.0</li><li>​ let a = 3877.0</li><li>​ let c = 29573.0</li><li>​ func random() -&gt; Double {</li><li>​ lastRandom = ((lastRandom * a + c)</li><li>​ .truncatingRemainder(dividingBy:m))</li><li>​ return lastRandom / m</li><li>​ }</li><li>}</li><li>let generator = LinearCongruentialGenerator()</li><li>print(&quot;Here&#39;s a random number: (generator.random())&quot;)</li><li>// Prints &quot;Here&#39;s a random number: 0.3746499199817101&quot;</li><li>print(&quot;And another one: (generator.random())&quot;)</li><li>// Prints &quot;And another one: 0.729023776863283&quot;</li></ol><h2 id="突变方法要求" tabindex="-1"><a class="header-anchor" href="#突变方法要求" aria-hidden="true">#</a> 突变方法要求</h2>',39),u=o("em",null,"突变",-1),p=o("code",null,"mutating",-1),h=o("code",null,"func",-1),m={href:"https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID239",target:"_blank",rel:"noopener noreferrer"},g=t('<p>如果您定义了旨在突变采用该协议的任何类型的实例的协议实例方法要求，请将该方法标记为协议定义的一部分。这使结构和枚举能够采用协议并满足该方法要求。</p><p>注意</p><p>如果您将协议实例方法要求标记为<code>mutating</code>，则在为类编写该方法的实现时无需编写<code>mutating</code>关键字。<code>mutating</code>关键字仅供结构和枚举使用。</p><p>下面的示例定义了一个名为<code>Togglable</code>的协议，该协议定义了一个名为<code>toggle</code>单个实例方法要求。顾名思义，<code>toggle()</code>方法旨在切换或反转任何符合类型的状态，通常通过修改该类型的属性。</p><p><code>toggle()</code>方法被标记为<code>mutating</code>关键字，作为<code>Togglable</code>协议定义的一部分，以指示该方法在调用时预计将突变符合实例的状态：</p><ol><li>protocol Togglable {</li><li>​ mutating func toggle()</li><li>}</li></ol><p>如果您为结构或枚举实现<code>Togglable</code>协议，该结构或枚举可以通过提供也标记为<code>mutating</code>的<code>toggle()</code>方法的实现来符合协议。</p><p>The example below defines an enumeration called <code>OnOffSwitch</code>. This enumeration toggles between two states, indicated by the enumeration cases <code>on</code> and <code>off</code>. The enumeration’s <code>toggle</code> implementation is marked as <code>mutating</code>, to match the <code>Togglable</code> protocol’s requirements:</p><ol><li>enum OnOffSwitch: Togglable {</li><li>​ case off, on</li><li>​ mutating func toggle() {</li><li>​ switch self {</li><li>​ case .off:</li><li>​ self = .on</li><li>​ case .on:</li><li>​ self = .off</li><li>​ }</li><li>​ }</li><li>}</li><li>var lightSwitch = OnOffSwitch.off</li><li>lightSwitch.toggle()</li><li>// lightSwitch is now equal to .on</li></ol><h2 id="初始化器要求" tabindex="-1"><a class="header-anchor" href="#初始化器要求" aria-hidden="true">#</a> 初始化器要求</h2><p>协议可以要求通过符合类型实现特定的初始化器。您以与普通初始化器完全相同的方式编写这些初始化器作为协议定义的一部分，但没有花括号或初始化器主体：</p><ol><li>protocol SomeProtocol {</li><li>​ init(someParameter: Int)</li><li>}</li></ol><h3 id="协议初始化器要求的类实现" tabindex="-1"><a class="header-anchor" href="#协议初始化器要求的类实现" aria-hidden="true">#</a> 协议初始化器要求的类实现</h3><p>您可以在符合要求的类上实现协议初始化器要求，作为指定的初始化器或方便初始化器。在这两种情况下，您都必须用<code>required</code>修饰符标记初始化器实现：</p><ol><li>class SomeClass: SomeProtocol {</li><li>​ required init(someParameter: Int) {</li><li>​ // initializer implementation goes here</li><li>​ }</li><li>}</li></ol><p>使用<code>required</code>修饰符可确保您在符合类的所有子类上提供初始化器要求的显式或继承实现，以便它们也符合协议。</p>',16),f={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID231",target:"_blank",rel:"noopener noreferrer"},b=o("p",null,"注意",-1),_=o("code",null,"final",-1),S=o("code",null,"required",-1),q=o("code",null,"final",-1),D={href:"https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID202",target:"_blank",rel:"noopener noreferrer"},x=t('<p>如果子类从超类覆盖指定的初始化器，并且还从协议中实现了匹配的初始化器要求，请用<code>required</code>修饰符和<code>override</code>修饰符标记初始化器实现：</p><ol><li>protocol SomeProtocol {</li><li>​ init()</li><li>}</li><li></li><li>class SomeSuperClass {</li><li>​ init() {</li><li>​ // initializer implementation goes here</li><li>​ }</li><li>}</li><li></li><li>class SomeSubClass: SomeSuperClass, SomeProtocol {</li><li>​ // &quot;required&quot; from SomeProtocol conformance; &quot;override&quot; from SomeSuperClass</li><li>​ required override init() {</li><li>​ // initializer implementation goes here</li><li>​ }</li><li>}</li></ol><h3 id="失败的初始化器要求" tabindex="-1"><a class="header-anchor" href="#失败的初始化器要求" aria-hidden="true">#</a> 失败的初始化器要求</h3>',3),w={href:"https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID224",target:"_blank",rel:"noopener noreferrer"},y=t('<p>符合要求的类型上的可故障或不可失败的初始化器可以满足故障初始化器要求。非故障初始化器或隐式未包装的故障初始化器可以满足非故障初始化器要求。</p><h2 id="协议作为类型" tabindex="-1"><a class="header-anchor" href="#协议作为类型" aria-hidden="true">#</a> 协议作为类型</h2><p>协议本身实际上并没有实现任何功能。尽管如此，您可以在代码中将协议用作成熟的类型。将协议用作类型有时被称为<em>存在类型</em>，它来自短语“存在一种类型<em>T</em>，使得<em>T</em>符合协议”。</p><p>您可以在许多允许其他类型的地方使用协议，包括：</p><ul><li>作为函数、方法或初始化器中的参数类型或返回类型</li><li>作为常量、变量或属性的类型</li><li>作为数组、字典或其他容器中项目的类型</li></ul><p>注意</p><p>由于协议是类型，因此以大写字母（如<code>FullyNamed</code>和<code>RandomNumberGenerator</code>）开头，以匹配Swift中其他类型的名称（如<code>Int</code>、<code>String</code>和<code>Double</code>）。</p><p>以下是用作类型的协议示例：</p><ol><li>class Dice {</li><li>​ let sides: Int</li><li>​ let generator: RandomNumberGenerator</li><li>​ init(sides: Int, generator: RandomNumberGenerator) {</li><li>​ self.sides = sides</li><li>​ self.generator = generator</li><li>​ }</li><li>​ func roll() -&gt; Int {</li><li>​ return Int(generator.random() * Double(sides)) + 1</li><li>​ }</li><li>}</li></ol><p>此示例定义了一个名为<code>Dice</code>的新类，它表示用于棋盘游戏的<em>n</em>面骰子。<code>Dice</code>实例有一个称为<code>sides</code>的整数属性，表示它们有多少边，以及一个称为生<code>generator</code>属性，它提供了一个随机数生成器，从中创建骰子滚动值。</p>',10),T=o("code",null,"generator",-1),C=o("code",null,"RandomNumberGenerator",-1),k=o("code",null,"RandomNumberGenerator",-1),v=o("em",null,"的任何",-1),A=o("code",null,"RandomNumberGenerator",-1),R=o("code",null,"RandomNumberGenerator",-1),G=o("code",null,"Dice",-1),P=o("code",null,"generator",-1),L={href:"https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html#ID341",target:"_blank",rel:"noopener noreferrer"},I=t('<p><code>Dice</code>还有一个初始化器，用于设置其初始状态。此初始化器有一个名为<code>generator</code>的参数，该参数也属于<code>RandomNumberGenerator</code>类型。在初始化新的<code>Dice</code>实例时，您可以将任何符合类型的值传递给此参数。</p><p><code>Dice</code>提供一种实例方法，<code>roll</code>，它返回1和骰子上边数之间的整数值。此方法调用生成器的<code>random()</code>方法，以创建一个<code>0.0</code>到<code>1.0</code>之间的新随机数，并使用此随机数在正确的范围内创建骰子滚动值。由于已知<code>generator</code>采用<code>RandomNumberGenerator</code>，因此它保证有一个<code>random()</code>方法可以调用。</p><p>以下是如何使用<code>Dice</code>创建以a<code>LinearCongruentialGenerator</code>实例作为其随机数生成器的六面骰子：</p><ol><li>var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())</li><li>for _ in 1...5 {</li><li>​ print(&quot;Random dice roll is (d6.roll())&quot;)</li><li>}</li><li>// Random dice roll is 3</li><li>// Random dice roll is 5</li><li>// Random dice roll is 4</li><li>// Random dice roll is 5</li><li>// Random dice roll is 4</li></ol><h2 id="授权" tabindex="-1"><a class="header-anchor" href="#授权" aria-hidden="true">#</a> 授权</h2><p><em>委托</em>是一种设计模式，使类或结构能够将其部分责任移交给（或<em>委托</em>）到另一种类型的实例。这种设计模式是通过定义封装委托责任的协议来实现的，这样保证符合的类型（称为委托）可以提供已委托的功能。委托可用于响应特定操作，或从外部来源检索数据，而无需知道该源的基础类型。</p><p>以下示例定义了两种用于基于骰子的棋盘游戏的协议：</p><ol><li>protocol DiceGame {</li><li>​ var dice: Dice { get }</li><li>​ func play()</li><li>}</li><li>protocol DiceGameDelegate: AnyObject {</li><li>​ func gameDidStart(_ game: DiceGame)</li><li>​ func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)</li><li>​ func gameDidEnd(_ game: DiceGame)</li><li>}</li></ol><p><code>DiceGame</code>协议是一种协议，任何涉及骰子的游戏都可以采用。</p>',9),N=o("code",null,"DiceGameDelegate",-1),H=o("code",null,"DiceGame",-1),j={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID51",target:"_blank",rel:"noopener noreferrer"},E=o("code",null,"SnakesAndLadders",-1),O={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID281",target:"_blank",rel:"noopener noreferrer"},B=o("code",null,"AnyObject",-1),F={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html",target:"_blank",rel:"noopener noreferrer"},z=o("em",null,"的蛇和梯子",-1),V=o("code",null,"Dice",-1),W=o("code",null,"DiceGame",-1),M=o("code",null,"DiceGameDelegate",-1),Z=t("<ol><li>class SnakesAndLadders: DiceGame {</li><li>​ let finalSquare = 25</li><li>​ let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())</li><li>​ var square = 0</li><li>​ var board: [Int]</li><li>​ init() {</li><li>​ board = Array(repeating: 0, count: finalSquare + 1)</li><li>​ board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02</li><li>​ board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08</li><li>​ }</li><li>​ weak var delegate: DiceGameDelegate?</li><li>​ func play() {</li><li>​ square = 0</li><li>​ delegate?.gameDidStart(self)</li><li>​ gameLoop: while square != finalSquare {</li><li>​ let diceRoll = dice.roll()</li><li>​ delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)</li><li>​ switch square + diceRoll {</li><li>​ case finalSquare:</li><li>​ break gameLoop</li><li>​ case let newSquare where newSquare &gt; finalSquare:</li><li>​ continue gameLoop</li><li>​ default:</li><li>​ square += diceRoll</li><li>​ square += board[square]</li><li>​ }</li><li>​ }</li><li>​ delegate?.gameDidEnd(self)</li><li>​ }</li><li>}</li></ol>",1),J=o("em",null,"蛇和梯子",-1),U={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID137",target:"_blank",rel:"noopener noreferrer"},Y=t('<p>这个版本的游戏被包装成一个名为<code>SnakesAndLadders</code>类，该类采用了<code>DiceGame</code>协议。它提供了一个gettable<code>dice</code>属性和一个<code>play()</code>方法，以符合协议。（<code>dice</code>属性被声明为常量属性，因为它在初始化后不需要更改，并且协议仅要求它必须是可获取的。）</p><p><em>Snakes and Ladders</em>游戏板设置在类的<code>init()</code>初始化器中进行。所有游戏逻辑都转移到协议<code>play</code>方法中，该方法使用协议的必需<code>dice</code>属性来提供其骰子滚动值。</p><p>请注意，<code>delegate</code>属性被定义为<em>可选</em>的<code>DiceGameDelegate</code>，因为玩游戏不需要委托。由于它是可选类型，<code>delegate</code>属性会自动设置为<code>nil</code>的初始值。此后，游戏实例化器可以选择将属性设置为合适的委托。由于<code>DiceGameDelegate</code>协议仅限类，因此您可以声明委托为<code>weak</code>，以防止引用周期。</p><p><code>DiceGameDelegate</code>提供了三种跟踪游戏进度的方法。这三种方法已纳入上述<code>play()</code>方法中的游戏逻辑，并在新游戏开始、新回合开始或游戏结束时调用。</p><p>由于<code>delegate</code>属性是<em>可选</em>的<code>DiceGameDelegate</code>，因此<code>play()</code>方法每次在委托上调用方法时都使用可选链。如果<code>delegate</code>属性为零，则这些委托调用优雅地失败，没有错误。如果<code>delegate</code>属性非零，则调用委托方法，并将<code>SnakesAndLadders</code>实例作为参数传递。</p><p>下一个示例显示了一个名为<code>DiceGameTracker</code>的类，该类采用了<code>DiceGameDelegate</code>协议：</p><ol><li>class DiceGameTracker: DiceGameDelegate {</li><li>​ var numberOfTurns = 0</li><li>​ func gameDidStart(_ game: DiceGame) {</li><li>​ numberOfTurns = 0</li><li>​ if game is SnakesAndLadders {</li><li>​ print(&quot;Started a new game of Snakes and Ladders&quot;)</li><li>​ }</li><li>​ print(&quot;The game is using a (game.dice.sides)-sided dice&quot;)</li><li>​ }</li><li>​ func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {</li><li>​ numberOfTurns += 1</li><li>​ print(&quot;Rolled a (diceRoll)&quot;)</li><li>​ }</li><li>​ func gameDidEnd(_ game: DiceGame) {</li><li>​ print(&quot;The game lasted for (numberOfTurns) turns&quot;)</li><li>​ }</li><li>}</li></ol><p><code>DiceGameTracker</code>实现<code>DiceGameDelegate</code>所需的所有三种方法。它使用这些方法来跟踪游戏的转弯次数。当游戏开始时，它会将anumberOfTurns属性重置为零，每次新回合开始时都会增加，并在游戏结束后打印出回合总数。</p><p>上面显示的<code>gameDidStart(_:)</code>的实现使用<code>game</code>参数打印一些关于即将玩的游戏的介绍性信息。<code>game</code>参数具有<code>DiceGame</code>类型，而不是<code>SnakesAndLadders</code>，因此<code>gameDidStart(_:)</code>只能访问和使用作为<code>DiceGame</code>协议一部分实现的方法和属性。然而，该方法仍然能够使用类型转换来查询底层实例的类型。在本例中，它检查<code>game</code>是否实际上是幕后<code>SnakesAndLadders</code>的实例，如果是，则打印适当的消息。</p><p><code>gameDidStart(_:)</code>方法还访问传递<code>game</code>参数的<code>dice</code>属性。由于<code>game</code>已知符合<code>DiceGame</code>协议，因此它保证具有<code>dice</code>属性，因此无论玩哪种游戏，<code>gameDidStart(_:)</code>方法都可以访问和打印骰子的<code>sides</code>属性。</p><p>以下是<code>DiceGameTracker</code>在操作中的样子：</p><ol><li>let tracker = DiceGameTracker()</li><li>let game = SnakesAndLadders()</li><li>game.delegate = tracker</li><li>game.play()</li><li>// Started a new game of Snakes and Ladders</li><li>// The game is using a 6-sided dice</li><li>// Rolled a 3</li><li>// Rolled a 5</li><li>// Rolled a 4</li><li>// Rolled a 5</li><li>// The game lasted for 4 turns</li></ol><h2 id="通过扩展添加协议一致性" tabindex="-1"><a class="header-anchor" href="#通过扩展添加协议一致性" aria-hidden="true">#</a> 通过扩展添加协议一致性</h2>',13),$={href:"https://docs.swift.org/swift-book/LanguageGuide/Extensions.html",target:"_blank",rel:"noopener noreferrer"},K=t('<p>注意</p><p>当该一致性在扩展中添加到实例的类型时，类型的现有实例会自动采用并符合协议。</p><p>例如，这种名为<code>TextRepresentable</code>的协议可以通过任何可以表示为文本的类型实现。这可能是对自身的描述，也可能是其当前状态的文本版本：</p><ol><li>protocol TextRepresentable {</li><li>​ var textualDescription: String { get }</li><li>}</li></ol><p>上面的<code>Dice</code>可以扩展到采用并符合<code>TextRepresentable</code>：</p><ol><li>extension Dice: TextRepresentable {</li><li>​ var textualDescription: String {</li><li>​ return &quot;A (sides)-sided dice&quot;</li><li>​ }</li><li>}</li></ol><p>此扩展采用新协议的方式与<code>Dice</code>在其原始实现中提供的方式完全相同。协议名称在类型名称之后提供，由冒号分隔，并在扩展的花括号内提供协议所有要求的实现。</p><p>任何<code>Dice</code>实例现在都可以被视为<code>TextRepresentable</code>：</p><ol><li>let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())</li><li>print(d12.textualDescription)</li><li>// Prints &quot;A 12-sided dice&quot;</li></ol><p>同样，<code>SnakesAndLadders</code>游戏类可以扩展为采用并符合<code>TextRepresentable</code>协议：</p><ol><li>extension SnakesAndLadders: TextRepresentable {</li><li>​ var textualDescription: String {</li><li>​ return &quot;A game of Snakes and Ladders with (finalSquare) squares&quot;</li><li>​ }</li><li>}</li><li>print(game.textualDescription)</li><li>// Prints &quot;A game of Snakes and Ladders with 25 squares&quot;</li></ol><h3 id="有条件地遵守协议" tabindex="-1"><a class="header-anchor" href="#有条件地遵守协议" aria-hidden="true">#</a> 有条件地遵守协议</h3>',12),Q=o("code",null,"where",-1),X=o("code",null,"where",-1),ee={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID192",target:"_blank",rel:"noopener noreferrer"},oe=t('<p>以下扩展使<code>Array</code>实例在存储符合TextRepresentable的类型元素时符合<code>TextRepresentable</code>协议。</p><ol><li>extension Array: TextRepresentable where Element: TextRepresentable {</li><li>​ var textualDescription: String {</li><li>​ let itemsAsText = self.map { $0.textualDescription }</li><li>​ return &quot;[&quot; + itemsAsText.joined(separator: &quot;, &quot;) + &quot;]&quot;</li><li>​ }</li><li>}</li><li>let myDice = [d6, d12]</li><li>print(myDice.textualDescription)</li><li>// Prints &quot;[A 6-sided dice, A 12-sided dice]&quot;</li></ol><h3 id="宣布协议通过扩展" tabindex="-1"><a class="header-anchor" href="#宣布协议通过扩展" aria-hidden="true">#</a> 宣布协议通过扩展</h3><p>如果一种类型已经符合协议的所有要求，但尚未声明它采用该协议，您可以使其采用带有空扩展名的协议：</p><ol><li>struct Hamster {</li><li>​ var name: String</li><li>​ var textualDescription: String {</li><li>​ return &quot;A hamster named (name)&quot;</li><li>​ }</li><li>}</li><li>extension Hamster: TextRepresentable {}</li></ol><p>现在，只要<code>TextRepresentable</code>是必填类型，都可以使用<code>Hamster</code>实例：</p><ol><li>let simonTheHamster = Hamster(name: &quot;Simon&quot;)</li><li>let somethingTextRepresentable: TextRepresentable = simonTheHamster</li><li>print(somethingTextRepresentable.textualDescription)</li><li>// Prints &quot;A hamster named Simon&quot;</li></ol><p>注意</p><p>类型不会仅仅通过满足其要求而自动采用协议。他们必须始终明确宣布通过该议定书。</p><h2 id="使用综合实现采用协议" tabindex="-1"><a class="header-anchor" href="#使用综合实现采用协议" aria-hidden="true">#</a> 使用综合实现采用协议</h2><p>在许多简单的情况下，Swift可以自动为<code>Equatable</code>、<code>Hashable</code>和<code>Comparable</code>提供协议一致性。使用此综合实现意味着您不必编写重复的样板代码来自己实现协议要求。</p><p>Swift为以下类型的自定义类型提供了<code>Equatable</code>的综合实现：</p><ul><li>仅存储符合<code>Equatable</code>协议的属性的结构</li><li>仅具有符合<code>Equatable</code>协议的关联类型的枚举</li><li>没有关联类型的枚举</li></ul><p>To receive a synthesized implementation of <code>==</code>, declare conformance to <code>Equatable</code> in the file that contains the original declaration, without implementing an <code>==</code> operator yourself. The <code>Equatable</code> protocol provides a default implementation of <code>!=</code>.</p><p>下面的示例定义了三维位置向量<code>(x,y,z)</code>的<code>Vector3D</code>结构，类似于<code>Vector2D</code>结构。由于<code>x</code>、<code>y</code>和<code>z</code>属性都是<code>Equatable</code>的，<code>Vector3D</code>接收等价运算符的合成实现。</p><ol><li>struct Vector3D: Equatable {</li><li>​ var x = 0.0, y = 0.0, z = 0.0</li><li>}</li><li></li><li>let twoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)</li><li>let anotherTwoThreeFour = Vector3D(x: 2.0, y: 3.0, z: 4.0)</li><li>if twoThreeFour == anotherTwoThreeFour {</li><li>​ print(&quot;These two vectors are also equivalent.&quot;)</li><li>}</li><li>// Prints &quot;These two vectors are also equivalent.&quot;</li></ol><p>Swift为以下类型的自定义类型提供了<code>Hashable</code>的综合实现：</p><ul><li>Structures that have only stored properties that conform to the <code>Hashable</code> protocol</li><li>仅具有符合<code>Hashable</code>协议的关联类型的枚举</li><li>没有关联类型的枚举</li></ul><p>要接收<code>hash(into:)</code>的合成实现，请在包含原始声明的文件中声明与<code>Hashable</code>的一致性，而无需自己实现<code>hash(into:)</code>方法。</p><p>Swift为没有原始值的枚举提供了<code>Comparable</code>的综合实现。如果枚举具有关联类型，它们都必须符合<code>Comparable</code>协议。要接收<code>&lt;</code>的合成实现，请在包含原始枚举声明的文件中声明一致性为<code>Comparable</code>，而无需自己实现<code>&lt;</code>运算符。<code>Comparable</code>协议的默认实现<code>&lt;=</code>,<code>&gt;</code>和<code>&gt;=</code>提供了剩余的比较运算符。</p><p>以下示例定义了针对初学者、中级和专家案例的<code>SkillLevel</code>列举。专家还根据他们拥有的恒星数量进行排名。</p><ol><li>enum SkillLevel: Comparable {</li><li>​ case beginner</li><li>​ case intermediate</li><li>​ case expert(stars: Int)</li><li>}</li><li>var levels = [SkillLevel.intermediate, SkillLevel.beginner,</li><li>​ SkillLevel.expert(stars: 5), SkillLevel.expert(stars: 3)]</li><li>for level in levels.sorted() {</li><li>​ print(level)</li><li>}</li><li>// Prints &quot;beginner&quot;</li><li>// Prints &quot;intermediate&quot;</li><li>// Prints &quot;expert(stars: 3)&quot;</li><li>// Prints &quot;expert(stars: 5)&quot;</li></ol><h2 id="协议类型的集合" tabindex="-1"><a class="header-anchor" href="#协议类型的集合" aria-hidden="true">#</a> 协议类型的集合</h2>',23),ie={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275",target:"_blank",rel:"noopener noreferrer"},le=o("code",null,"TextRepresentable",-1),te=t('<ol><li>let things: [TextRepresentable] = [game, d12, simonTheHamster]</li></ol><p>现在可以迭代数组中的项目，并打印每个项目的文本描述：</p><ol><li>for thing in things {</li><li>​ print(thing.textualDescription)</li><li>}</li><li>// A game of Snakes and Ladders with 25 squares</li><li>// A 12-sided dice</li><li>// A hamster named Simon</li></ol><p>请注意，常量为<code>TextRepresentable</code>类型。它不是<code>Dice</code>、orDiceGame或<code>Hamster</code>类型，即使幕后的实际实例是这些类型之一。尽管如此，由于其类型为<code>TextRepresentable</code>，并且已知任何<code>TextRepresentable</code>都具有<code>textualDescription</code>属性，因此每次通过循环访问<code>thing.textualDescription</code>都是安全的。</p><h2 id="协议继承" tabindex="-1"><a class="header-anchor" href="#协议继承" aria-hidden="true">#</a> 协议继承</h2><p>协议可以<em>继承</em>一个或多个其他协议，并可以在继承的要求之外添加进一步的要求。协议继承的语法类似于类继承的语法，但可以选择列出多个继承的协议，用逗号分隔：</p><ol><li>protocol InheritingProtocol: SomeProtocol, AnotherProtocol {</li><li>​ // protocol definition goes here</li><li>}</li></ol><p>以下是从上面继承<code>TextRepresentable</code>协议的协议示例：</p><ol><li>protocol PrettyTextRepresentable: TextRepresentable {</li><li>​ var prettyTextualDescription: String { get }</li><li>}</li></ol><p>This example defines a new protocol, <code>PrettyTextRepresentable</code>, which inherits from <code>TextRepresentable</code>. Anything that adopts <code>PrettyTextRepresentable</code> must satisfy all of the requirements enforced by <code>TextRepresentable</code>, <em>plus</em> the additional requirements enforced by <code>PrettyTextRepresentable</code>. In this example, <code>PrettyTextRepresentable</code> adds a single requirement to provide a gettable property called <code>prettyTextualDescription</code> that returns a <code>String</code>.</p><p><code>SnakesAndLadders</code>类可以扩展到采用并符合<code>PrettyTextRepresentable</code>：</p><ol><li>extension SnakesAndLadders: PrettyTextRepresentable {</li><li>​ var prettyTextualDescription: String {</li><li>​ var output = textualDescription + &quot;:\\n&quot;</li><li>​ for index in 1...finalSquare {</li><li>​ switch board[index] {</li><li>​ case let ladder where ladder &gt; 0:</li><li>​ output += &quot;▲ &quot;</li><li>​ case let snake where snake &lt; 0:</li><li>​ output += &quot;▼ &quot;</li><li>​ default:</li><li>​ output += &quot;○ &quot;</li><li>​ }</li><li>​ }</li><li>​ return output</li><li>​ }</li><li>}</li></ol><p>此扩展声明它采用<code>PrettyTextRepresentable</code>协议，并为<code>SnakesAndLadders</code>类型提供了 <code>prettyTextualDescription</code>属性的实现。任何<code>PrettyTextRepresentable</code>都必须是<code>TextRepresentable</code>，因此<code>prettyTextualDescription</code>的实现从<code>TextRepresentable</code>协议访问<code>textualDescription</code>属性开始，以启动输出字符串。它附加冒号和换行符，并将其用作其漂亮文本表示的开始。然后，它通过板正方形阵列迭代，并附加一个几何形状来表示每个正方形的内容：</p><ul><li>如果正方形的值大于<code>0</code>，它是梯子的底部，并用▲表示。</li><li>如果正方形的值小于<code>0</code>，那就是蛇的头，并用▼表示。</li><li>否则，正方形的值为<code>0</code>，它是一个“自由”正方形，由<code>○</code>表示。</li></ul><p><code>prettyTextualDescription</code>属性现在可用于打印任何<code>SnakesAndLadders</code>实例的漂亮文本描述：</p><ol><li>print(game.prettyTextualDescription)</li><li>// A game of Snakes and Ladders with 25 squares:</li><li>// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○</li></ol><h2 id="仅类协议" tabindex="-1"><a class="header-anchor" href="#仅类协议" aria-hidden="true">#</a> 仅类协议</h2><p>您可以通过将<code>AnyObject</code>协议添加到协议的继承列表中来将协议采用限制为类类型（而不是结构或枚举）。</p><ol><li>protocol SomeClassOnlyProtocol: AnyObject, SomeInheritedProtocol {</li><li>​ // class-only protocol definition goes here</li><li>}</li></ol><p>在上面的示例中，<code>SomeClassOnlyProtocol</code>只能由类类型采用。编写试图采用<code>SomeClassOnlyProtocol</code>的结构或枚举定义是一个编译时错误。</p><p>注意</p>',21),ce={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88",target:"_blank",rel:"noopener noreferrer"},de={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID89",target:"_blank",rel:"noopener noreferrer"},ae=t('<h2 id="礼宾组成" tabindex="-1"><a class="header-anchor" href="#礼宾组成" aria-hidden="true">#</a> 礼宾组成</h2><p>要求一种类型同时遵守多个协议可能是有用的。您可以将多个协议组合成一个带有<em>协议组合</em>的单个需求。协议组合的行为就好像您定义了一个临时本地协议，该协议具有组合中所有协议的组合要求。协议组合没有定义任何新的协议类型。</p><p>Protocol compositions have the form <code>SomeProtocol &amp; AnotherProtocol</code>. You can list as many protocols as you need, separating them with ampersands (<code>&amp;</code>). In addition to its list of protocols, a protocol composition can also contain one class type, which you can use to specify a required superclass.</p><p>以下是一个将两个名为<code>Named</code>和<code>Aged</code>的协议组合成函数参数上的单个协议组合要求的示例：</p><ol><li>protocol Named {</li><li>​ var name: String { get }</li><li>}</li><li>protocol Aged {</li><li>​ var age: Int { get }</li><li>}</li><li>struct Person: Named, Aged {</li><li>​ var name: String</li><li>​ var age: Int</li><li>}</li><li>func wishHappyBirthday(to celebrator: Named &amp; Aged) {</li><li>​ print(&quot;Happy birthday, (celebrator.name), you&#39;re (celebrator.age)!&quot;)</li><li>}</li><li>let birthdayPerson = Person(name: &quot;Malcolm&quot;, age: 21)</li><li>wishHappyBirthday(to: birthdayPerson)</li><li>// Prints &quot;Happy birthday, Malcolm, you&#39;re 21!&quot;</li></ol><p>在本例中，<code>Named</code>协议对名为<code>name</code>的可获取<code>String</code>属性有一个单一要求。<code>Aged</code>协议对可取的<code>Int</code>属性调用具有单一要求。这两种协议都由一个名为<code>Person</code>的结构采用。</p><p>The example also defines a <code>wishHappyBirthday(to:)</code> function. The type of the <code>celebrator</code>parameter is <code>Named &amp; Aged</code>, which means “any type that conforms to both the <code>Named</code> and <code>Aged</code> protocols.” It doesn’t matter which specific type is passed to the function, as long as it conforms to both of the required protocols.</p><p>然后，该示例创建一个名为<code>birthdayPerson</code>的新Person实例，并将此新实例传递给<code>wishHappyBirthday(to:)</code>函数。由于<code>Person</code>符合这两种协议，因此此通话是有效的，<code>wishHappyBirthday(to:)</code>功能可以打印其生日问候语。</p><p>以下是将上一个示例中的<code>Named</code>协议与aLocation类相结合的示例：</p><ol><li>class Location {</li><li>​ var latitude: Double</li><li>​ var longitude: Double</li><li>​ init(latitude: Double, longitude: Double) {</li><li>​ self.latitude = latitude</li><li>​ self.longitude = longitude</li><li>​ }</li><li>}</li><li>class City: Location, Named {</li><li>​ var name: String</li><li>​ init(name: String, latitude: Double, longitude: Double) {</li><li>​ self.name = name</li><li>​ super.init(latitude: latitude, longitude: longitude)</li><li>​ }</li><li>}</li><li>func beginConcert(in location: Location &amp; Named) {</li><li>​ print(&quot;Hello, (location.name)!&quot;)</li><li>}</li><li></li><li>let seattle = City(name: &quot;Seattle&quot;, latitude: 47.6, longitude: -122.3)</li><li>beginConcert(in: seattle)</li><li>// Prints &quot;Hello, Seattle!&quot;</li></ol><p>The <code>beginConcert(in:)</code> function takes a parameter of type <code>Location &amp; Named</code>, which means “any type that’s a subclass of <code>Location</code> and that conforms to the <code>Named</code> protocol.” In this case, <code>City</code> satisfies both requirements.</p><p>Passing <code>birthdayPerson</code> to the <code>beginConcert(in:)</code> function is invalid because <code>Person</code> isn’t a subclass of <code>Location</code>. Likewise, if you made a subclass of <code>Location</code> that didn’t conform to the <code>Named</code> protocol, calling <code>beginConcert(in:)</code> with an instance of that type is also invalid.</p><h2 id="检查协议一致性" tabindex="-1"><a class="header-anchor" href="#检查协议一致性" aria-hidden="true">#</a> 检查协议一致性</h2>',13),re={href:"https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html",target:"_blank",rel:"noopener noreferrer"},ne=o("code",null,"is",-1),se=o("code",null,"as",-1),ue=t('<ul><li>如果实例符合协议，则<code>is</code>运算符返回<code>true</code>，如果不符合协议，则返回<code>false</code>。</li><li><code>as?</code>向下转换运算符的版本返回协议类型的可选值，如果实例不符合该协议，则该值为<code>nil</code>。</li><li><code>as!</code>下调运算符的版本将下调强制到协议类型，如果下调失败，则触发运行时错误。</li></ul><p>此示例定义了一个名为<code>HasArea</code>协议，具有称为<code>area</code>的可获取<code>Double</code>属性的单个属性要求：</p><ol><li>protocol HasArea {</li><li>​ var area: Double { get }</li><li>}</li></ol><p>以下是两个类别，<code>Circle</code>和<code>Country</code>，它们都符合<code>HasArea</code>协议：</p><ol><li>class Circle: HasArea {</li><li>​ let pi = 3.1415927</li><li>​ var radius: Double</li><li>​ var area: Double { return pi * radius * radius }</li><li>​ init(radius: Double) { self.radius = radius }</li><li>}</li><li>class Country: HasArea {</li><li>​ var area: Double</li><li>​ init(area: Double) { self.area = area }</li><li>}</li></ol><p><code>Circle</code>类基于存储<code>radius</code>属性将<code>area</code>属性要求作为计算属性实现。<code>Country</code>类直接作为存储属性实现<code>area</code>要求。这两个类都正确地符合<code>HasArea</code>协议。</p><p>这里有一个名为<code>Animal</code>的类，它不符合<code>HasArea</code>协议：</p><ol><li>class Animal {</li><li>​ var legs: Int</li><li>​ init(legs: Int) { self.legs = legs }</li><li>}</li></ol><p><code>Circle</code>、<code>Country</code>和<code>Animal</code>类没有共享的基类。尽管如此，它们都是类，因此所有三种类型的实例都可以用于初始化存储类型<code>AnyObject</code>值的数组：</p><ol><li>let objects: [AnyObject] = [</li><li>​ Circle(radius: 2.0),</li><li>​ Country(area: 243_610),</li><li>​ Animal(legs: 4)</li><li>]</li></ol><p><code>objects</code>数组初始化为数组文字，其中包含半径为2个单位的<code>Circle</code>实例；以英国表面积（平方公里）初始化<code>Country</code>实例；以及四个腿的<code>Animal</code>实例。</p><p>现在可以迭代<code>objects</code>数组，并且可以检查数组中的每个对象，看看它是否符合<code>HasArea</code>协议：</p><ol><li>for object in objects {</li><li>​ if let objectWithArea = object as? HasArea {</li><li>​ print(&quot;Area is (objectWithArea.area)&quot;)</li><li>​ } else {</li><li>​ print(&quot;Something that doesn&#39;t have an area&quot;)</li><li>​ }</li><li>}</li><li>// Area is 12.5663708</li><li>// Area is 243610.0</li><li>// Something that doesn&#39;t have an area</li></ol><p>Whenever an object in the array conforms to the <code>HasArea</code> protocol, the optional value returned by the <code>as?</code> operator is unwrapped with optional binding into a constant called <code>objectWithArea</code>. The <code>objectWithArea</code> constant is known to be of type <code>HasArea</code>, and so its <code>area</code> property can be accessed and printed in a type-safe way.</p><p>请注意，基础对象不会因铸造过程而改变。他们仍然是<code>Circle</code>、<code>Country</code>和<code>Animal</code>。然而，当它们存储在<code>objectWithArea</code>常量中时，它们只知道是<code>HasArea</code>类型，因此只能访问它们<code>area</code>属性。</p><h2 id="《任择议定书》要求" tabindex="-1"><a class="header-anchor" href="#《任择议定书》要求" aria-hidden="true">#</a> 《任择议定书》要求</h2><p>您可以定义协议的<em>可选要求</em>。这些要求不必由符合协议的类型实现。作为协议定义的一部分，可选要求前缀为<code>optional</code>饰符。可选要求可用，以便您可以编写与Objective-C互操作的代码。协议和可选要求都必须用<code>@objc</code>属性标记。请注意，<code>@objc</code>协议只能由从Objective-C类或其他<code>@objc</code>类继承的类采用。它们不能被结构或枚举所采用。</p><p>当您在可选需求中使用方法或属性时，其类型会自动成为可选类型。例如，类型<code>(Int)-&gt;String</code>的方法变为<code>((Int)-&gt;String)?</code>请注意，整个函数类型包装在可选中，而不是方法的返回值中。</p>',18),pe=o("code",null,"someOptionalMethod?(someArgument)",-1),he={href:"https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html",target:"_blank",rel:"noopener noreferrer"},me=t("<p>以下示例定义了一个名为<code>Counter</code>的整数计数类，该类使用外部数据源来提供其增量。此数据源由<code>CounterDataSource</code>协议定义，该协议有两个可选要求：</p><ol><li>@objc protocol CounterDataSource {</li><li>​ @objc optional func increment(forCount count: Int) -&gt; Int</li><li>​ @objc optional var fixedIncrement: Int { get }</li><li>}</li></ol><p><code>CounterDataSource</code>协议定义了一个名为<code>increment(forCount:)</code>的可选方法要求和一个名为<code>fixedIncrement</code>可选属性要求。这些要求定义了数据源为<code>Counter</code>实例提供适当增量的两种不同方式。</p><p>注意</p><p>严格来说，您可以编写符合<code>CounterDataSource</code>的自定义类，而无需实现<em>任一</em>协议要求。毕竟，它们都是可选的。虽然技术上允许，但这不会成为一个非常好的数据源。</p><p>下面定义的<code>Counter</code>类具有typeCounterDataSource<code>CounterDataSource?</code>的可选<code>dataSource</code>属性：</p><ol><li>class Counter {</li><li>​ var count = 0</li><li>​ var dataSource: CounterDataSource?</li><li>​ func increment() {</li><li>​ if let amount = dataSource?.increment?(forCount: count) {</li><li>​ count += amount</li><li>​ } else if let amount = dataSource?.fixedIncrement {</li><li>​ count += amount</li><li>​ }</li><li>​ }</li><li>}</li></ol><p><code>Counter</code>类将其当前值存储在称为<code>count</code>的变量属性中。<code>Counter</code>类还定义了一个名为<code>increment</code>的方法，每次调用方法时都会增加<code>count</code>属性。</p><p><code>increment()</code>方法首先尝试通过在其数据源上查找<code>increment(forCount:)</code>方法的实现来检索增量。<code>increment()</code>方法使用可选链来尝试调用<code>increment(forCount:)</code>并将currentcount值作为方法的单个参数传递。</p><p>请注意，<em>两个</em>级别的可选链在这里起作用。首先，<code>dataSource</code>可能为<code>nil</code>，因此<code>dataSource</code>名称后有一个问号，表示只有当<code>dataSource</code>不是<code>nil</code>才应调用<code>increment(forCount:)</code>）。其次，即使<code>dataSource</code><em>确实</em>存在，也不能保证它实现<code>increment(forCount:)</code>因为它是一个可选要求。在这里，<code>increment(forCount:)</code>可能无法实现的可能性也通过可选链处理。只有当<code>increment(forCount:)</code>存在时，才会调用<code>increment(forCount:)</code>），也就是说，如果它不是<code>nil</code>。这就是为什么<code>increment(forCount:)</code>在名称后面也用问号书写。</p>",10),ge=o("code",null,"increment(forCount:)",-1),fe=o("em",null,"optional",-1),be=o("code",null,"Int",-1),_e=o("code",null,"increment(forCount:)",-1),Se=o("code",null,"Int",-1),qe=o("code",null,"CounterDataSource",-1),De={href:"https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html#ID252",target:"_blank",rel:"noopener noreferrer"},xe=t('<p>调用<code>increment(forCount:)</code>后，它返回的可选<code>Int</code>使用可选绑定解包装成一个常量称为<code>amount</code>。如果可选的<code>Int</code>确实包含一个值——也就是说，如果委托和方法都存在，并且方法返回了一个值——则未包装的<code>amount</code>将添加到存储<code>count</code>属性中，并且增量完成。</p><p>如果<em>无法</em>从<code>increment(forCount:)</code>方法中检索值——要么是因为<code>dataSource</code>为零，要么是因为数据源没有实现<code>increment(forCount:)</code>——那么<code>increment()</code>方法会尝试从数据源的<code>fixedIncrement</code>属性中检索值。<code>fixedIncrement</code>属性也是可选要求，因此其值是可选的<code>Int</code>值，即使<code>fixedIncrement</code>被定义为非可选的<code>Int</code>属性，作为<code>CounterDataSource</code>协议定义的一部分。</p><p>这是一个简单的<code>CounterDataSource</code>实现，其中数据源每次查询时都会返回<code>3</code>的常量值。它通过实现可选<code>fixedIncrement</code>属性要求来做到这一点：</p><ol><li>class ThreeSource: NSObject, CounterDataSource {</li><li>​ let fixedIncrement = 3</li><li>}</li></ol><p>您可以使用<code>ThreeSource</code>实例作为新<code>Counter</code>实例的数据源：</p><ol><li>var counter = Counter()</li><li>counter.dataSource = ThreeSource()</li><li>for _ in 1...4 {</li><li>​ counter.increment()</li><li>​ print(counter.count)</li><li>}</li><li>// 3</li><li>// 6</li><li>// 9</li><li>// 12</li></ol><p>上面的代码创建一个新的<code>Counter</code>实例；将其数据源设置为newThreeSource实例；并四次调用counter的<code>increment()</code>方法。不出所料，每次调用<code>increment()</code>时，计数器的<code>count</code>属性都会增加三个。</p><p>Here’s a more complex data source called <code>TowardsZeroSource</code>, which makes a <code>Counter</code>instance count up or down towards zero from its current <code>count</code> value:</p><ol><li>class TowardsZeroSource: NSObject, CounterDataSource {</li><li>​ func increment(forCount count: Int) -&gt; Int {</li><li>​ if count == 0 {</li><li>​ return 0</li><li>​ } else if count &lt; 0 {</li><li>​ return 1</li><li>​ } else {</li><li>​ return -1</li><li>​ }</li><li>​ }</li><li>}</li></ol><p>The <code>TowardsZeroSource</code> class implements the optional <code>increment(forCount:)</code> method from the <code>CounterDataSource</code> protocol and uses the <code>count</code> argument value to work out which direction to count in. If <code>count</code> is already zero, the method returns <code>0</code> to indicate that no further counting should take place.</p><p>You can use an instance of <code>TowardsZeroSource</code> with the existing <code>Counter</code> instance to count from <code>-4</code> to zero. Once the counter reaches zero, no more counting takes place:</p><ol><li>counter.count = -4</li><li>counter.dataSource = TowardsZeroSource()</li><li>for _ in 1...5 {</li><li>​ counter.increment()</li><li>​ print(counter.count)</li><li>}</li><li>// -3</li><li>// -2</li><li>// -1</li><li>// 0</li><li>// 0</li></ol><h2 id="协议扩展" tabindex="-1"><a class="header-anchor" href="#协议扩展" aria-hidden="true">#</a> 协议扩展</h2><p>协议可以扩展到向符合要求的类型提供方法、初始化器、下标和计算属性实现。这允许您定义协议本身的行为，而不是在每种类型的单个一致性或全局函数中。</p><p>例如，<code>RandomNumberGenerator</code>协议可以扩展到提供arandomBool<code>randomBool()</code>方法，该方法使用所需的<code>random()</code>方法的结果返回随机<code>Bool</code>值：</p><ol><li>extension RandomNumberGenerator {</li><li>​ func randomBool() -&gt; Bool {</li><li>​ return random() &gt; 0.5</li><li>​ }</li><li>}</li></ol><p>通过在协议上创建扩展，所有符合的类型都会自动获得此方法实现，而无需任何额外的修改。</p><ol><li>let generator = LinearCongruentialGenerator()</li><li>print(&quot;Here&#39;s a random number: (generator.random())&quot;)</li><li>// Prints &quot;Here&#39;s a random number: 0.3746499199817101&quot;</li><li>print(&quot;And here&#39;s a random Boolean: (generator.randomBool())&quot;)</li><li>// Prints &quot;And here&#39;s a random Boolean: true&quot;</li></ol><p>协议扩展可以向符合要求的类型添加实现，但不能使协议扩展或从其他协议继承。协议继承总是在协议声明本身中指定。</p><h3 id="提供默认实现" tabindex="-1"><a class="header-anchor" href="#提供默认实现" aria-hidden="true">#</a> 提供默认实现</h3><p>您可以使用协议扩展为该协议的任何方法或计算属性要求提供默认实现。如果符合的类型提供了自己实现所需的方法或属性，则将使用该实现而不是扩展提供的实现。</p><p>注意</p><p>扩展提供的默认实现的协议要求与任择议定书要求不同。虽然符合要求的类型不必提供它们自己的实现，但可以调用默认实现的需求，而无需可选的链式。</p><p>例如，继承<code>TextRepresentable</code>协议的<code>PrettyTextRepresentable</code>协议可以提供其resedprettyTextualDescription属性的默认实现，以简单地返回访问<code>textualDescription</code>属性的结果：</p><ol><li>extension PrettyTextRepresentable {</li><li>​ var prettyTextualDescription: String {</li><li>​ return textualDescription</li><li>​ }</li><li>}</li></ol><h3 id="为协议扩展添加约束" tabindex="-1"><a class="header-anchor" href="#为协议扩展添加约束" aria-hidden="true">#</a> 为协议扩展添加约束</h3>',26),we=o("code",null,"where",-1),ye=o("code",null,"where",-1),Te={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID192",target:"_blank",rel:"noopener noreferrer"},Ce=t("<p>例如，您可以定义<code>Collection</code>协议的扩展，该扩展适用于其元素符合<code>Equatable</code>协议的任何集合。通过将集合的元素限制到标准库的一部分<code>Equatable</code>协议，您可以使用<code>==</code>和<code>!=</code>运算符来检查两个元素之间的等式和不等式。</p><ol><li>extension Collection where Element: Equatable {</li><li>​ func allEqual() -&gt; Bool {</li><li>​ for element in self {</li><li>​ if element != self.first {</li><li>​ return false</li><li>​ }</li><li>​ }</li><li>​ return true</li><li>​ }</li><li>}</li></ol><p>只有当集合中的所有元素相等时，<code>allEqual()</code>方法才会返回<code>true</code>。</p><p>考虑两个整数数组，一个所有元素都相同，另一个不相同：</p><ol><li>let equalNumbers = [100, 100, 100, 100, 100]</li><li>let differentNumbers = [100, 100, 200, 100, 200]</li></ol><p>由于数组符合<code>Collection</code>，整数符合<code>Equatable</code>，<code>equalNumbers</code>和<code>differentNumbers</code>可以使用<code>allEqual()</code>方法：</p><ol><li>print(equalNumbers.allEqual())</li><li>// Prints &quot;true&quot;</li><li>print(differentNumbers.allEqual())</li><li>// Prints &quot;false&quot;</li></ol><p>注意</p><p>如果符合要求的类型满足为同一方法或属性提供实现的多个约束扩展的要求，Swift将使用与最专业约束相对应的实现。</p>",9);function ke(ve,Ae){const i=d("ExternalLinkIcon");return a(),r("div",null,[s,o("p",null,[e("有时，方法需要修改（或"),u,e("）它所属的实例。例如，值类型（即结构和枚举）上的方法，您将"),p,e("关键字放在方法的"),h,e("关键字之前，以指示允许该方法修改其所属的实例和该实例的任何属性。这个过程在"),o("a",m,[e("从实例内方法修改值类型中"),l(i)]),e("进行了描述。")]),g,o("p",null,[e("有关所需初始化器的更多信息，请参阅"),o("a",f,[e("所需初始化器"),l(i)]),e("。")]),b,o("p",null,[e("您不需要在标有"),_,e("修饰符的类上使用"),S,e("修饰符标记协议初始化器实现，因为最终类无法子类。有关"),q,e("修饰符的更多信息，请参阅"),o("a",D,[e("防止覆盖"),l(i)]),e("。")]),x,o("p",null,[e("协议可以定义符合类型的故障初始化器要求，如"),o("a",w,[e("故障初始化器"),l(i)]),e("中定义。")]),y,o("p",null,[T,e("属性为"),C,e("类型。因此，您可以将其设置为采用"),k,e("协议"),v,e("类型的实例。您分配给此属性的实例不需要其他内容，除非实例必须采用"),A,e("协议。由于其类型是"),R,e("，"),G,e("类中的代码只能以适用于所有符合此协议的生成器的方式与"),P,e("交互。这意味着它不能使用由生成器底层类型定义的任何方法或属性。但是，您可以从协议类型降级类型到底层类型，就像您可以从超类向下转换到子类一样，正如在"),o("a",L,[e("向下转换"),l(i)]),e("中讨论的那样。")]),I,o("p",null,[e("可以使用"),N,e("协议来跟踪"),H,e("的进度。为了防止强引用周期，委托被声明为弱引用。有关弱引用的信息，请参阅"),o("a",j,[e("类实例之间的强引用周期"),l(i)]),e("。将协议标记为仅类可以让"),E,e("类在本章后面声明其委托必须使用弱引用。正如在仅"),o("a",O,[e("类协议"),l(i)]),e("中讨论的那样，仅类协议通过从"),B,e("继承来标记。")]),o("p",null,[e("这是最初在"),o("a",F,[e("Control Flow"),l(i)]),e("中引入"),z,e("游戏的一个版本。此版本适用于使用"),V,e("实例进行骰子卷；采用"),W,e("协议；并通知"),M,e("其进度：")]),Z,o("p",null,[e("有关"),J,e("游戏玩法的描述，请参阅"),o("a",U,[e("Break"),l(i)]),e("。")]),Y,o("p",null,[e("即使您无法访问现有类型的源代码，您也可以扩展现有类型以采用和遵守新协议。扩展可以向现有类型添加新的属性、方法和下标，因此能够添加协议可能要求的任何要求。有关扩展的更多信息，请参阅"),o("a",$,[e("扩展"),l(i)]),e("。")]),K,o("p",null,[e("只有在特定条件下，例如当类型的通用参数符合协议时，通用类型才能满足协议的要求。您可以通过在扩展类型时列出约束，使泛型类型有条件地符合协议。通过编写通用"),Q,e("子句，在您采用的协议名称后写入这些约束。有关通用"),X,e("子句的更多信息，请参阅"),o("a",ee,[e("通用where子句"),l(i)]),e("。")]),oe,o("p",null,[e("协议可以用作存储在集合中的类型，如数组或字典，如"),o("a",ie,[e("协议"),l(i)]),e("中所述。此示例创建一个"),le,e("事物数组：")]),te,o("p",null,[e("当该协议要求定义的行为假设或要求符合的类型具有参考语义而不是值语义时，请使用仅类协议。有关引用和值语义的更多信息，请参阅"),o("a",ce,[e("结构和枚举是值类型"),l(i)]),e("，"),o("a",de,[e("类是参考类型"),l(i)]),e("。")]),ae,o("p",null,[e("您可以使用"),o("a",re,[e("类型转换"),l(i)]),e("中描述的"),ne,e("和"),se,e("运算符来检查协议一致性，并转换为特定协议。检查和转换到协议遵循与检查和转换到类型完全相同的语法：")]),ue,o("p",null,[e("可选协议要求可以通过可选链调用，以解释该要求不是由符合协议的类型实现的可能性。调用可选方法时，您可以通过在方法名称后写一个问号来检查其实现，例如"),pe,e("有关可选链的信息，请参阅"),o("a",he,[e("可选链"),l(i)]),e("。")]),me,o("p",null,[e("Because the call to "),ge,e(" can fail for either of these two reasons, the call returns an "),fe,e(),be,e(" value. This is true even though "),_e,e(" is defined as returning a non-optional "),Se,e(" value in the definition of "),qe,e(". Even though there are two optional chaining operations, one after another, the result is still wrapped in a single optional. For more information about using multiple optional chaining operations, see "),o("a",De,[e("Linking Multiple Levels of Chaining"),l(i)]),e(".")]),xe,o("p",null,[e("当您定义协议扩展时，您可以指定符合要求的类型在扩展的方法和属性可用之前必须满足的约束。您通过编写通用"),we,e("子句，在您要扩展的协议名称后编写这些约束。有关通用"),ye,e("子句的更多信息，请参阅"),o("a",Te,[e("通用where子句"),l(i)]),e("。")]),Ce])}const Ge=c(n,[["render",ke],["__file","31.swift-protocols.html.vue"]]);export{Ge as default};
