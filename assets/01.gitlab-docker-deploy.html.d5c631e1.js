import{_ as p,r as i,o as l,c as o,a as n,b as s,d as e,e as t}from"./app.4659d0e0.js";const c={},r=n("h1",{id:"gitlab-docker方式部署",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gitlab-docker方式部署","aria-hidden":"true"},"#"),s(" Gitlab - Docker方式部署")],-1),u={href:"https://juejin.cn/post/6991435962303643679#heading-8",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="_1-docker拉取gitlab社区版" tabindex="-1"><a class="header-anchor" href="#_1-docker拉取gitlab社区版" aria-hidden="true">#</a> 1. docker拉取gitlab社区版</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull gitlab/gitlab-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看是否拉取成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> images
REPOSITORY         TAG       IMAGE ID       CREATED      SIZE
gitlab/gitlab-ce   latest    75d591b81fd7   <span class="token number">4</span> days ago   <span class="token number">2</span>.23GB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-使用容器卷将数据映射到本地并运行" tabindex="-1"><a class="header-anchor" href="#_2-使用容器卷将数据映射到本地并运行" aria-hidden="true">#</a> 2. 使用容器卷将数据映射到本地并运行</h2><table><thead><tr><th>宿主机位置</th><th>容器位置</th><th>作用</th></tr></thead><tbody><tr><td>/usr/local/gitlab/config</td><td>/etc/gitlab</td><td>用于存储 GitLab 配置文件</td></tr><tr><td>/usr/local/gitlab/logs</td><td>/var/log/gitlab</td><td>用于存储日志</td></tr><tr><td>/usr/local/gitlab/data</td><td>/var/opt/gitlab</td><td>用于存储应用数据</td></tr></tbody></table><h3 id="_2-1-在宿主机创建映射目录" tabindex="-1"><a class="header-anchor" href="#_2-1-在宿主机创建映射目录" aria-hidden="true">#</a> 2.1. 在宿主机创建映射目录</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/gitlab/config	<span class="token comment">#递归创建目录，即使上级目录不存在，会按目录层级自动创建目录</span>
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/gitlab/logs
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/gitlab/data
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token builtin class-name">cd</span> /usr/local/gitlab
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">ls</span>
config  data  logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建方法" tabindex="-1"><a class="header-anchor" href="#_3-创建方法" aria-hidden="true">#</a> 3. 创建方法</h2><h3 id="_3-1-创建方法一" tabindex="-1"><a class="header-anchor" href="#_3-1-创建方法一" aria-hidden="true">#</a> 3.1 创建方法一</h3><h4 id="_3-1-1-创建gitlab-start-sh文件" tabindex="-1"><a class="header-anchor" href="#_3-1-1-创建gitlab-start-sh文件" aria-hidden="true">#</a> 3.1.1. 创建<code>gitlab_start.sh</code>文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">touch</span> gitlab_start.sh
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">vim</span> gitlab_start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编写内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token assign-left variable">GITLAB_HOME</span><span class="token operator">=</span>/usr/local/gitlab
<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--detach</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--hostname</span> 你的服务ip <span class="token punctuation">\\</span> 
    <span class="token parameter variable">--publish</span> <span class="token number">443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">8090</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">10080</span>:22 <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/config:/etc/gitlab <span class="token punctuation">\\</span>
    <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/logs:/var/log/gitlab <span class="token punctuation">\\</span>
    <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/data:/var/opt/gitlab <span class="token punctuation">\\</span>
    gitlab/gitlab-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参数说明：</p><p>--detach: 设置容器后台运行 --hostname: 设置容器的 hostname,如果是本地localhost ，否则使用外网ip --publish: 端口转发规则（80：Http 访问端口，443：Https 访问端口，10080：主机的 ssh 访问端口，22：Docker 容器中 ssh 访问端口） --name：容器名称 --restart always：每次启动容器就重启GitLab --volume: 共享目录挂载，即 docker 容器内外数据共享 --e：配置 Gitlab 运行的环境变量</p></blockquote><p>在该文件目录下,授予<code>gitlab_start.sh</code>执行权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x gitlab_start.sh	
./gitlab_start.sh		<span class="token comment">#执行脚本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-2-可能遇到的错误" tabindex="-1"><a class="header-anchor" href="#_3-1-2-可能遇到的错误" aria-hidden="true">#</a> 3.1.2. 可能遇到的错误</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> ./gitlab_start.sh
000dc7b1b6e35d94171be203c49ef7a57a1ffb8ea76c72b6765cbed9b5de347b
docker: Error response from daemon: driver failed programming external connectivity on endpoint gitlab <span class="token punctuation">(</span>757b5ee12c5202b00ff312c9a927621ebb63e3e5272c827ba36baf19614ee7d7<span class="token punctuation">)</span>: Error starting userland proxy: listen tcp4 <span class="token number">0.0</span>.0.0:80: bind: address already <span class="token keyword">in</span> use.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意端口是否被占用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">netstat</span> <span class="token parameter variable">-ntulp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8090</span>  <span class="token comment">#查看所有80端口使用情况</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:80              <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">13389</span>/nginx: master
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::8080                 :::*                    LISTEN      <span class="token number">5233</span>/java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改<code>gitlab_start.sh</code>文件,将映射到宿主机的端口改为<code>8088</code>，或者其它没被占用的端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    <span class="token parameter variable">--publish</span> <span class="token number">443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">8088</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">10080</span>:22 <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新运行<code>./gitlab_start.sh</code>文件，报错如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> ./gitlab_start.sh
docker: Error response from daemon: Conflict. The container name <span class="token string">&quot;/gitlab&quot;</span> is already <span class="token keyword">in</span> use by container <span class="token string">&quot;000dc7b1b6e35d94171be203c49ef7a57a1ffb8ea76c72b6765cbed9b5de347b&quot;</span><span class="token builtin class-name">.</span> You have to remove <span class="token punctuation">(</span>or <span class="token function">rename</span><span class="token punctuation">)</span> that container to be able to reuse that name.
See <span class="token string">&#39;docker run --help&#39;</span><span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为之前的容器虽然没有运行起来，但是已经创建了，把它删除掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
CONTAINER ID   IMAGE                     COMMAND             CREATED         STATUS    PORTS     NAMES
000dc7b1b6e3   gitlab/gitlab-ce:latest   <span class="token string">&quot;/assets/wrapper&quot;</span>   <span class="token number">7</span> minutes ago   Created             gitlab
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">rm</span> 000d
000d
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行<code>gitlab_start.sh</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> ./gitlab_start.sh
70b9da8332b287b9c154988e03eb6b92ba6c360f985d704b1b703367ffe30732
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE                     COMMAND             CREATED         STATUS                            PORTS                                                                                                                   NAMES
70b9da8332b2   gitlab/gitlab-ce:latest   <span class="token string">&quot;/assets/wrapper&quot;</span>   <span class="token number">4</span> seconds ago   Up <span class="token number">3</span> seconds <span class="token punctuation">(</span>health: starting<span class="token punctuation">)</span>   <span class="token number">0.0</span>.0.0:443-<span class="token operator">&gt;</span><span class="token number">443</span>/tcp, :::443-<span class="token operator">&gt;</span><span class="token number">443</span>/tcp, <span class="token number">0.0</span>.0.0:10080-<span class="token operator">&gt;</span><span class="token number">22</span>/tcp, :::10080-<span class="token operator">&gt;</span><span class="token number">22</span>/tcp, <span class="token number">0.0</span>.0.0:8088-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp, :::8088-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp   gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到容器成功启动</p><h3 id="_3-2创建方法二" tabindex="-1"><a class="header-anchor" href="#_3-2创建方法二" aria-hidden="true">#</a> 3.2创建方法二</h3>`,31),b=n("code",null,"docker-compose.yml",-1),k=n("code",null,"docker-compose up -d",-1),m=n("code",null,"docker-compose",-1),v={href:"https://link.juejin.cn/?target=https%3A%2F%2Fyeasy.gitbook.io%2Fdocker_practice%2Fcompose%2Finstall",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;2&#39;</span>
services:
    gitlab:
      image: <span class="token string">&#39;gitlab/gitlab-ce:latest&#39;</span>
      container_name: <span class="token string">&quot;gitlab&quot;</span>
      restart: always
      hostname: <span class="token string">&#39;39.105.15.40&#39;</span>
      environment:
        TZ: <span class="token string">&#39;Asia/Shanghai&#39;</span>
        GITLAB_OMNIBUS_CONFIG: <span class="token operator">|</span>
          external_url <span class="token string">&#39;http://39.105.15.40:8088&#39;</span>
          gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_shell_ssh_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10080</span>
          gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;time_zone&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>
      ports:
        - <span class="token string">&#39;8088:8088&#39;</span>
        - <span class="token string">&#39;10080:22&#39;</span>
        - <span class="token string">&#39;443:443&#39;</span>
      volumes:
        - /usr/local/gitlab/config:/etc/gitlab
        - /usr/local/gitlab/logs:/var/log/gitlab
        - /usr/local/gitlab/data:/var/opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注</strong>：端口和映射目录可根据需要修改</p><p>若开放访问端口为<code>80</code>，<code>external_url</code>可不加端口号，默认80</p><h2 id="_4-修改gitlab配置文件-方法一需要" tabindex="-1"><a class="header-anchor" href="#_4-修改gitlab配置文件-方法一需要" aria-hidden="true">#</a> 4. 修改gitlab配置文件（方法一需要）</h2><p>若以<strong>3.1</strong>方法创建，需要修改相关配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /usr/local/gitlab/config/gitlab.rb

<span class="token comment"># 改SSH端口为10080，以便不和宿主机22端口冲突</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;gitlab_shell_ssh_port&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10080</span>

<span class="token comment"># 配置外部访问地址</span>
<span class="token comment"># 旧版本 </span>
<span class="token comment"># external_url &#39;ip地址&#39; </span>
<span class="token comment"># 新版本 </span>
external_url <span class="token string">&#39;http://ip地址&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-应用配置-重启服务" tabindex="-1"><a class="header-anchor" href="#_4-1-应用配置-重启服务" aria-hidden="true">#</a> 4.1 应用配置，重启服务</h3><p>在Gitlab容器<strong>运行状态</strong>时，重启服务，并远程访问网站测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入gitlab bash</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab <span class="token function">bash</span>    
<span class="token comment"># 重新应用gitlab的配置</span>
gitlab-ctl reconfigure
<span class="token comment"># 重启gitlab服务</span>
gitlab-ctl restart
<span class="token comment"># 查看gitlab运行状态</span>
gitlab-ctl status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若访问Gitlab出现502等错误，使用命令检查错误原因</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab-rake gitlab:check
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>e.g.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Try fixing it:
  Make sure GitLab is running<span class="token punctuation">;</span>
  Check the gitlab-shell configuration file:
  <span class="token function">sudo</span> <span class="token parameter variable">-u</span> <span class="token function">git</span> <span class="token parameter variable">-H</span> editor /opt/gitlab/embedded/service/gitlab-shell/config.yml
  Please fix the error above and rerun the checks.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看上述配置文件，查找错误原因</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b12761ef3bc4f93bf1e650e808a3f5c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.image" alt="image-20210711224805313.png"></p><h2 id="访问gitlab失败错误" tabindex="-1"><a class="header-anchor" href="#访问gitlab失败错误" aria-hidden="true">#</a> 访问GitLab失败错误</h2><p>虽然容器启动成功，但是却没办法根据<strong>ip:port</strong>访问gitlab</p><h3 id="启动一个tomcat容器测试端口" tabindex="-1"><a class="header-anchor" href="#启动一个tomcat容器测试端口" aria-hidden="true">#</a> 启动一个tomcat容器测试端口</h3><p>拉取tomcat镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull tomcat:jdk8-openjdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了测试8088端口是否可用，先把gitlab的容器暂停</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动tomcat容器，并将tomcat容器的8080端口映射到宿主机的8088端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> tomcat <span class="token parameter variable">-p</span> <span class="token number">8088</span>:8080 tomcat:jdk8-openjdk
aa29b816196ae32f12915a74e447f01bedae64cd200aaa5cab0dedcc383710f7
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE                 COMMAND             CREATED         STATUS         PORTS
            NAMES
aa29b816196a   tomcat:jdk8-openjdk   <span class="token string">&quot;catalina.sh run&quot;</span>   <span class="token number">3</span> seconds ago   Up <span class="token number">3</span> seconds   <span class="token number">0.0</span>.0.0:8088-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8088-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp   tomcat
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">lsof</span> <span class="token parameter variable">-i:8088</span>
COMMAND    PID <span class="token environment constant">USER</span>   FD   TYPE  DEVICE SIZE/OFF NODE NAME
docker-pr <span class="token number">2257</span> root    4u  IPv4 <span class="token number">2690446</span>      0t0  TCP *:radan-http <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>
docker-pr <span class="token number">2262</span> root    4u  IPv6 <span class="token number">2689770</span>      0t0  TCP *:radan-http <span class="token punctuation">(</span>LISTEN<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一切正常，访问ip:8088，还是和以前一样访问不了</p><h3 id="开启防火墙并打开端口" tabindex="-1"><a class="header-anchor" href="#开启防火墙并打开端口" aria-hidden="true">#</a> 开启防火墙并打开端口</h3><p>因为之前系统的防火墙一直是关闭的并且其它的服务能正常访问，所以没有怀疑是防火墙的问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> firewall-cmd <span class="token parameter variable">--state</span>
not running
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token number">8088</span>/tcp
FirewallD is not running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把防火墙打开</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> systemctl start firewalld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问之前能正常访问的服务，果然没法正常访问。</p><p>把该服务的端口开发，正常访问。</p><p>打开8088端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token number">8088</span>/tcp
success
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> firewall-cmd <span class="token parameter variable">--reload</span>
success
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次访问</p><p>返回tomcat的404页面：<strong>HTTP Status 404 – Not Found</strong></p><p>虽然是404页面，但是说明此时的端口是能正常访问的</p><h3 id="再次启动gitlab服务" tabindex="-1"><a class="header-anchor" href="#再次启动gitlab服务" aria-hidden="true">#</a> 再次启动gitlab服务</h3><p>把tomcat的容器停止运行，重新运行gitlab容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">docker</span> stop tomcat
tomcat
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
<span class="token punctuation">[</span>root@test ~<span class="token punctuation">]</span> <span class="token function">docker</span> start gitlab
Error response from daemon: driver failed programming external connectivity on endpoint gitlab <span class="token punctuation">(</span>1d8b474e20fe113724f1c429c75b6ac3ece200e9c0beacb980907c15470c7d3e<span class="token punctuation">)</span>:  <span class="token punctuation">(</span>iptables failed: iptables <span class="token parameter variable">--wait</span> <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-d</span> <span class="token number">0</span>/0 <span class="token parameter variable">--dport</span> <span class="token number">10080</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.18</span>.0.2:22 <span class="token operator">!</span> <span class="token parameter variable">-i</span> br-12aa369ee4a6: iptables: No chain/target/match by that name.
 <span class="token punctuation">(</span>exit status <span class="token number">1</span><span class="token punctuation">))</span>
Error: failed to start containers: gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然没启动成功，但离成功更进一步了:)</p><p>尝试把这个容器删除掉，再创建一次后还是得到这个错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> systemctl restart <span class="token function">docker</span>
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
Starting gitlab <span class="token punctuation">..</span>. <span class="token keyword">done</span>
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是访问不了，检查一下GitLab内部是否有问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token function">ps</span>
CONTAINER ID   IMAGE                     COMMAND             CREATED          STATUS                   PORTS
                                                                                                                   NAMES
7528489258e0   gitlab/gitlab-ce:latest   <span class="token string">&quot;/assets/wrapper&quot;</span>   <span class="token number">18</span> minutes ago   Up <span class="token number">2</span> minutes <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">0.0</span>.0.0:443-<span class="token operator">&gt;</span><span class="token number">443</span>/tcp, :::443-<span class="token operator">&gt;</span><span class="token number">443</span>/tcp, <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:8088-<span class="token operator">&gt;</span><span class="token number">8088</span>/tcp, :::8088-<span class="token operator">&gt;</span><span class="token number">8088</span>/tcp, <span class="token number">0.0</span>.0.0:10080-<span class="token operator">&gt;</span><span class="token number">22</span>/tcp, :::10080-<span class="token operator">&gt;</span><span class="token number">22</span>/tcp   gitlab
<span class="token punctuation">[</span>root@test gitlab<span class="token punctuation">]</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab <span class="token function">bash</span>
root@8:/ gitlab-ctl status
run: alertmanager: <span class="token punctuation">(</span>pid <span class="token number">769</span><span class="token punctuation">)</span> 250s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">621</span><span class="token punctuation">)</span> 281s
run: gitaly: <span class="token punctuation">(</span>pid <span class="token number">281</span><span class="token punctuation">)</span> 339s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">316</span><span class="token punctuation">)</span> 337s
run: gitlab-exporter: <span class="token punctuation">(</span>pid <span class="token number">746</span><span class="token punctuation">)</span> 251s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">564</span><span class="token punctuation">)</span> 302s
run: gitlab-workhorse: <span class="token punctuation">(</span>pid <span class="token number">737</span><span class="token punctuation">)</span> 251s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">525</span><span class="token punctuation">)</span> 314s
run: grafana: <span class="token punctuation">(</span>pid <span class="token number">784</span><span class="token punctuation">)</span> 249s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">677</span><span class="token punctuation">)</span> 270s
run: logrotate: <span class="token punctuation">(</span>pid <span class="token number">253</span><span class="token punctuation">)</span> 351s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">261</span><span class="token punctuation">)</span> 350s
run: nginx: <span class="token punctuation">(</span>pid <span class="token number">539</span><span class="token punctuation">)</span> 309s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">548</span><span class="token punctuation">)</span> 308s
run: postgres-exporter: <span class="token punctuation">(</span>pid <span class="token number">777</span><span class="token punctuation">)</span> 249s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">636</span><span class="token punctuation">)</span> 278s
run: postgresql: <span class="token punctuation">(</span>pid <span class="token number">396</span><span class="token punctuation">)</span> 333s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">484</span><span class="token punctuation">)</span> 330s
run: prometheus: <span class="token punctuation">(</span>pid <span class="token number">759</span><span class="token punctuation">)</span> 250s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">607</span><span class="token punctuation">)</span> 288s
run: puma: <span class="token punctuation">(</span>pid <span class="token number">487</span><span class="token punctuation">)</span> 327s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">495</span><span class="token punctuation">)</span> 324s
run: redis: <span class="token punctuation">(</span>pid <span class="token number">265</span><span class="token punctuation">)</span> 345s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">273</span><span class="token punctuation">)</span> 344s
run: redis-exporter: <span class="token punctuation">(</span>pid <span class="token number">748</span><span class="token punctuation">)</span> 251s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">587</span><span class="token punctuation">)</span> 294s
run: sidekiq: <span class="token punctuation">(</span>pid <span class="token number">500</span><span class="token punctuation">)</span> 321s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">511</span><span class="token punctuation">)</span> 318s
run: sshd: <span class="token punctuation">(</span>pid <span class="token number">31</span><span class="token punctuation">)</span> 361s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid <span class="token number">30</span><span class="token punctuation">)</span> 361s
root@8:/ gitlab-rake gitlab:check
Checking GitLab subtasks <span class="token punctuation">..</span>.

Checking GitLab Shell <span class="token punctuation">..</span>.

GitLab Shell: <span class="token punctuation">..</span>. GitLab Shell version <span class="token operator">&gt;=</span> <span class="token number">13.19</span>.0 ? <span class="token punctuation">..</span>. OK <span class="token punctuation">(</span><span class="token number">13.19</span>.0<span class="token punctuation">)</span>
Running /opt/gitlab/embedded/service/gitlab-shell/bin/check
Internal API available: OK
Redis available via internal API: OK
gitlab-shell self-check successful

Checking GitLab Shell <span class="token punctuation">..</span>. Finished

Checking Gitaly <span class="token punctuation">..</span>.

Gitaly: <span class="token punctuation">..</span>. default <span class="token punctuation">..</span>. OK

Checking Gitaly <span class="token punctuation">..</span>. Finished

Checking Sidekiq <span class="token punctuation">..</span>.

Sidekiq: <span class="token punctuation">..</span>. Running? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Number of Sidekiq processes <span class="token punctuation">(</span>cluster/worker<span class="token punctuation">)</span> <span class="token punctuation">..</span>. <span class="token number">1</span>/1

Checking Sidekiq <span class="token punctuation">..</span>. Finished

Checking Incoming Email <span class="token punctuation">..</span>.

Incoming Email: <span class="token punctuation">..</span>. Reply by email is disabled <span class="token keyword">in</span> config/gitlab.yml

Checking Incoming Email <span class="token punctuation">..</span>. Finished

Checking LDAP <span class="token punctuation">..</span>.

LDAP: <span class="token punctuation">..</span>. LDAP is disabled <span class="token keyword">in</span> config/gitlab.yml

Checking LDAP <span class="token punctuation">..</span>. Finished

Checking GitLab App <span class="token punctuation">..</span>.

Git configured correctly? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Database config exists? <span class="token punctuation">..</span>. <span class="token function">yes</span>
All migrations up? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Database contains orphaned GroupMembers? <span class="token punctuation">..</span>. no
GitLab config exists? <span class="token punctuation">..</span>. <span class="token function">yes</span>
GitLab config up to date? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Log directory writable? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Tmp directory writable? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Uploads directory exists? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Uploads directory has correct permissions? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Uploads directory tmp has correct permissions? <span class="token punctuation">..</span>. skipped <span class="token punctuation">(</span>no tmp uploads folder yet<span class="token punctuation">)</span>
Init script exists? <span class="token punctuation">..</span>. skipped <span class="token punctuation">(</span>omnibus-gitlab has no init script<span class="token punctuation">)</span>
Init script up-to-date? <span class="token punctuation">..</span>. skipped <span class="token punctuation">(</span>omnibus-gitlab has no init script<span class="token punctuation">)</span>
Projects have namespace: <span class="token punctuation">..</span>.
GitLab Instance / Monitoring <span class="token punctuation">..</span>. <span class="token function">yes</span>
Redis version <span class="token operator">&gt;=</span> <span class="token number">5.0</span>.0? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Ruby version <span class="token operator">&gt;=</span> <span class="token number">2.7</span>.2 ? <span class="token punctuation">..</span>. <span class="token function">yes</span> <span class="token punctuation">(</span><span class="token number">2.7</span>.2<span class="token punctuation">)</span>
Git version <span class="token operator">&gt;=</span> <span class="token number">2.31</span>.0 ? <span class="token punctuation">..</span>. <span class="token function">yes</span> <span class="token punctuation">(</span><span class="token number">2.32</span>.0<span class="token punctuation">)</span>
Git user has default SSH configuration? <span class="token punctuation">..</span>. <span class="token function">yes</span>
Active users: <span class="token punctuation">..</span>. <span class="token number">1</span>
Is authorized keys <span class="token function">file</span> accessible? <span class="token punctuation">..</span>. <span class="token function">yes</span>
GitLab configured to store new projects <span class="token keyword">in</span> hashed storage? <span class="token punctuation">..</span>. <span class="token function">yes</span>
All projects are <span class="token keyword">in</span> hashed storage? <span class="token punctuation">..</span>. <span class="token function">yes</span>

Checking GitLab App <span class="token punctuation">..</span>. Finished


Checking GitLab subtasks <span class="token punctuation">..</span>. Finished

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一切正常</p><p>我再次换成tomcat容器进行测试，发现8088端口访问不了了。</p><p>但是在宿主机内ping本机是可以的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test tomcat<span class="token punctuation">]</span> <span class="token function">curl</span> localhost:8088
<span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>HTTP Status <span class="token number">404</span> – Not Found<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&quot;text/css&quot;</span><span class="token operator">&gt;</span>body <span class="token punctuation">{</span>font-family:Tahoma,Arial,sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span> h1, h2, h3, b <span class="token punctuation">{</span>color:white<span class="token punctuation">;</span>background-color:<span class="token comment">#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 – Not Found&lt;/h1&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;p&gt;&lt;b&gt;Type&lt;/b&gt; Status Report&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt; The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.&lt;/p&gt;&lt;hr class=&quot;line&quot; /&gt;&lt;h3&gt;Apache Tomcat/9.0.50&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，换成<strong>ip:8088</strong>则不行</p><h3 id="问题转移-为什么访问不了容器内的服务" tabindex="-1"><a class="header-anchor" href="#问题转移-为什么访问不了容器内的服务" aria-hidden="true">#</a> 问题转移：为什么访问不了容器内的服务</h3>`,51),h=n("p",null,[n("strong",null,"参考")],-1),f={href:"https://link.juejin.cn/?target=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1768097",target:"_blank",rel:"noopener noreferrer"},_={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F278340552",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>根据以上两篇文章，提出<strong>阿里云的内网eth0 网段正好跟Docker 的虚拟网卡都是 172 网段,有冲突</strong></p><p>观察发现我使用的云服务器也是阿里云，并且通过<code>ifconfig</code>查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test config<span class="token punctuation">]</span> <span class="token function">ifconfig</span>
br-12aa369ee4a6: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172.18</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.18</span>.255.255
        inet6 fe80::42:61ff:fedf:d41f  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 02:42:61:df:d4:1f  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">6</span>  bytes <span class="token number">1174</span> <span class="token punctuation">(</span><span class="token number">1.1</span> KiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">22</span>  bytes <span class="token number">1682</span> <span class="token punctuation">(</span><span class="token number">1.6</span> KiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>

docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255
        inet6 fe80::42:5dff:fe6c:be47  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 02:42:5d:6c:be:47  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">283</span>  bytes <span class="token number">18925</span> <span class="token punctuation">(</span><span class="token number">18.4</span> KiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">254</span>  bytes <span class="token number">19725</span> <span class="token punctuation">(</span><span class="token number">19.2</span> KiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>
eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172</span>.xx.x.xxx  netmask <span class="token number">255.255</span>.240.0  broadcast <span class="token number">172.16</span>.15.255
        inet6 fe80::216:3eff:fe01:2f48  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 00:16:3e:01:2f:48  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">504273</span>  bytes <span class="token number">329083359</span> <span class="token punctuation">(</span><span class="token number">313.8</span> MiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">273686</span>  bytes <span class="token number">220530043</span> <span class="token punctuation">(</span><span class="token number">210.3</span> MiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且查看阿里云的内网ip确实也是<code>172</code>开头。</p><p>编辑配置文件<code>/etc/docker/daemon.json</code> ,若<code>daemon.json</code>文件不存在新建即可。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;bip&quot;</span><span class="token operator">:</span> <span class="token string">&quot;192.168.1.5/24&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动docker服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
复制代码
<span class="token punctuation">[</span>root@test docker<span class="token punctuation">]</span><span class="token comment"># ifconfig</span>
br-12aa369ee4a6: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172.18</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.18</span>.255.255
        inet6 fe80::42:61ff:fedf:d41f  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 02:42:61:df:d4:1f  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">508550</span>  bytes <span class="token number">329587116</span> <span class="token punctuation">(</span><span class="token number">314.3</span> MiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">276951</span>  bytes <span class="token number">223924395</span> <span class="token punctuation">(</span><span class="token number">213.5</span> MiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>

docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">192.168</span>.1.5  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.1.255
        inet6 fe80::42:5dff:fe6c:be47  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 02:42:5d:6c:be:47  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">283</span>  bytes <span class="token number">18925</span> <span class="token punctuation">(</span><span class="token number">18.4</span> KiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">258</span>  bytes <span class="token number">20085</span> <span class="token punctuation">(</span><span class="token number">19.6</span> KiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>

eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">&gt;</span>  mtu <span class="token number">1500</span>
        inet <span class="token number">172</span>.xx.x.xxx  netmask <span class="token number">255.255</span>.240.0  broadcast <span class="token number">172.16</span>.15.255
        inet6 fe80::216:3eff:fe01:2f48  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">&gt;</span>
        ether 00:16:3e:01:2f:48  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>
        RX packets <span class="token number">508550</span>  bytes <span class="token number">329587116</span> <span class="token punctuation">(</span><span class="token number">314.3</span> MiB<span class="token punctuation">)</span>
        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>
        TX packets <span class="token number">276958</span>  bytes <span class="token number">223925673</span> <span class="token punctuation">(</span><span class="token number">213.5</span> MiB<span class="token punctuation">)</span>
        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到docker0 的地址变了。</p><p>但是要注意，使用<strong>docker</strong>启动的服务会默认使用<strong>docker0</strong>，如果是用<strong>docker-compose</strong>启动的服务则不会。上面的<strong>br-12aa369ee4a6</strong>对应的是docker-compose启动的服务，可以看到还是172的网段。</p>`,10),A={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.cnblogs.com%2Flemon-le%2Fp%2F10531449.html",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>根据该文使用方法2，即修改<code>daemon.json</code>。但并不能成功访问,我的环境是：<strong>docker:20.10.7</strong>,<strong>docker-compose:1.24.1</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;bip&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;192.168.1.5/24&quot;</span>,
    <span class="token string">&quot;debug&quot;</span><span class="token builtin class-name">:</span> true,
    <span class="token string">&quot;default-address-pools&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">&quot;base&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;192.168.1.5/16&quot;</span>,
      <span class="token string">&quot;size&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">24</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面发现访问不成功的原因在于<strong>docker</strong>与防火墙之间的关系，可以关掉防火墙，开启<strong>docker</strong>，不能访问则打开防火墙。在它们之间来回试探 = =。 后面尝试过关闭<strong>firewalld</strong>，打开<strong>iptables</strong>。</p><p>在启用<strong>iptables</strong>时，一般关掉<strong>iptables</strong>可以正常访问，打开则不能正常访问。 在启用<strong>firewalld</strong>时，按照<strong>docker</strong>和<strong>firewalld</strong>之间启动关闭的顺序不同，有时是开着防火墙能访问，有时是关了防火墙能访问。</p><p>但是容器内不能访问外部网络，该问题现在还未解决。 有一种迂回的解决方法就是容器使用<strong>host</strong>网络模式</p><p><strong>问题</strong>：怀疑是docker，firewalld与iptables之间的设置问题</p>`,6),y={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F69d3ab177655",target:"_blank",rel:"noopener noreferrer"},E={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.cnblogs.com%2Fzl1991%2Fp%2F10531726.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://link.juejin.cn/?target=https%3A%2F%2Ffralef.me%2Fdocker-and-iptables.html",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"还有一种访问不了GitLab的情况是端口映射和配置文件有误。",-1),C=n("p",null,"快速的解决方法：将宿主机端口号和容器号设置相同，可参考下面的博客。",-1),N={href:"https://link.juejin.cn/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fd707f70c60d2",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,[n("img",{src:"https://file.pandacode.cn/blog/202204241629852.png",alt:"image-20210728162107752.png"})],-1),q=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),R=n("p",null,[s("​ 如果系统环境正常，安装会十分顺利，一般不会有奇怪的问题。 我在不同的服务器安装过 ​ "),n("strong",null,"阿里云 CentOS 7.6"),s(": 访问正常，但是因内存不够出现502错误，容器内可正常连接外部网络 ​ "),n("strong",null,"阿里云 Alibaba Cloud Linux 2"),s(": 可能不能正常访问容器，容器内不能正常连接外部网络。怀疑是防火墙与docker的问题。")],-1);function G(M,F){const a=i("ExternalLinkIcon");return l(),o("div",null,[r,n("p",null,[s("转发自："),n("a",u,[s("使用Docker部署GitLab｜8月更文挑战"),e(a)])]),d,n("p",null,[s("创建"),b,s("文件，并在该文件所在的文件夹目录下运行"),k,s(" 需要事先安装"),m,n("a",v,[s("安装docker-compose"),e(a)])]),g,n("blockquote",null,[h,n("p",null,[n("a",f,[s("解决Docker端口映射无法访问问题"),e(a)])]),n("p",null,[n("a",_,[s("阿里云 ECS 的Docker为什么无法端口映射?"),e(a)])])]),x,n("p",null,[n("a",A,[s("docker-compose up使用自定义的网段的两种方式（从其根源指定）"),e(a)])]),T,n("p",null,[n("a",y,[s("Docker与IPtables"),e(a)])]),n("p",null,[n("a",E,[s("docker 端口映射 及外部无法访问问题"),e(a)])]),n("p",null,[n("a",S,[s("Docker and IPtables"),e(a)])]),I,C,n("p",null,[n("a",N,[s("利用GitLab Docker images安装GitLab（填坑）"),e(a)])]),D,q,R])}const L=p(c,[["render",G],["__file","01.gitlab-docker-deploy.html.vue"]]);export{L as default};
