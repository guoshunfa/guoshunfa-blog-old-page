import{_ as t,r as d,o as l,c as i,a as s,b as a,d as e,e as r}from"./app.4659d0e0.js";const p={},o=r(`<h1 id="shell-base-用法描述" tabindex="-1"><a class="header-anchor" href="#shell-base-用法描述" aria-hidden="true">#</a> Shell - base 用法描述</h1><blockquote><p>bash是Linux和Unix下的shell。</p><p>本教程关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p><p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p></blockquote><h2 id="_1-base-shell-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-base-shell-基础知识" aria-hidden="true">#</a> 1. base shell 基础知识</h2><h3 id="_1-1-注释" tabindex="-1"><a class="header-anchor" href="#_1-1-注释" aria-hidden="true">#</a> 1.1. 注释</h3><p><strong>单行注释</strong></p><p>“#”命令代表单行注释，在任何一行代码前加上”#”及将这行变为注释</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 我是注释1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>多行注释</strong></p><p>多行注释则使用:&lt;</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>:<span class="token operator">&lt;&lt;</span><span class="token string">EOF
......
......
.....
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-变量" tabindex="-1"><a class="header-anchor" href="#_1-2-变量" aria-hidden="true">#</a> 1.2. 变量</h3><p><strong>变量定义</strong></p><p>变量定义不用加任何符号，直接用[变量名]=[变量值]：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>命名规则</strong></p><ul><li>变量名和变量值与等号之间不能加空格</li><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p><strong>使用变量</strong></p><p>使用一个定义过的变量，只要在变量前加上美元符即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${name}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>花括号是可选的，主要是为了识别变量边界，例如这种情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ScriptName</span><span class="token operator">=</span><span class="token string">&quot;Java&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;i use <span class="token variable">\${ScriptName}</span>Script&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不加上花括号则可能识别变量名为$ScriptNameScript</p><p><strong>只读变量</strong></p><p>给变量加上readonly命令就能把它变成一个只读的变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
<span class="token builtin class-name">readonly</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除变量</strong></p><p>给变量加上unset命令就能删除这个变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
<span class="token builtin class-name">unset</span> name
<span class="token comment"># 将不会有任何输出</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>变量类型</strong></p><p>在shell中存在三种变量</p><ul><li>局部变量:::局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量:::所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li>shell变量:::shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><h3 id="_1-3-字符串" tabindex="-1"><a class="header-anchor" href="#_1-3-字符串" aria-hidden="true">#</a> 1.3. 字符串</h3><p><strong>字符串定义</strong></p><p>bash中的字符串可以用单引号和双引号，其区别就是，单引号内不能解释变量，而双引号内可以解释变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;$name&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$name</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将输出为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$name</span>
jianjian
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串拼接</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">firstName</span><span class="token operator">=</span><span class="token string">&quot;im&quot;</span>
<span class="token assign-left variable">lastName</span><span class="token operator">=</span><span class="token string">&quot;jianjian&quot;</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${firstName}</span><span class="token variable">\${lastName}</span>&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取字符串长度</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;imjianjian&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>name}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找子字符串</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;oh! Bash is so good!&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> index <span class="token string">&quot;<span class="token variable">$str</span>&quot;</span> is<span class="token variable">\`</span></span>
<span class="token comment"># 将输出7，即在第七位找到is中的s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他找到的是is中的任意一个字符，那个线出现就返回哪个 主义这里使用的是“而不是”,这个符号在exc下面</p><h3 id="_1-4-数组" tabindex="-1"><a class="header-anchor" href="#_1-4-数组" aria-hidden="true">#</a> 1.4. 数组</h3><p><strong>数组定义</strong></p><p>bash支持一维数组，不支持多维数组 数组的下标从0开始，获取数组时下边可以使用算术表达式 数组用（）包裹，每个子元素都用空格分开</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#直接定义</span>
<span class="token assign-left variable">arr1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment">#单独定义</span>
arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>
arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>
arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>
arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数组使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${arr<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数组长度</strong></p><p>获取数组的长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>arr(*)}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取单个元素长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">arr</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token number">22</span> <span class="token number">32</span> <span class="token number">42</span><span class="token punctuation">)</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>arr<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-传参" tabindex="-1"><a class="header-anchor" href="#_1-5-传参" aria-hidden="true">#</a> 1.5. 传参</h3><p><strong>使用方法</strong></p><p>我们在使用脚本文件的时候可以向文件中传递一些参数，脚本则可以使用n这种方式来获取参数，n这种方式来获取参数，0代表文件名，1代表的是第一个参数，1代表的是第一个参数，2代表第二个参数，以此类推。。。</p><p>test1.sh:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;文件名：<span class="token variable">$0</span>&quot;</span><span class="token punctuation">;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数为：<span class="token variable">$1</span>&quot;</span><span class="token punctuation">;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数为：<span class="token variable">$2</span>&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后用下列代码运行该文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> test1.sh <span class="token number">1</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>文件名：test1.sh
第一个参数为：1
第二个参数为：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他字符</strong></p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>参数个数</td></tr><tr><td>$*</td><td>输出所有的参数</td></tr><tr><td>$$</td><td>当前脚本进程ID</td></tr><tr><td>$!</td><td>后台运行的最后一个进程ID</td></tr><tr><td>$@</td><td>与$*相同，但使用时家加引号</td></tr><tr><td>$-</td><td>现时shell当前选项</td></tr><tr><td>$?</td><td>现时最后命令的退出状态。0表示没有错误，其他表示错误</td></tr></tbody></table><h3 id="_1-6-运算符" tabindex="-1"><a class="header-anchor" href="#_1-6-运算符" aria-hidden="true">#</a> 1.6. 运算符</h3><p><strong>算术运算符</strong></p><p>bash本身不支持简单的数学计算，需要通过其他命令来实现，例如awk和expr</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">2</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;和为:<span class="token variable">\${num}</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他运算符： 设a为10。b为20</p><table><thead><tr><th>运算符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \\* $b</code> 结果为 200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td><code>a=$b</code> 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td><code>[ a==b ]</code> 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td><code>[ a!=b ]</code> 返回 true。</td></tr></tbody></table><p><strong>关系运算符</strong></p><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</p><p>设a为10。b为20</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td><code>[ a −eq b ]</code> 返回 false。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td><code>[ a −ne b ]</code> 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td><code>[ a −gt b ]</code> 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td><code>[ a −ltb ]</code> 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td><code>[ a −ge b ]</code> 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td><code>[ a −le b ]</code> 返回 true。</td></tr></tbody></table><p><strong>布尔运算符</strong></p><p>设a为10。b为20</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td><code>[ a −lt 20 −o b -gt 100 ]</code> 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td><code>[ a −lt 20 −a b -gt 100 ]</code> 返回 false。</td></tr></tbody></table><p><strong>逻辑运算符</strong></p><p>设a为10。b为20</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的 AND</td><td><code>[[ a -lt 100 &amp;&amp;b -gt 100 ]] </code>返回 false</td></tr><tr><td>||</td><td>逻辑的 OR</td><td><code>[[ a -lt 100 &amp;&amp;b -gt 100 ]]</code> 返回 true</td></tr></tbody></table><p><strong>字符串运算符</strong></p><p>设a 为 “abc”，b 为 “efg”：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td><code>[ a=b ]</code> 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td><code>[ a!=b ]</code> 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td><code>[ -z $a ]</code> 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否为0，不为0返回 true。</td><td><code>[ -n “$a” ]</code> 返回 true。</td></tr><tr><td>str</td><td>检测字符串是否为空，不为空返回 true。</td><td><code>[ $a ]</code> 返回 true。</td></tr></tbody></table><p><strong>文件测试运算符</strong></p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true</td></tr></tbody></table><h3 id="_1-7-echo命令" tabindex="-1"><a class="header-anchor" href="#_1-7-echo命令" aria-hidden="true">#</a> 1.7. echo命令</h3><p><strong>输出普通字符串</strong></p><p>echo 用于输出字符串，单双引号的作用不同，单引号只输出文本，双引号中可以输出变量，并且双引号也可以省去</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;imjianjian&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;my name is $name&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;my name is <span class="token variable">$name</span>&quot;</span>
<span class="token builtin class-name">echo</span> my name is <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>my name is <span class="token variable">$name</span>
my name is imjianjian
my name is imjianjian
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出转义字符</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span>hello world<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;hello world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>换行/不换行</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -e 开启转义</span>
:<span class="token operator">&lt;&lt;</span><span class="token string">EOF
<span class="token entity" title="\\n">\\n</span> 换行
<span class="token entity" title="\\c">\\c</span> 不换行
EOF</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;hello world! <span class="token entity" title="\\n">\\n</span>&quot;</span> 
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;hello world! <span class="token entity" title="\\c">\\c</span>&quot;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出定向到文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">&gt;</span> testFile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-8-printf命令" tabindex="-1"><a class="header-anchor" href="#_1-8-printf命令" aria-hidden="true">#</a> 1.8. printf命令</h3><p>和echo相比，printf模仿了c语言中的printf()方法，所以移植性更好。printf支持用格式化字符串，定制字符床宽度，对齐等。</p><p><strong>语法</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> string <span class="token punctuation">[</span>argument<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>string 为字符串</li><li>argument 为参数列表</li></ul><p><strong>格式替代符</strong></p><p>在字符串中使用格式替换符占位，然后通过参数来对应带入，并最终输出对应字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">printf</span> <span class="token string">&quot;%-10s %-8s %-6s<span class="token entity" title="\\n">\\n</span>&quot;</span> 姓名 性别 身高
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式替换符有%s,%d,%c,%f等 %s是替代字符串，-为左对齐，不写则是右对齐。10表示字符串将会在10个字符以内的宽度上显示，不足则会用空格占满，炒出的也会正常显示</p><p><strong>转义字符</strong></p><table><thead><tr><th>序列</th><th>说明</th></tr></thead><tbody><tr><td>\\a</td><td>警告字符，通常为ASCII的BEL字符</td></tr><tr><td>\\b</td><td>后退</td></tr><tr><td>\\c</td><td>抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td>\\f</td><td>换页（formfeed）</td></tr><tr><td>\\n</td><td>换行</td></tr><tr><td>\\r</td><td>回车（Carriage return）</td></tr><tr><td>\\t</td><td>水平制表符</td></tr><tr><td>\\v</td><td>垂直制表符</td></tr><tr><td>| 一个字面上的反斜杠字符</td><td></td></tr><tr><td>\\ddd</td><td>表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td>\\0ddd</td><td>表示1到3位的八进制值字符</td></tr></tbody></table><h3 id="_1-9-test命令" tabindex="-1"><a class="header-anchor" href="#_1-9-test命令" aria-hidden="true">#</a> 1.9. test命令</h3><p>test命令用于检测某个条件是否成立，可以用来进行数值比较，字符比较，文件等测试。成立则返回true，否则返回false。</p><blockquote><p>test -eq</p></blockquote><p><strong>数值测试</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-eq</td><td>等于则为真</td></tr><tr><td>-ne</td><td>不等于则为真</td></tr><tr><td>-gt</td><td>大于则为真</td></tr><tr><td>-ge</td><td>大于等于则为真</td></tr><tr><td>-lt</td><td>小于则为真</td></tr><tr><td>-le</td><td>小于等于则为真</td></tr></tbody></table><p><strong>字符测试</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于则为真</td></tr><tr><td>!=</td><td>不相等则为真</td></tr><tr><td>-z 字符串</td><td>字符串的长度为零则为真</td></tr><tr><td>-n 字符串</td><td>字符串的长度不为零则为真</td></tr></tbody></table><p><strong>文件测试</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e 文件名</td><td>如果文件存在则为真</td></tr><tr><td>-r 文件名</td><td>如果文件存在且可读则为真</td></tr><tr><td>-w 文件名</td><td>如果文件存在且可写则为真</td></tr><tr><td>-x 文件名</td><td>如果文件存在且可执行则为真</td></tr><tr><td>-s 文件名</td><td>如果文件存在且至少有一个字符则为真</td></tr><tr><td>-d 文件名</td><td>如果文件存在且为目录则为真</td></tr><tr><td>-f 文件名</td><td>如果文件存在且为普通文件则为真</td></tr><tr><td>-c 文件名</td><td>如果文件存在且为字符型特殊文件则为真</td></tr><tr><td>-b 文件名</td><td>如果文件存在且为块特殊文件则为真</td></tr></tbody></table><h3 id="_1-10-流程控制" tabindex="-1"><a class="header-anchor" href="#_1-10-流程控制" aria-hidden="true">#</a> 1.10. 流程控制</h3><p><strong>if</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>if…else</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">else</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>if else-if else</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> condition
<span class="token keyword">then</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">elif</span> condition
<span class="token keyword">then</span> 
    <span class="token punctuation">..</span>.command
<span class="token keyword">else</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">var</span> <span class="token keyword">in</span> item1 item2 <span class="token punctuation">..</span>. itemN
<span class="token keyword">do</span>
    <span class="token punctuation">..</span>.command
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">while</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>until</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">until</span> condition
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>case</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">case</span> 值 <span class="token keyword">in</span>
模式1<span class="token punctuation">)</span>
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
模式2）
    command1
    command2
    <span class="token punctuation">..</span>.
    commandN
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和大部分语言一样，可以支持使用<strong>break</strong>和<strong>contiune</strong>,来跳出循环</p><h3 id="_1-11-函数" tabindex="-1"><a class="header-anchor" href="#_1-11-函数" aria-hidden="true">#</a> 1.11. 函数</h3><p><strong>语法</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>function<span class="token punctuation">]</span> functionName<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">..</span><span class="token punctuation">..</span>
    <span class="token builtin class-name">return</span> <span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数列表</strong></p><p>与文件传参类似，函数也是使用相同的语法来传参，取参</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> 第一个参数为<span class="token variable">$1</span>
    <span class="token builtin class-name">echo</span> 第二个参数为<span class="token variable">$2</span>
    <span class="token punctuation">..</span>.
    <span class="token punctuation">..</span>.
    <span class="token punctuation">..</span>.
    <span class="token builtin class-name">echo</span> 第10个参数为<span class="token variable">\${10}</span>
    <span class="token builtin class-name">echo</span> 参数共有<span class="token variable">$#</span>个
    <span class="token builtin class-name">echo</span> 输出所有参数 <span class="token variable">$*</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当参数大于10时，参数需要用\${n}来获取</p><p><strong>函数调用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $1 + $2<span class="token variable">\`</span></span>
<span class="token punctuation">}</span>

<span class="token comment">#调用</span>
sun <span class="token number">1</span> <span class="token number">2</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点用函数后，结果通过**$?**来获得</p><h3 id="_1-12-输入输出重定向" tabindex="-1"><a class="header-anchor" href="#_1-12-输入输出重定向" aria-hidden="true">#</a> 1.12. 输入输出重定向</h3><p>bash一般会将输入和所产生的输出都发送到终端，如果要将其输出到其他位置，则需要重定向</p><p><strong>重定向命令</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><p><strong>输出重定向</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>command1 <span class="token operator">&gt;</span> file11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将历史命令输出到history.txt文件中</span>
<span class="token function">history</span> <span class="token operator">&gt;</span> history.txt12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出重定向</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>command1 <span class="token operator">&lt;</span> file11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 统计users文件的行数</span>
<span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token operator">&lt;</span> users12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>/dev/null</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 所有被重定向到/dev/null的文件都会被丢弃，可以起到禁止任何输出的作用。</span>
<span class="token comment"># 可以理解为自动清理的垃圾桶</span>
<span class="token builtin class-name">command</span> <span class="token operator">&gt;</span> /dev/null123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-13-文件引用" tabindex="-1"><a class="header-anchor" href="#_1-13-文件引用" aria-hidden="true">#</a> 1.13. 文件引用</h3><p>和其它语言一样，bash也可以引用外部文件。这样可以把一些公共代码封装到一个独立的文件中。</p><p><strong>引用方式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#.和文件名中要有一个空格</span>
<span class="token builtin class-name">.</span> filename 
或
<span class="token builtin class-name">source</span> filename
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-好用的脚本片段" tabindex="-1"><a class="header-anchor" href="#_2-好用的脚本片段" aria-hidden="true">#</a> 2. 好用的脚本片段</h2><h3 id="_2-1-shell-脚本-cd-到当前脚本所在目录" tabindex="-1"><a class="header-anchor" href="#_2-1-shell-脚本-cd-到当前脚本所在目录" aria-hidden="true">#</a> 2.1. shell 脚本 cd 到当前脚本所在目录</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">dirname</span> $0<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dirname命令的作用是？ <code>man dirname</code>得到如下解释：</p><blockquote><p>dirname - strip last component from file name</p></blockquote><p>通俗来说就是去掉提供的文件名或目录的最后一部分，包括 /。例子如下： <img src="https://cdn.jsdelivr.net/gh/guoshunfa/pandacode-files/blog/202111161818055.png" alt="dirname命令的作用"></p><p>问题</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,173),c={href:"https://blog.csdn.net/JianJianJianJianDe/article/details/81447987",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.cnblogs.com/lqyye/p/7224268.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.jianshu.com/p/b987f5e92c03",target:"_blank",rel:"noopener noreferrer"};function v(m,h){const n=d("ExternalLinkIcon");return l(),i("div",null,[o,s("ul",null,[s("li",null,[s("p",null,[s("a",c,[a("base shell 语法笔记"),e(n)])])]),s("li",null,[s("p",null,[s("a",u,[a("shell脚本实现ssh自动登录远程服务器示例"),e(n)])])]),s("li",null,[s("p",null,[s("a",b,[a("linux expect的使用"),e(n)])])])])])}const k=t(p,[["render",v],["__file","60.shell-base.html.vue"]]);export{k as default};
