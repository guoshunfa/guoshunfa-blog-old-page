import{_ as c,r as o,o as i,c as d,a as n,b as s,d as a,w as l,e as p}from"./app.4659d0e0.js";const u={},r=p(`<h1 id="mongodb-命令记录" tabindex="-1"><a class="header-anchor" href="#mongodb-命令记录" aria-hidden="true">#</a> MongoDB - 命令记录</h1><blockquote><p>一下内容基于MongoDB 4.4.11版本。</p><p>命令行连接数据库方式：</p><ol><li>直接输入<code>mongo</code>。</li><li><code>mongo mongodb://username:password@hostname/dbname</code>。例子：<code>mongo mongodb://admin:123456@123.1.2.3:12345/test01</code></li></ol></blockquote><h2 id="_1-mongodb-主要命令描述" tabindex="-1"><a class="header-anchor" href="#_1-mongodb-主要命令描述" aria-hidden="true">#</a> 1. MongoDB 主要命令描述</h2><blockquote><p><strong>这里直接通过help命令的放回内容进行记录。</strong></p><p>备注：这里描述的表、集合、文档，都是表达数据库表的意思。</p></blockquote><h3 id="_1-1-help-命令" tabindex="-1"><a class="header-anchor" href="#_1-1-help-命令" aria-hidden="true">#</a> 1.1. help 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span>												 关于mongodb主要方法的帮助
	db.help<span class="token punctuation">(</span><span class="token punctuation">)</span>                    关于数据库方法的帮助
	db.mycoll.help<span class="token punctuation">(</span><span class="token punctuation">)</span>             关于数据库表方法的帮助
	sh.help<span class="token punctuation">(</span><span class="token punctuation">)</span>                    分片方法的帮助
	rs.help<span class="token punctuation">(</span><span class="token punctuation">)</span>                    副本集方法的帮助
	<span class="token builtin class-name">help</span> admin                   行政帮助
	<span class="token builtin class-name">help</span> connect                 连接到数据库的帮助
	<span class="token builtin class-name">help</span> keys                    键的快捷方式
	<span class="token builtin class-name">help</span> misc                    misc things to know
	<span class="token builtin class-name">help</span> mr                      mapreduce（一种分布式并行编程模型）

	show dbs                     展示所有数据库的名称
	show collections             展示当前数据库的所有集合（表）名称
	show <span class="token function">users</span>                   展示当前数据库的所有用户
	show profile                 显示时间为<span class="token operator">&gt;=</span> 1ms的最近的system.profile条目
	show logs                    显示可访问的log名称
	show log <span class="token punctuation">[</span>name<span class="token punctuation">]</span>              打印出内存中日志的最后一段，global是默认值
	use <span class="token operator">&lt;</span>db_name<span class="token operator">&gt;</span>                设置当前数据库
	db.mycoll.find<span class="token punctuation">(</span><span class="token punctuation">)</span>             查询集合mycoll中所有的记录
	db.mycoll.find<span class="token punctuation">(</span> <span class="token punctuation">{</span> a <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>  查询集合mycoll中的记录，只查询满足条件a<span class="token operator">=</span><span class="token number">1</span>的记录
	it                           最后一行求值的结果<span class="token punctuation">;</span>用于进一步迭代（目前不知道在哪使用）
	DBQuery.shellBatchSize <span class="token operator">=</span> x   设置shell上显示的项目的默认数量（目前不知道在哪使用）
	<span class="token builtin class-name">exit</span>                         退出mongo shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-db-help-命令" tabindex="-1"><a class="header-anchor" href="#_1-2-db-help-命令" aria-hidden="true">#</a> 1.2. db.help() 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> db.help<span class="token punctuation">(</span><span class="token punctuation">)</span>
DB methods:
	db.adminCommand<span class="token punctuation">(</span>nameOrDocument<span class="token punctuation">)</span> - 切换到<span class="token string">&#39;admin&#39;</span> db，并运行命令 <span class="token punctuation">[</span>只调用 db.runCommand<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span><span class="token punctuation">]</span>（目前不知道在哪使用）
	db.aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span>pipeline<span class="token punctuation">]</span>, <span class="token punctuation">{</span>options<span class="token punctuation">}</span><span class="token punctuation">)</span> - 对该数据库执行无集合聚合<span class="token punctuation">;</span>返回一个指针（目前不知道在哪使用）
	db.auth<span class="token punctuation">(</span>username, password<span class="token punctuation">)</span>（目前不知道在哪使用）
	db.cloneDatabase<span class="token punctuation">(</span>fromhost<span class="token punctuation">)</span> - will only <span class="token keyword">function</span> with MongoDB <span class="token number">4.0</span> and below
	db.commandHelp<span class="token punctuation">(</span>name<span class="token punctuation">)</span> returns the <span class="token builtin class-name">help</span> <span class="token keyword">for</span> the <span class="token builtin class-name">command</span>
	db.copyDatabase<span class="token punctuation">(</span>fromdb, todb, fromhost<span class="token punctuation">)</span> - will only <span class="token keyword">function</span> with MongoDB <span class="token number">4.0</span> and below
	db.createCollection<span class="token punctuation">(</span>name, <span class="token punctuation">{</span>size: <span class="token punctuation">..</span>., capped: <span class="token punctuation">..</span>., max: <span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	db.createUser<span class="token punctuation">(</span>userDocument<span class="token punctuation">)</span>
	db.createView<span class="token punctuation">(</span>name, viewOn, <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token variable">$operator</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">..</span>.<span class="token punctuation">]</span>, <span class="token punctuation">{</span>viewOptions<span class="token punctuation">}</span><span class="token punctuation">)</span>
	db.currentOp<span class="token punctuation">(</span><span class="token punctuation">)</span> displays currently executing operations <span class="token keyword">in</span> the db
	db.dropDatabase<span class="token punctuation">(</span>writeConcern<span class="token punctuation">)</span>
	db.dropUser<span class="token punctuation">(</span>username<span class="token punctuation">)</span>
	db.eval<span class="token punctuation">(</span><span class="token punctuation">)</span> - deprecated
	db.fsyncLock<span class="token punctuation">(</span><span class="token punctuation">)</span> flush data to disk and lock server <span class="token keyword">for</span> backups
	db.fsyncUnlock<span class="token punctuation">(</span><span class="token punctuation">)</span> unlocks server following a db.fsyncLock<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.getCollection<span class="token punctuation">(</span>cname<span class="token punctuation">)</span> same as db<span class="token punctuation">[</span><span class="token string">&#39;cname&#39;</span><span class="token punctuation">]</span> or db.cname
	db.getCollectionInfos<span class="token punctuation">(</span><span class="token punctuation">[</span>filter<span class="token punctuation">]</span><span class="token punctuation">)</span> - returns a list that contains the names and options of the db<span class="token string">&#39;s collections
	db.getCollectionNames()
	db.getLastError() - just returns the err msg string
	db.getLastErrorObj() - return full status object
	db.getLogComponents()
	db.getMongo() get the server connection object
	db.getMongo().setSlaveOk() allow queries on a replication slave server
	db.getName()
	db.getProfilingLevel() - deprecated
	db.getProfilingStatus() - returns if profiling is on and slow threshold
	db.getReplicationInfo()
	db.getSiblingDB(name) get the db at the same server as this one
	db.getWriteConcern() - returns the write concern used for any operations on this db, inherited from server object if set
	db.hostInfo() get details about the server&#39;</span>s <span class="token function">host</span>
	db.isMaster<span class="token punctuation">(</span><span class="token punctuation">)</span> check replica primary status
	db.killOp<span class="token punctuation">(</span>opid<span class="token punctuation">)</span> kills the current operation <span class="token keyword">in</span> the db
	db.listCommands<span class="token punctuation">(</span><span class="token punctuation">)</span> lists all the db commands
	db.loadServerScripts<span class="token punctuation">(</span><span class="token punctuation">)</span> loads all the scripts <span class="token keyword">in</span> db.system.js
	db.logout<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.printCollectionStats<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.printReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.printShardingStatus<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.printSlaveReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.resetError<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.runCommand<span class="token punctuation">(</span>cmdObj<span class="token punctuation">)</span> run a database command.  <span class="token keyword">if</span> cmdObj is a string, turns it into <span class="token punctuation">{</span>cmdObj: <span class="token number">1</span><span class="token punctuation">}</span>
	db.serverStatus<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.setLogLevel<span class="token punctuation">(</span>level,<span class="token operator">&lt;</span>component<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	db.setProfilingLevel<span class="token punctuation">(</span>level,slowms<span class="token punctuation">)</span> <span class="token assign-left variable">0</span><span class="token operator">=</span>off <span class="token assign-left variable">1</span><span class="token operator">=</span>slow <span class="token assign-left variable">2</span><span class="token operator">=</span>all
	db.setVerboseShell<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> display extra information <span class="token keyword">in</span> shell output
	db.setWriteConcern<span class="token punctuation">(</span><span class="token operator">&lt;</span>write concern doc<span class="token operator">&gt;</span><span class="token punctuation">)</span> - sets the <span class="token function">write</span> concern <span class="token keyword">for</span> writes to the db
	db.shutdownServer<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.stats<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.unsetWriteConcern<span class="token punctuation">(</span><span class="token operator">&lt;</span>write concern doc<span class="token operator">&gt;</span><span class="token punctuation">)</span> - unsets the <span class="token function">write</span> concern <span class="token keyword">for</span> writes to the db
	db.version<span class="token punctuation">(</span><span class="token punctuation">)</span> current version of the server
	db.watch<span class="token punctuation">(</span><span class="token punctuation">)</span> - opens a change stream cursor <span class="token keyword">for</span> a database to report on all  changes to its non-system collections.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-db-collection-help-命令" tabindex="-1"><a class="header-anchor" href="#_1-3-db-collection-help-命令" aria-hidden="true">#</a> 1.3. db.collection.help() 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> db.demo.help<span class="token punctuation">(</span><span class="token punctuation">)</span>
DBCollection <span class="token builtin class-name">help</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.help<span class="token punctuation">(</span><span class="token punctuation">)</span> - 展示 DBCursor 方法帮助
	db.demo.bulkWrite<span class="token punctuation">(</span> operations, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - bulk execute <span class="token function">write</span> operations, optional parameters are: w, wtimeout, j
	db.demo.count<span class="token punctuation">(</span> query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - 计算匹配查询的文档数量，可选参数有:limit、skip、hint、maxTimeMS
	db.demo.countDocuments<span class="token punctuation">(</span> query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - count the number of documents that matches the query, optional parameters are: limit, skip, hint, maxTimeMS
	db.demo.estimatedDocumentCount<span class="token punctuation">(</span> <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - estimate the document count using collection metadata, optional parameters are: maxTimeMS
	db.demo.convertToCapped<span class="token punctuation">(</span>maxBytes<span class="token punctuation">)</span> - calls <span class="token punctuation">{</span>convertToCapped:<span class="token string">&#39;demo&#39;</span>, size:maxBytes<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token builtin class-name">command</span>
	db.demo.createIndex<span class="token punctuation">(</span>keypattern<span class="token punctuation">[</span>,options<span class="token punctuation">]</span><span class="token punctuation">)</span>
	db.demo.createIndexes<span class="token punctuation">(</span><span class="token punctuation">[</span>keypatterns<span class="token punctuation">]</span>, <span class="token operator">&lt;</span>options<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	db.demo.dataSize<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.demo.deleteOne<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - delete first matching document, optional parameters are: w, wtimeout, j
	db.demo.deleteMany<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - delete all matching documents, optional parameters are: w, wtimeout, j
	db.demo.distinct<span class="token punctuation">(</span> key, query, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - e.g. db.demo.distinct<span class="token punctuation">(</span> <span class="token string">&#39;x&#39;</span> <span class="token punctuation">)</span>, optional parameters are: maxTimeMS
	db.demo.drop<span class="token punctuation">(</span><span class="token punctuation">)</span> drop the collection
	db.demo.dropIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span> - e.g. db.demo.dropIndex<span class="token punctuation">(</span> <span class="token string">&quot;indexName&quot;</span> <span class="token punctuation">)</span> or db.demo.dropIndex<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">&quot;indexKey&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
	db.demo.hideIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span> - e.g. db.demo.hideIndex<span class="token punctuation">(</span> <span class="token string">&quot;indexName&quot;</span> <span class="token punctuation">)</span> or db.demo.hideIndex<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">&quot;indexKey&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
	db.demo.unhideIndex<span class="token punctuation">(</span>index<span class="token punctuation">)</span> - e.g. db.demo.unhideIndex<span class="token punctuation">(</span> <span class="token string">&quot;indexName&quot;</span> <span class="token punctuation">)</span> or db.demo.unhideIndex<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">&quot;indexKey&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
	db.demo.dropIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.demo.ensureIndex<span class="token punctuation">(</span>keypattern<span class="token punctuation">[</span>,options<span class="token punctuation">]</span><span class="token punctuation">)</span> - DEPRECATED, use createIndex<span class="token punctuation">(</span><span class="token punctuation">)</span> instead
	db.demo.explain<span class="token punctuation">(</span><span class="token punctuation">)</span>.help<span class="token punctuation">(</span><span class="token punctuation">)</span> - show explain <span class="token builtin class-name">help</span>
	db.demo.reIndex<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">[</span>query<span class="token punctuation">]</span>,<span class="token punctuation">[</span>fields<span class="token punctuation">]</span><span class="token punctuation">)</span> - query is an optional query filter. fields is optional <span class="token builtin class-name">set</span> of fields to return.
	                                              e.g. db.demo.find<span class="token punctuation">(</span> <span class="token punctuation">{</span>x:77<span class="token punctuation">}</span> , <span class="token punctuation">{</span>name:1, x:1<span class="token punctuation">}</span> <span class="token punctuation">)</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>.count<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>.limit<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>.skip<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	db.demo.find<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>
	db.demo.findOne<span class="token punctuation">(</span><span class="token punctuation">[</span>query<span class="token punctuation">]</span>, <span class="token punctuation">[</span>fields<span class="token punctuation">]</span>, <span class="token punctuation">[</span>options<span class="token punctuation">]</span>, <span class="token punctuation">[</span>readConcern<span class="token punctuation">]</span><span class="token punctuation">)</span>
	db.demo.findOneAndDelete<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - delete first matching document, optional parameters are: projection, sort, maxTimeMS
	db.demo.findOneAndReplace<span class="token punctuation">(</span> filter, replacement, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - replace first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, returnNewDocument
	db.demo.findOneAndUpdate<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>update object or pipeline<span class="token operator">&gt;</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - update first matching document, optional parameters are: projection, sort, maxTimeMS, upsert, returnNewDocument
	db.demo.getDB<span class="token punctuation">(</span><span class="token punctuation">)</span> get DB object associated with collection
	db.demo.getPlanCache<span class="token punctuation">(</span><span class="token punctuation">)</span> get query plan cache associated with collection
	db.demo.getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
	db.demo.insert<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	db.demo.insertOne<span class="token punctuation">(</span> obj, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - insert a document, optional parameters are: w, wtimeout, j
	db.demo.insertMany<span class="token punctuation">(</span> <span class="token punctuation">[</span>objects<span class="token punctuation">]</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - insert multiple documents, optional parameters are: w, wtimeout, j
	db.demo.mapReduce<span class="token punctuation">(</span> mapFunction , reduceFunction , <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span>
	db.demo.aggregate<span class="token punctuation">(</span> <span class="token punctuation">[</span>pipeline<span class="token punctuation">]</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - performs an aggregation on a collection<span class="token punctuation">;</span> returns a cursor
	db.demo.remove<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
	db.demo.replaceOne<span class="token punctuation">(</span> filter, replacement, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - replace the first matching document, optional parameters are: upsert, w, wtimeout, j
	db.demo.renameCollection<span class="token punctuation">(</span> newName , <span class="token operator">&lt;</span>dropTarget<span class="token operator">&gt;</span> <span class="token punctuation">)</span> renames the collection.
	db.demo.runCommand<span class="token punctuation">(</span> name , <span class="token operator">&lt;</span>options<span class="token operator">&gt;</span> <span class="token punctuation">)</span> runs a db <span class="token builtin class-name">command</span> with the given name where the first param is the collection name
	db.demo.save<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
	db.demo.stats<span class="token punctuation">(</span><span class="token punctuation">{</span>scale: N, indexDetails: true/false, indexDetailsKey: <span class="token operator">&lt;</span>index key<span class="token operator">&gt;</span>, indexDetailsName: <span class="token operator">&lt;</span>index name<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	db.demo.storageSize<span class="token punctuation">(</span><span class="token punctuation">)</span> - includes <span class="token function">free</span> space allocated to this collection
	db.demo.totalIndexSize<span class="token punctuation">(</span><span class="token punctuation">)</span> - size <span class="token keyword">in</span> bytes of all the indexes
	db.demo.totalSize<span class="token punctuation">(</span><span class="token punctuation">)</span> - storage allocated <span class="token keyword">for</span> all data and indexes
	db.demo.update<span class="token punctuation">(</span> query, <span class="token operator">&lt;</span>update object or pipeline<span class="token operator">&gt;</span><span class="token punctuation">[</span>, upsert_bool, multi_bool<span class="token punctuation">]</span> <span class="token punctuation">)</span> - instead of two flags, you can pass an object with fields: upsert, multi, hint
	db.demo.updateOne<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>update object or pipeline<span class="token operator">&gt;</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - update the first matching document, optional parameters are: upsert, w, wtimeout, j, hint
	db.demo.updateMany<span class="token punctuation">(</span> filter, <span class="token operator">&lt;</span>update object or pipeline<span class="token operator">&gt;</span>, <span class="token operator">&lt;</span>optional params<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - update all matching documents, optional parameters are: upsert, w, wtimeout, j, hint
	db.demo.validate<span class="token punctuation">(</span> <span class="token operator">&lt;</span>full<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - SLOW
	db.demo.getShardVersion<span class="token punctuation">(</span><span class="token punctuation">)</span> - only <span class="token keyword">for</span> use with sharding
	db.demo.getShardDistribution<span class="token punctuation">(</span><span class="token punctuation">)</span> - prints statistics about data distribution <span class="token keyword">in</span> the cluster
	db.demo.getSplitKeysForChunks<span class="token punctuation">(</span> <span class="token operator">&lt;</span>maxChunkSize<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - calculates <span class="token function">split</span> points over all chunks and returns splitter <span class="token keyword">function</span>
	db.demo.getWriteConcern<span class="token punctuation">(</span><span class="token punctuation">)</span> - returns the <span class="token function">write</span> concern used <span class="token keyword">for</span> any operations on this collection, inherited from server/db <span class="token keyword">if</span> <span class="token builtin class-name">set</span>
	db.demo.setWriteConcern<span class="token punctuation">(</span> <span class="token operator">&lt;</span>write concern doc<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - sets the <span class="token function">write</span> concern <span class="token keyword">for</span> writes to the collection
	db.demo.unsetWriteConcern<span class="token punctuation">(</span> <span class="token operator">&lt;</span>write concern doc<span class="token operator">&gt;</span> <span class="token punctuation">)</span> - unsets the <span class="token function">write</span> concern <span class="token keyword">for</span> writes to the collection
	db.demo.latencyStats<span class="token punctuation">(</span><span class="token punctuation">)</span> - display operation latency histograms <span class="token keyword">for</span> this collection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-help-keys-命令" tabindex="-1"><a class="header-anchor" href="#_1-4-help-keys-命令" aria-hidden="true">#</a> 1.4. help keys 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">help</span> keys
Tab completion and <span class="token builtin class-name">command</span> <span class="token function">history</span> is available at the <span class="token builtin class-name">command</span> prompt.
Some emacs keystrokes are available too:
  Ctrl-A start of line
  Ctrl-E end of line
  Ctrl-K del to end of line

Multi-line commands
You can enter a multi line javascript expression.  If parens, braces, etc. are not closed, you will see a new line 
beginning with <span class="token string">&#39;...&#39;</span> characters.  Type the rest of your expression.  Press Ctrl-C to abort the data entry <span class="token keyword">if</span> you
get stuck.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>翻译为中文：</p><p>在命令提示符处可以使用制表符补全和命令历史记录。 一些emacs按键也可用:</p><ul><li>Ctrl-A 去到行开始</li><li>Ctrl-E 去到行结束</li><li>Ctrl-K 删除整行</li></ul><p>多行命令 您可以输入多行javascript表达式。如果括号、大括号等没有关闭，你会看到一个新行开始的……的字符。输入表达式的其余部分。按Ctrl-C中止数据输入，如果您被卡住了。</p><h3 id="_1-5-db-collection-find-help-命令" tabindex="-1"><a class="header-anchor" href="#_1-5-db-collection-find-help-命令" aria-hidden="true">#</a> 1.5. db.collection.find().help() 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> db.HouseHold.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.help<span class="token punctuation">(</span><span class="token punctuation">)</span>
find<span class="token punctuation">(</span><span class="token operator">&lt;</span>predicate<span class="token operator">&gt;</span>, <span class="token operator">&lt;</span>projection<span class="token operator">&gt;</span><span class="token punctuation">)</span> modifiers
	.sort<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	.limit<span class="token punctuation">(</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.skip<span class="token punctuation">(</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.batchSize<span class="token punctuation">(</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">)</span> - sets the number of docs to <span class="token builtin class-name">return</span> per getMore
	.collation<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	.hint<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	.readConcern<span class="token punctuation">(</span><span class="token operator">&lt;</span>level<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.readPref<span class="token punctuation">(</span><span class="token operator">&lt;</span>mode<span class="token operator">&gt;</span>, <span class="token operator">&lt;</span>tagset<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.count<span class="token punctuation">(</span><span class="token operator">&lt;</span>applySkipLimit<span class="token operator">&gt;</span><span class="token punctuation">)</span> - total <span class="token comment"># of objects matching query. by default ignores skip,limit</span>
	.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - total <span class="token comment"># of objects cursor would return, honors skip,limit</span>
	.explain<span class="token punctuation">(</span><span class="token operator">&lt;</span>verbosity<span class="token operator">&gt;</span><span class="token punctuation">)</span> - accepted verbosities are <span class="token punctuation">{</span><span class="token string">&#39;queryPlanner&#39;</span>, <span class="token string">&#39;executionStats&#39;</span>, <span class="token string">&#39;allPlansExecution&#39;</span><span class="token punctuation">}</span>
	.min<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	.max<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token punctuation">)</span>
	.maxTimeMS<span class="token punctuation">(</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.comment<span class="token punctuation">(</span><span class="token operator">&lt;</span>comment<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.tailable<span class="token punctuation">(</span><span class="token operator">&lt;</span>isAwaitData<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.noCursorTimeout<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.allowPartialResults<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.returnKey<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.showRecordId<span class="token punctuation">(</span><span class="token punctuation">)</span> - adds a <span class="token variable">$recordId</span> field to each returned object
	.allowDiskUse<span class="token punctuation">(</span><span class="token punctuation">)</span> - allow using disk <span class="token keyword">in</span> completing the query

Cursor methods
	.toArray<span class="token punctuation">(</span><span class="token punctuation">)</span> - iterates through docs and returns an array of the results
	.forEach<span class="token punctuation">(</span><span class="token operator">&lt;</span>func<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.map<span class="token punctuation">(</span><span class="token operator">&lt;</span>func<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	.hasNext<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.next<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.close<span class="token punctuation">(</span><span class="token punctuation">)</span>
	.objsLeftInBatch<span class="token punctuation">(</span><span class="token punctuation">)</span> - returns count of docs left <span class="token keyword">in</span> current batch <span class="token punctuation">(</span>when exhausted, a new getMore will be issued<span class="token punctuation">)</span>
	.itcount<span class="token punctuation">(</span><span class="token punctuation">)</span> - iterates through documents and counts them
	.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span> - pretty print each document, possibly over multiple lines
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mongodb用户操作" tabindex="-1"><a class="header-anchor" href="#mongodb用户操作" aria-hidden="true">#</a> MongoDB用户操作</h2><blockquote><p>转载自：https://blog.csdn.net/hbtj_1216/article/details/120875957</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> admin

db<span class="token punctuation">.</span>createUser<span class="token punctuation">(</span>{
  <span class="token keyword">user</span>: <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// 用户名（自定义）</span>
  pwd: <span class="token string">&#39;Abc123++&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 密码（自定义）</span>
  roles:<span class="token punctuation">[</span>{
    role: <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 使用超级用户角色</span>
    db: <span class="token string">&#39;admin&#39;</span>     <span class="token comment">// 指定数据库</span>
  }<span class="token punctuation">]</span>
}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置完成，可以通过指令 <code>show users</code> 查看是否设置成功。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看当前库下的用户</span>
<span class="token keyword">show</span> users
<span class="token comment"># 删除用户</span>
db<span class="token punctuation">.</span>dropUser<span class="token punctuation">(</span><span class="token string">&#39;testadmin&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 修改用户密码</span>
db<span class="token punctuation">.</span>updateUser<span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> {pwd: <span class="token string">&#39;654321&#39;</span>}<span class="token punctuation">)</span>
<span class="token comment"># 密码认证</span>
db<span class="token punctuation">.</span>auth<span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;654321&#39;</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>角色描述</strong></th><th>角色标识</th></tr></thead><tbody><tr><td>数据库用户角色</td><td>read、readWrite</td></tr><tr><td>数据库管理角色</td><td>dbAdmin、dbOwner、userAdmin</td></tr><tr><td>集群管理角色</td><td>clusterAdmin、clusterManager、clusterMonitor、hostManager</td></tr><tr><td>备份恢复角色</td><td>backup、restore</td></tr><tr><td>所有数据库角色</td><td>readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase</td></tr><tr><td>超级用户角色</td><td>root</td></tr></tbody></table><h2 id="查询-find" tabindex="-1"><a class="header-anchor" href="#查询-find" aria-hidden="true">#</a> 查询 find()</h2><h3 id="查询函数" tabindex="-1"><a class="header-anchor" href="#查询函数" aria-hidden="true">#</a> 查询函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>🌰</th></tr></thead><tbody><tr><td><code>find()</code></td><td>查询方法，可在方法内规定查询规则。<br></td><td>可以使用两种方式查询。<br> <code>db.表名.find(); </code><br> <code>db.getCollection(&#39;表名&#39;).find()</code></td></tr><tr><td><code>find({},{})</code></td><td>参数一：查询条件。<br>参数二：规定返回哪些参数，类似于select age from 表名重中的age。<br> <code> {&#39;age&#39;: 1,&#39;name&#39;: 0}</code>值为1返回字段，值为0不返回字段。默认为0。</td><td><code>db.col.find({&#39;name&#39;:&#39;小明&#39;},{&#39;name&#39;:1,&#39;_id&#39;:0})</code></td></tr><tr><td><code>pretty()</code></td><td>使得查询出来的数据在命令行中更加美观的显示，不至于太紧凑。</td><td><code>db.col.find().pretty()</code></td></tr><tr><td><code>limit()</code></td><td>参数：数字。想要读取的数据条数。不填写默认返回全部数据。</td><td><code>db.col.find().limit(1)</code></td></tr><tr><td><code>skip()</code></td><td>参数：数字。跳过多少数据开始查询。默认值为0。</td><td><code>db.col.find().skip(1)</code></td></tr></tbody></table><h3 id="查询操作符" tabindex="-1"><a class="header-anchor" href="#查询操作符" aria-hidden="true">#</a> 查询操作符</h3><blockquote><p>可以单字段多条件组合查询。如：<code>db.col.find({age : {$lt :18, $gt : 38, $ne : 20}})</code></p></blockquote><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th><th style="text-align:left;">RDBMS中的类似语句</th></tr></thead><tbody><tr><td style="text-align:left;">😊</td><td style="text-align:left;"><code>{&lt;key&gt;:&lt;value&gt;</code>}<br>等于</td><td style="text-align:left;"><code>db.col.find({&quot;name&quot;:&quot;小明&quot;})</code></td><td style="text-align:left;"><code>where name = &#39;小明&#39;</code></td></tr><tr><td style="text-align:left;"><code>$lt</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code><br>小于</td><td style="text-align:left;"><code>db.col.find({&quot;likes&quot;:{$lt:50}})</code></td><td style="text-align:left;"><code>where likes &lt; 50</code></td></tr><tr><td style="text-align:left;"><code>$lte</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code><br>小于等于</td><td style="text-align:left;"><code>db.col.find({&quot;likes&quot;:{$lte:50}})</code></td><td style="text-align:left;"><code>where likes &lt;= 50</code></td></tr><tr><td style="text-align:left;"><code>$gt</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code><br>大于</td><td style="text-align:left;"><code>db.col.find({&quot;likes&quot;:{$gt:50}})</code></td><td style="text-align:left;"><code>where likes &gt; 50</code></td></tr><tr><td style="text-align:left;"><code>$gte</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code><br>大于等于</td><td style="text-align:left;"><code>db.col.find({&quot;likes&quot;:{$gte:50}})</code></td><td style="text-align:left;"><code>where likes &gt;= 50</code></td></tr><tr><td style="text-align:left;"><code>$in</code></td><td style="text-align:left;"><code>{ &lt;key&gt;: { $in: [&lt;value1&gt;, &lt;value2&gt;, ... &lt;valueN&gt; ] } }</code><br> 包含</td><td style="text-align:left;"><code>db.col.find( { item : { $in: false } } )</code></td><td style="text-align:left;"><code>where likes in () </code></td></tr><tr><td style="text-align:left;"><code>$nin</code></td><td style="text-align:left;"><code>{ &lt;key&gt;: { $nin: [ &lt;value1&gt;, &lt;value2&gt; ... &lt;valueN&gt; ]} }</code><br> 不包含</td><td style="text-align:left;"><code>db.col.find( { item : { $nin: false } } )</code></td><td style="text-align:left;"><code>where likes not in () </code></td></tr><tr><td style="text-align:left;"><code>$ne</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code><br> 不等于</td><td style="text-align:left;"><code>db.col.find({&quot;likes&quot;:{$ne:50}})</code></td><td style="text-align:left;"><code>where likes != 50</code></td></tr><tr><td style="text-align:left;"><code>$or</code></td><td style="text-align:left;"><code>{$or:{&lt;key:&lt;value&gt;,&lt;key&gt;:&lt;value&gt;&gt;}}</code><br>多条件查询，可以组合其他查询条件使用。</td><td style="text-align:left;"><code>db.col.find({$or:[{&quot;name&quot;:&quot;小明&quot;},{&quot;age&quot;: &quot;18&quot;}]})</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>$type</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$type:&lt;value&gt;}}</code><br>类型比较，<strong>Mongodb中存在的类型。</strong></td><td style="text-align:left;"><code>db.col.find({&quot;title&quot; : {$type : &#39;string&#39;}})</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>$exists</code></td><td style="text-align:left;"><code>{&lt;key&gt;:{$exists:&lt;value&gt;}}</code><br>字段是否存在。</td><td style="text-align:left;"><code>db.col.find( { item : { $exists: false } } )</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">模糊查询</td><td style="text-align:left;">没有操作符，根据书写规则来决定是否是模糊查询。<br> 和普通is查询一样，但是值需要加<code>//</code>。<br> like：<code>{name:/小/}</code><br> likeBegin: <code>{name:/^小/}</code><br> likeEnd:<code>{name:/小^/}</code></td><td style="text-align:left;"><code>db.col.find( { item : /小/} } )</code></td><td style="text-align:left;"><code>where name like &quot;%小%&quot;</code></td></tr></tbody></table><h3 id="特殊查询" tabindex="-1"><a class="header-anchor" href="#特殊查询" aria-hidden="true">#</a> 特殊查询</h3><h4 id="嵌套文档-文档数组查询" tabindex="-1"><a class="header-anchor" href="#嵌套文档-文档数组查询" aria-hidden="true">#</a> 嵌套文档/文档数组查询</h4><blockquote><p>字段是数组或对象都可以使用size.uom来进行操作。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 新增数据</span>
db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span>insertMany<span class="token punctuation">(</span> <span class="token punctuation">[</span>
    { item: <span class="token string">&quot;journal&quot;</span><span class="token punctuation">,</span> qty: <span class="token number">25</span><span class="token punctuation">,</span> size: { h: <span class="token number">14</span><span class="token punctuation">,</span> w: <span class="token number">21</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;cm&quot;</span> }<span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token string">&quot;A&quot;</span> }<span class="token punctuation">,</span>
    { item: <span class="token string">&quot;notebook&quot;</span><span class="token punctuation">,</span> qty: <span class="token number">50</span><span class="token punctuation">,</span> size: { h: <span class="token number">8.5</span><span class="token punctuation">,</span> w: <span class="token number">11</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;in&quot;</span> }<span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token string">&quot;A&quot;</span> }<span class="token punctuation">,</span>
    { item: <span class="token string">&quot;paper&quot;</span><span class="token punctuation">,</span> qty: <span class="token number">100</span><span class="token punctuation">,</span> size: { h: <span class="token number">8.5</span><span class="token punctuation">,</span> w: <span class="token number">11</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;in&quot;</span> }<span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token string">&quot;D&quot;</span> }<span class="token punctuation">,</span>
    { item: <span class="token string">&quot;planner&quot;</span><span class="token punctuation">,</span> qty: <span class="token number">75</span><span class="token punctuation">,</span> size: { h: <span class="token number">22.85</span><span class="token punctuation">,</span> w: <span class="token number">30</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;cm&quot;</span> }<span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token string">&quot;D&quot;</span> }<span class="token punctuation">,</span>
    { item: <span class="token string">&quot;postcard&quot;</span><span class="token punctuation">,</span> qty: <span class="token number">45</span><span class="token punctuation">,</span> size: { h: <span class="token number">10</span><span class="token punctuation">,</span> w: <span class="token number">15.25</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;cm&quot;</span> }<span class="token punctuation">,</span> <span class="token keyword">status</span>: <span class="token string">&quot;A&quot;</span> }
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 嵌套文档查询，size必须完全匹配</span>
db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span>find<span class="token punctuation">(</span> { size: { h: <span class="token number">14</span><span class="token punctuation">,</span> w: <span class="token number">21</span><span class="token punctuation">,</span> uom: <span class="token string">&quot;cm&quot;</span> } } <span class="token punctuation">)</span>
<span class="token comment"># 嵌套字段查询，直接查询size.uom。</span>
db<span class="token punctuation">.</span>inventory<span class="token punctuation">.</span>find<span class="token punctuation">(</span> { <span class="token string">&quot;size.uom&quot;</span>: <span class="token string">&quot;in&quot;</span> } <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合查询-aggregate" tabindex="-1"><a class="header-anchor" href="#聚合查询-aggregate" aria-hidden="true">#</a> 聚合查询 aggregate()</h2><h3 id="管道的概念" tabindex="-1"><a class="header-anchor" href="#管道的概念" aria-hidden="true">#</a> 管道的概念</h3><blockquote><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p><p>MongoDB的聚合管道将MongoDB文档在<strong>一个管道处理完毕后将结果传递给下一个管道处理</strong>。管道操作是可以重复的。</p><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p><p>这里我们介绍一下聚合框架中常用的几个操作：</p><ul><li><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li><code>$match</code>：用于过滤数据，只输出符合条件的文档。<code>$​match</code>使用MongoDB的标准查询操作。</li><li><code>$limit</code>：用来限制MongoDB聚合管道返回的文档数。</li><li><code>$skip</code>：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li><code>$unwind</code>：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li><code>$group</code>：将集合中的文档分组，可用于统计结果。</li><li><code>$sort</code>：将输入文档排序后输出。</li><li><code>$geoNear</code>：输出接近某一地理位置的有序文档。</li></ul></blockquote><h3 id="project" tabindex="-1"><a class="header-anchor" href="#project" aria-hidden="true">#</a> <code>$project</code></h3><blockquote><p><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</p></blockquote><h4 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h4>`,40),k=n("thead",null,[n("tr",null,[n("th",null,"表达式"),n("th",null,"描述"),n("th",null,"实例")])],-1),m=n("tr",null,[n("td",null,[n("code",null,"$unwind")]),n("td",null,[s("将集合字段平铺。数据会从"),n("code",null,'{"data":[{count:1},{count:2}]}'),s("，变为"),n("code",null,'{"data":{count:1}},{"data":{count:2}}')]),n("td",null,[n("code",null,"db.col.aggregate([{$unwind:'$data'}])")])],-1),b={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Foperator%2Faggregation%2Fadd%2F",target:"_blank",rel:"noopener noreferrer"},v=n("td",null,[n("code",null,"{ $add ： [ < expression1 > ， < expression2 > ， ... ] }"),n("br"),s("多值相加，值可以是指定的值，也可以是字段。")],-1),g=n("td",null,[n("code",null,"db.col.aggregate([{$project:{size:{$add:['$size1','$size2','$size3']}}}])")],-1),h={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Foperator%2Faggregation%2Fsubtract%2Findex.html",target:"_blank",rel:"noopener noreferrer"},f=n("td",null,[n("code",null,"{ $subtract: [ <expression1>, <expression2> ] }"),n("br"),s("expression1减去expression2，值可以是指定的值，也可以是字段。"),n("em",null,"只能两值相减，多值相减需要嵌套使用。")],-1),y=n("td",null,[n("code",null,"db.col.aggregate([{$project:{size:{$subtract:['$size1','$size2']}}}])")],-1),q={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Foperator%2Faggregation%2Fmultiply%2F%23exp._S_multiply",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,[n("code",null,"{ $multiply ： [ < expression1 > ， < expression2 > ， ... ] }"),n("br"),s("多值相乘，值可以是指定的值，也可以是字段。")],-1),$=n("td",null,[n("code",null,"db.size_test.aggregate([{$project:{size:{$multiply:['$size1','$size2','$size3',100]}}}])")],-1),w={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.mongodb.com%2Fmanual%2Freference%2Foperator%2Faggregation%2Fdivide%2Findex.html",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,[n("code",null,"{ $divide: [ <expression1>, <expression2> ] }"),n("br"),s("expression1为被除数，expression2为除数，值可以是指定的值，也可以是字段。"),n("em",null,"只能两值相除，多值相除需要嵌套使用。")],-1),j=n("td",null,[n("code",null,"db.col.aggregate([{$project:{size:{$divide:['$size1','$size2']}}}])")],-1),T=n("td",null,[n("code",null,"$ifNull")],-1),S=n("code",null,"{ $ifNull: [ expression, replacement-expression-if-null ] }",-1),C={href:"https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,[n("code",null,"db.col.aggregate([{$project:{size:{$ifNull:['$size1',100]}}}])")],-1),O=n("h4",{id:"时间转换操作符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#时间转换操作符","aria-hidden":"true"},"#"),s(" 时间转换操作符")],-1),M=n("thead",null,[n("tr",null,[n("th",null,"表达式"),n("th",null,"描述"),n("th",null,"实例")])],-1),z=n("td",null,[n("code",null,"new Date()")],-1),F=n("br",null,null,-1),I=n("strong",null,"日期格式：yyyy-MM-ddThh:mm:ssZ",-1),B=n("td",null,[n("code",null,"new Date()")],-1),N=n("td",null,[n("code",null,"ISODate")],-1),A=n("strong",null,"可以不按照标准的日期格式",-1),H=n("td",null,[n("code",null,'db.col.find({time:{$gt:ISODate("20210101")}})')],-1),E=n("tr",null,[n("td",null,[n("code",null,"$year")]),n("td",null,"时间转换为年。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$year:'$createTime'}}}])")])],-1),L=n("tr",null,[n("td",null,[n("code",null,"$month")]),n("td",null,"时间转换为月。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$month:'$createTime'}}}])")])],-1),U=n("tr",null,[n("td",null,[n("code",null,"$week")]),n("td",null,"时间转换为周，当年的第几周。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$week:'$createTime'}}}])")])],-1),W=n("tr",null,[n("td",null,[n("code",null,"$dayOfYear")]),n("td",null,"时间转换为日，当年的第几天。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$dayOfYear:'$createTime'}}}])")])],-1),P=n("tr",null,[n("td",null,[n("code",null,"$dayOfMonth")]),n("td",null,"时间转换为日，当月的第几天。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$dayOfMonth:'$createTime'}}}])")])],-1),K=n("tr",null,[n("td",null,[n("code",null,"$dayOfWeek")]),n("td",null,[s("时间转换为日，当周的第几天。"),n("br"),s("星期日为1，星期六为7。")]),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$dayOfWeek:'$createTime'}}}])")])],-1),R=n("tr",null,[n("td",null,[n("code",null,"$hour")]),n("td",null,"时间转换为小时，当天的第几小时。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$hour:'$createTime'}}}])")])],-1),V=n("tr",null,[n("td",null,[n("code",null,"$minute")]),n("td",null,"时间转换为分钟，当前小时的第几分钟。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$minute:'$createTime'}}}])")])],-1),Y=n("tr",null,[n("td",null,[n("code",null,"$second")]),n("td",null,"时间转换为秒，当前分钟的第几秒。"),n("td",null,[n("code",null,"db.HouseHold.aggregate([{$project: {createTime:{$second:'$createTime'}}}])")])],-1),Z=n("tr",null,[n("td",null,[n("code",null,"$millisecond")]),n("td",null,"时间转换为毫秒，当前秒的第几毫秒。"),n("td",null,"`db.HouseHold.aggregate([{$project: {createTime:{$millisecond:'$createTime'}}}])")],-1),Q={href:"https://mongodb.net.cn/manual/reference/operator/aggregation/dateToString/",target:"_blank",rel:"noopener noreferrer"},G=p(`<blockquote><p><code>$dateToString</code>:自定义时间转换</p></blockquote><p>参数描述</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>{ $dateToString: {
    <span class="token keyword">date</span>: <span class="token operator">&lt;</span>dateExpression<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    format: <span class="token operator">&lt;</span>formatString<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    timezone: <span class="token operator">&lt;</span>tzExpression<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    onNull: <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span>
} }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>db<span class="token punctuation">.</span>getCollection<span class="token punctuation">(</span><span class="token string">&#39;HouseHold&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span>
    {$project:
        {
            <span class="token keyword">year</span>:{$dateToString: { format: <span class="token string">&quot;%Y&quot;</span><span class="token punctuation">,</span> <span class="token keyword">date</span>: <span class="token string">&quot;$createTime&quot;</span> }}<span class="token punctuation">,</span>
            dayofweek:{$dateToString: { format: <span class="token string">&quot;%w&quot;</span><span class="token punctuation">,</span> <span class="token keyword">date</span>: <span class="token string">&quot;$createTime&quot;</span> }}<span class="token punctuation">,</span>
            weekofyear:{$dateToString: { format: <span class="token string">&quot;%U&quot;</span><span class="token punctuation">,</span> <span class="token keyword">date</span>: <span class="token string">&quot;$createTime&quot;</span> }}<span class="token punctuation">,</span>
            <span class="token keyword">year</span>:{$dateToString: { format: <span class="token string">&quot;%Y-%m-%dT%H:%M&quot;</span><span class="token punctuation">,</span> <span class="token keyword">date</span>: <span class="token string">&quot;$createTime&quot;</span> }}<span class="token punctuation">,</span>
            onNull:{$dateToString: { <span class="token keyword">date</span>: <span class="token boolean">null</span><span class="token punctuation">,</span> onNull: <span class="token string">&quot;No date supplied&quot;</span> } }
        }}
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> ObjectId(<span class="token string">&quot;60fa3b3635f8c5790b880297&quot;</span>)<span class="token punctuation">,</span>
    <span class="token property">&quot;year&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2021&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;dayofweek&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;weekofyear&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;30&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;UTC&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2021-07-29T09:10&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;onNull&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No date supplied&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://file.pandacode.cn//blog/202109111301481.png" alt="img"></p><p>扩展</p><blockquote><p>可以使用<code>$dateToString</code>从 ObjectId 返回日期字符串。</p><p>ObjectId 值是 12 字节的十六进制值，包括：</p><ul><li>一个 4 字节的时间戳值，表示 ObjectId 的创建，以 Unix 纪元以来的秒数为单位。</li><li>一个 5 字节是一个随机值</li><li>一个 3 字节递增计数器，初始化为随机值。</li></ul><p>回顾一下，我们的第一个文档如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	&quot;_id&quot; : ObjectId(&quot;600631c7c8eb4369cf6ad9c8&quot;),
	&quot;name&quot; : &quot;获取&quot;,
	“出生”：ISODate（“2020-12-31T23：30：15.123Z”）
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该文档包含一个 ObjectId。因此，我们可以<code>$dateToString</code>根据文档的创建日期（或更具体地说，<code>_id</code>字段的 ObjectId 值的创建日期）返回一个日期字符串。</p><p>例子：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.pets.aggregate(
   [
     {
       $project: {
          timestamp: { $toDate: &quot;$_id&quot; },
          dateString: { $dateToString: { format: &quot;%d-%m-%Y&quot;, date: &quot;$_id&quot; } }
       }
     }
   ]
).pretty()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
	&quot;_id&quot; : ObjectId(&quot;600631c7c8eb4369cf6ad9c8&quot;),
	&quot;时间戳&quot; : ISODate(&quot;2021-01-19T01:11:35Z&quot;),
	“日期字符串”：“19-01-2021”
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我决定只返回日期部分（而不是时间部分）。我还改变了天、月和年的顺序，以证明如果需要，您当然可以这样做。</p></blockquote><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group" aria-hidden="true">#</a> <code>$group</code></h3><blockquote><p><code>$group</code>：将集合中的文档分组，可用于统计结果。</p><p><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, ........}}])</code></p></blockquote><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$sum</code></td><td style="text-align:left;">计算总和。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : &quot;$likes&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$avg</code></td><td style="text-align:left;">计算平均值</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$avg : &quot;$likes&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$min</code></td><td style="text-align:left;">获取集合中所有文档对应值得最小值。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$min : &quot;$likes&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$max</code></td><td style="text-align:left;">获取集合中所有文档对应值得最大值。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$max : &quot;$likes&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$push</code></td><td style="text-align:left;">在结果文档中插入值到一个数组中。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$push: &quot;$url&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$addToSet</code></td><td style="text-align:left;">在结果文档中插入值到一个数组中，但不创建副本。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$addToSet : &quot;$url&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$first</code></td><td style="text-align:left;">根据资源文档的排序获取第一个文档数据。</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, first_url : {$first : &quot;$url&quot;}}}])</code></td></tr><tr><td style="text-align:left;"><code>$last</code></td><td style="text-align:left;">根据资源文档的排序获取最后一个文档数据</td><td style="text-align:left;"><code>db.col.aggregate([{$group : {_id : &quot;$by_user&quot;, last_url : {$last : &quot;$url&quot;}}}])</code></td></tr></tbody></table><h2 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h2><h3 id="新增函数" tabindex="-1"><a class="header-anchor" href="#新增函数" aria-hidden="true">#</a> 新增函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>insertOne()</code></td><td>新增一条。</td><td><code>db.col.insertOne({&quot;name&quot;:&quot;123&quot;})</code></td></tr><tr><td><code>insertMany()</code></td><td>新增多条。</td><td><code>db.col.insertMany([{&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:29},{&quot;name&quot;:&quot;小红&quot;,&quot;age&quot;:32}])</code></td></tr><tr><td><code>save()</code></td><td>可同时添加多个文档。<br>也能够更新数据，但只能更新一条。</td><td><code>db.col.save({&quot;name&quot;:&quot;123&quot;})</code></td></tr></tbody></table><h2 id="修改" tabindex="-1"><a class="header-anchor" href="#修改" aria-hidden="true">#</a> 修改</h2><h3 id="修改函数" tabindex="-1"><a class="header-anchor" href="#修改函数" aria-hidden="true">#</a> 修改函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>update()</code></td><td><code>db.collection.update(&lt;query&gt;,&lt;update&gt;,{upsert: &lt;boolean&gt;,multi: &lt;boolean&gt;,writeConcern:&lt;document&gt;})</code><br> 参数说明：<br><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。<br> <strong>update</strong> : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的<br> <strong>upsert</strong> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。<br> <strong>multi</strong> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。<br> <strong>writeConcern</strong> :可选，抛出异常的级别。</td><td><code>db.col.update( { &quot;count&quot; : { $gt : 3 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} },false,true );</code></td></tr><tr><td><code>updateOne()</code></td><td>即使多个文档可能与指定的过滤器匹配，最多更新与指定的过滤器匹配的单个文档。</td><td></td></tr><tr><td><code>updateMany()</code></td><td>更新所有与指定过滤器匹配的文档。</td><td></td></tr><tr><td><code>replaceOne()</code></td><td>即使多个文档可能与指定过滤器匹配，也最多替换一个与指定过滤器匹配的文档。</td><td></td></tr></tbody></table><h3 id="修改操作符" tabindex="-1"><a class="header-anchor" href="#修改操作符" aria-hidden="true">#</a> 修改操作符</h3><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> <code>$set</code></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>{ $<span class="token keyword">set</span>: { <span class="token operator">&lt;</span>field1<span class="token operator">&gt;</span>: <span class="token operator">&lt;</span>value1<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> } }
<span class="token comment"># 例子</span>
db<span class="token punctuation">.</span>col<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>
   { _id: <span class="token number">100</span> }<span class="token punctuation">,</span>
   { $<span class="token keyword">set</span>:
      {
        quantity: <span class="token number">500</span><span class="token punctuation">,</span>
        details: { model: <span class="token string">&quot;14Q3&quot;</span><span class="token punctuation">,</span> make: <span class="token string">&quot;xyz&quot;</span> }<span class="token punctuation">,</span>
        tags: <span class="token punctuation">[</span> <span class="token string">&quot;coats&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;outerwear&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;clothing&quot;</span> <span class="token punctuation">]</span>
      }
   }
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><h3 id="普通删除" tabindex="-1"><a class="header-anchor" href="#普通删除" aria-hidden="true">#</a> 普通删除</h3><h4 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove()</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># api</span>
db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>
   <span class="token operator">&lt;</span>query<span class="token operator">&gt;</span><span class="token punctuation">,</span>
   {
     justOne: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
     writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>
   }
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明：</strong></p><ul><li><strong>query</strong> :（可选）删除的文档的条件。</li><li><strong>justOne</strong> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li><strong>writeConcern</strong> :（可选）抛出异常的级别。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 例子</span>
db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>{<span class="token string">&#39;title&#39;</span>:<span class="token string">&#39;abc&#39;</span>}<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="deleteone" tabindex="-1"><a class="header-anchor" href="#deleteone" aria-hidden="true">#</a> deleteOne()</h4><blockquote><p>即使多个文档可能与指定过滤器匹配，也最多删除一个与指定过滤器匹配的文档。</p></blockquote><h4 id="deletemany" tabindex="-1"><a class="header-anchor" href="#deletemany" aria-hidden="true">#</a> deleteMany()</h4><blockquote><p>删除所有与指定过滤器匹配的文档。</p></blockquote>`,33);function J(X,nn){const t=o("ExternalLinkIcon"),e=o("font");return i(),d("div",null,[r,n("table",null,[k,n("tbody",null,[m,n("tr",null,[n("td",null,[n("a",b,[s("$add"),a(t)])]),v,g]),n("tr",null,[n("td",null,[n("a",h,[s("$subtract"),a(t)])]),f,y]),n("tr",null,[n("td",null,[n("a",q,[s("$multiply"),a(t)])]),x,$]),n("tr",null,[n("td",null,[n("a",w,[s("$divide"),a(t)])]),_,j]),n("tr",null,[T,n("td",null,[S,s("：用于判断第一个"),n("a",C,[s("表达式"),a(t)]),s("是否为 null，如果为 null 则返回第二个参数的值，如果不为 null 则返回第一个参数的值。")]),D])])]),O,n("table",null,[M,n("tbody",null,[n("tr",null,[z,n("td",null,[s("时间创建，必须按照标准的日期格式。"),F,a(e,{color:"#FF000"},{default:l(()=>[I]),_:1})]),B]),n("tr",null,[N,n("td",null,[a(e,{color:"#FF000"},{default:l(()=>[A]),_:1})]),H]),E,L,U,W,P,K,R,V,Y,Z])]),n("p",null,[n("a",Q,[s("$dateToString"),a(t)])]),G])}const an=c(u,[["render",J],["__file","02.mongodb-command.html.vue"]]);export{an as default};
