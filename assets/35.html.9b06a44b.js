import{_ as i,r as s,o as p,c as r,d as a,w as t,a as n,b as e,e as d}from"./app.4659d0e0.js";const u={},k=d(`<h1 id="leetcode第35题-搜索插入位置" tabindex="-1"><a class="header-anchor" href="#leetcode第35题-搜索插入位置" aria-hidden="true">#</a> Leetcode第35题 - 搜索插入位置</h1><h2 id="🌟-题目描述" tabindex="-1"><a class="header-anchor" href="#🌟-题目描述" aria-hidden="true">#</a> 🌟 题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1,3,5,6], target = 5
输出: 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1,3,5,6], target = 2
输出: 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1,3,5,6], target = 7
输出: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 4:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1,3,5,6], target = 0
输出: 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 5:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [1], target = 0
输出: 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示:</p><p><code>1 &lt;= nums.length &lt;= 104</code></p><p><code>-104 &lt;= nums[i] &lt;= 104</code></p><p>nums 为无重复元素的升序排列数组</p><p><code>-104 &lt;= target &lt;= 104</code></p><h2 id="🐂-解题方法" tabindex="-1"><a class="header-anchor" href="#🐂-解题方法" aria-hidden="true">#</a> 🐂 解题方法</h2><h3 id="_1⃣️-方法一-二分查找" tabindex="-1"><a class="header-anchor" href="#_1⃣️-方法一-二分查找" aria-hidden="true">#</a> 1⃣️ 方法一：二分查找</h3><p>假设题意是叫你在排序数组中寻找是否存在一个目标值，那么训练有素的读者肯定立马就能想到利用二分法在 <code>O(log n)</code> 的时间内找到是否存在目标值。但这题还多了个额外的条件，即如果不存在数组中的时候需要返回按顺序插入的位置，那我们还能用二分法么？答案是可以的，我们只需要稍作修改即可。 考虑这个插入的位置<code>pos</code>，它成立的条件为：</p><p><code>nums[pos−1]&lt;target≤nums[pos]</code></p><p>其中 <code>nums</code> 代表排序数组。由于如果存在这个目标值，我们返回的索引也是 <code>pos</code>，因此我们可以将两个条件合并得出最后的目标：「在一个有序数组中找第一个大于等于 <code>target</code> 的下标」。</p><p>问题转化到这里，直接套用二分法即可，即不断用二分法逼近查找第一个大于等于 <code>target</code> 的下标 。下文给出的代码是笔者习惯的二分写法，<code>ans</code> 初值设置为数组长度可以省略边界条件的判断，因为存在一种情况是 <code>target</code> 大于数组中的所有数，此时需要插入到数组长度的位置。</p>`,25),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),e(),n("span",{class:"token class-name"},"Solution"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token keyword"},"public"),e(),n("span",{class:"token keyword"},"int"),e(),n("span",{class:"token function"},"searchInsert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),e(" nums"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"int"),e(" target"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
      `),n("span",{class:"token keyword"},"int"),e(" n "),n("span",{class:"token operator"},"="),e(" nums"),n("span",{class:"token punctuation"},"."),e("length"),n("span",{class:"token punctuation"},";"),e(`
      `),n("span",{class:"token keyword"},"int"),e(" l "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),e(" r "),n("span",{class:"token operator"},"="),e(" n "),n("span",{class:"token operator"},"-"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`

      `),n("span",{class:"token keyword"},"while"),e(),n("span",{class:"token punctuation"},"("),e("l "),n("span",{class:"token operator"},"<="),e(" r"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
          `),n("span",{class:"token keyword"},"int"),e(" m "),n("span",{class:"token operator"},"="),e(" l "),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),e("r "),n("span",{class:"token operator"},"-"),e(" l"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},">>"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
          `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("nums"),n("span",{class:"token punctuation"},"["),e("m"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token operator"},">="),e(" target"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
              r `),n("span",{class:"token operator"},"="),e(" m "),n("span",{class:"token operator"},"-"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
          `),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"else"),e(),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("nums"),n("span",{class:"token punctuation"},"["),e("m"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token operator"},"<"),e(" target"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
              l `),n("span",{class:"token operator"},"="),e(" m "),n("span",{class:"token operator"},"+"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(`
          `),n("span",{class:"token punctuation"},"}"),e(`
      `),n("span",{class:"token punctuation"},"}"),e(`
      `),n("span",{class:"token keyword"},"return"),e(" l"),n("span",{class:"token punctuation"},";"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("img",{src:"https://file.pandacode.cn/blog/202201271143358.png",alt:"image-20220127114324756",style:{zoom:"50%"}},null,-1),b=n("p",null,[n("strong",null,"复杂度分析")],-1),h=n("p",null,"​ 时间复杂度： O(logn)，其中 n 为数组的长度。二分查找所需的时间复杂度为 O(logn)。",-1),g=n("p",null,"​ 空间复杂度： O(1)。我们只需要常数空间存放若干变量。",-1),_=n("h2",{id:"🙏-感谢",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🙏-感谢","aria-hidden":"true"},"#"),e(" 🙏 感谢")],-1),x={href:"https://leetcode-cn.com/",target:"_blank",rel:"noopener noreferrer"};function f(w,y){const o=s("code-block"),c=s("code-group"),l=s("ExternalLinkIcon");return p(),r("div",null,[k,a(c,null,{default:t(()=>[a(o,{title:"JAVA 二分查找",active:""},{default:t(()=>[m]),_:1})]),_:1}),v,b,h,g,_,n("ul",null,[n("li",null,[n("a",x,[e("力扣（LeetCode）"),a(l)])])])])}const V=i(u,[["render",f],["__file","35.html.vue"]]);export{V as default};
