import{_ as o,r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app.4659d0e0.js";const l="/assets/202204050932048.69d9ccb7.png",u="/assets/202204050952306.835292d0.png",r={},d=n("h1",{id:"swift基础-集合类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#swift基础-集合类型","aria-hidden":"true"},"#"),s(" Swift基础 - 集合类型")],-1),k=n("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html",-1),m=n("p",null,[s("Swift提供了三种主要"),n("em",null,"集合类型"),s("，称为数组、集合和字典，用于存储值集合。数组是有序的值集合。集合是唯一值的无序集合。字典是键值关联的无序集合。")],-1),v=n("p",null,[n("img",{src:l,alt:"../_images/CollectionTypes_intro_2x.png"})],-1),g=n("p",null,"Swift 中的数组、集合和字典始终清楚可以存储的值和键的类型。这意味着您不能错误地将错误类型的值插入集合中。这也意味着您可以对从集合中检索的值类型有信心。",-1),b=n("p",null,"注意",-1),h=n("em",null,"通用集合",-1),f={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="收藏品的可变性" tabindex="-1"><a class="header-anchor" href="#收藏品的可变性" aria-hidden="true">#</a> 收藏品的可变性</h2><p>如果您创建一个数组、集合或字典，并将其分配给变量，则创建的集合将是<em>可变的</em>。这意味着您可以在集合创建后通过添加、删除或更改集合中的项目来更改（或<em>突变</em>）。如果您将数组、集合或字典分配给常量，则该集合是<em>不可变的</em>，其大小和内容无法更改。</p><blockquote><p>注意</p><p>在集合不需要更改的所有情况下，创建不可变集合是良好做法。这样做使您更容易对代码进行推理，并使Swift编译器能够优化您创建的集合的性能。</p></blockquote><h2 id="数组-arrays" tabindex="-1"><a class="header-anchor" href="#数组-arrays" aria-hidden="true">#</a> 数组(Arrays)</h2><p><em>数组</em>将相同类型的值存储在有序列表中。相同的值可以在不同位置多次出现在数组中。</p>',5),q=n("p",null,"注意",-1),y=n("p",null,[s("Swift的"),n("code",null,"Array"),s("类型与Foundation的"),n("code",null,"NSArray"),s("类桥接。")],-1),_=n("code",null,"Array",-1),S={href:"https://developer.apple.com/documentation/swift/array#2846730",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="数组类型速记语法" tabindex="-1"><a class="header-anchor" href="#数组类型速记语法" aria-hidden="true">#</a> 数组类型速记语法</h3><p>Swift数组的类型被完整写成<code>Array&lt;Element&gt;</code>，其中<code>Element</code>是允许数组存储的值类型。您还可以将数组的类型以速记形式写为<code>[Element]</code>虽然这两种形式在功能上相同，但速记形式是首选，并在参考数组类型时在整个指南中使用。</p><h3 id="创建空数组" tabindex="-1"><a class="header-anchor" href="#创建空数组" aria-hidden="true">#</a> 创建空数组</h3><p>您可以使用初始化器语法创建特定类型的空数组：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> someInts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;someInts is of type [Int] with </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someInts<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> items.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;someInts is of type [Int] with 0 items.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，从初始化器的类型推断出<code>someInts</code>变量的类型为<code>[Int]</code>。</p><p>或者，如果上下文已经提供了类型信息，例如函数参数或已经键入的变量或常量，您可以创建一个带有空数组文字的空数组，该数组写为<code>[]</code>（一对空的方括号）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>someInts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// someInts now contains 1 value of type Int</span>
someInts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// someInts is now an empty array, but is still of type [Int]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建具有默认值的数组" tabindex="-1"><a class="header-anchor" href="#创建具有默认值的数组" aria-hidden="true">#</a> 创建具有默认值的数组</h3><p>Swift的<code>Array</code>类型还提供了一个初始化器，用于创建特定大小的数组，其所有值都设置为相同的默认值。您向此初始化器传递适当类型的默认值（称为<code>repeating</code>）：以及该值在新数组中重复的次数（称为<code>count</code>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> threeDoubles <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过将两个数组一起创建数组" tabindex="-1"><a class="header-anchor" href="#通过将两个数组一起创建数组" aria-hidden="true">#</a> 通过将两个数组一起创建数组</h3><p>您可以通过添加两个具有兼容类型的现有数组与加法运算符（<code>+</code>）来创建新数组。新数组的类型从您添加的两个数组的类型推断出来：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> anotherThreeDoubles <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token number">2.5</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]</span>

<span class="token keyword">var</span> sixDoubles <span class="token operator">=</span> threeDoubles <span class="token operator">+</span> anotherThreeDoubles
<span class="token comment">// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用数组字面创建数组" tabindex="-1"><a class="header-anchor" href="#使用数组字面创建数组" aria-hidden="true">#</a> 使用数组字面创建数组</h3><p>您还可以使用<em>数</em>组<em>文字</em>初始化数组，这是将一个或多个值写入数组集合的简写方式。数组文字写为值列表，用逗号分隔，周围是一对方括号：</p><p>[<code>value 1</code>,<code> value 2</code>, <code>value 3</code>]</p><p>下面的示例创建一个名为<code>shoppingList</code>的数组来存储<code>String</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> shoppingList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Eggs&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Milk&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// shoppingList has been initialized with two initial items</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shoppingList</code>变量被声明为“字符串值数组”，写为<code>[String]</code>由于此特定数组指定了<code>String</code>的值类型，因此仅允许存储<code>String</code>值。在这里，<code>shoppingList</code>数组用两个<code>String</code>值（“<code>&quot;Eggs&quot;</code>和<code>&quot;Milk&quot;</code>初始化，写在数组文字中。</p><blockquote><p>注意</p><p><code>shoppingList</code>数组被声明为变量（使用<code>var</code>介绍器），而不是常量（使用<code>let</code>介绍器），因为在下面的示例中，购物列表中添加了更多项目。</p></blockquote><p>在这种情况下，数组字面包含两个<code>String</code>值，没有其他值。这与<code>shoppingList</code>变量声明的类型（只能包含<code>String</code>值的数组）匹配，因此允许分配数组文字作为使用两个初始项初始化<code>shoppingList</code>的一种方式。</p><p>由于Swift的类型推断，如果您使用包含相同类型值的数组文字初始化数组，则不必编写数组的类型。<code>shoppingList</code>的初始化可以以较短的形式编写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Eggs&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Milk&quot;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于数组文字中的所有值都是相同的类型，Swift可以推断<code>[String]</code>是用于<code>shoppingList</code>变量的正确类型。</p><h3 id="访问和修改数组" tabindex="-1"><a class="header-anchor" href="#访问和修改数组" aria-hidden="true">#</a> 访问和修改数组</h3><p>您可以通过数组的方法和属性或使用下标语法访问和修改数组。</p><p>要查找数组中的项目数量，请检查其只读<code>count</code>属性：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The shopping list contains </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">shoppingList<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> items.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;The shopping list contains 2 items.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用布尔为<code>isEmpty</code>属性作为快捷方式，以检查<code>count</code>属性是否等于<code>0</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> shoppingList<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The shopping list is empty.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The shopping list isn&#39;t empty.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The shopping list isn&#39;t empty.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过调用数组的<code>append(_:)</code>方法将新项添加到数组的末尾：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>shoppingList<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Flour&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// shoppingList now contains 3 items, and someone is making pancakes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，将一个或多个兼容项的数组附加到加法赋值运算符（<code>+=</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>shoppingList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Baking Powder&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// shoppingList now contains 4 items</span>
shoppingList <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Chocolate Spread&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Cheese&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Butter&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// shoppingList now contains 7 item</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<em>下标语法</em>从数组中检索值，在数组名称后立即传递要在方括号内检索的值的索引：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> firstItem <span class="token operator">=</span> shoppingList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">// firstItem is equal to &quot;Eggs&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>数组中的第一个项目的索引为<code>0</code>，而不是1。Swift中的数组总是零索引。</p></blockquote><p>您可以使用下标语法更改给定索引的现有值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>shoppingList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Six eggs&quot;</span></span>
<span class="token comment">// the first item in the list is now equal to &quot;Six eggs&quot; rather than &quot;Eggs&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用下标语法时，指定的索引必须是有效的。例如，写 <code>shoppingList[shoppingList.count] = &quot;Salt&quot;</code> 将一个项添加到数组的末尾会导致运行时错误。</p><p>您还可以使用下标语法一次更改值范围，即使替换值集的长度与您要替换的范围不同。以下示例将<code>&quot;ChocolateSpread&quot;</code> <code>&quot;Cheese&quot;</code>和<code>&quot;Butter&quot;</code>替换为<code>&quot;Bananas&quot;</code>和<code>&quot;Apples&quot;</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>shoppingList<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Bananas&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Apples&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// shoppingList now contains 6 items</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要在指定的索引处将项目插入数组，请调用数组的<code>insert(_:at:)</code>方法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>shoppingList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Maple Syrup&quot;</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// shoppingList now contains 7 items</span>
<span class="token comment">// &quot;Maple Syrup&quot; is now the first item in the list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对<code>insert(_:at:)</code>方法的调用在购物清单开头插入一个值为<code>&quot;MapleSyrup&quot;</code>的新项目，索引为<code>0</code>。</p><p>同样，您使用<code>remove(at:)</code>方法从数组中删除项目。此方法在指定索引处删除项目并返回已删除的项目（尽管如果您不需要，您可以忽略返回的值）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> mapleSyrup <span class="token operator">=</span> shoppingList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// the item that was at index 0 has just been removed</span>
<span class="token comment">// shoppingList now contains 6 items, and no Maple Syrup</span>
<span class="token comment">// the mapleSyrup constant is now equal to the removed &quot;Maple Syrup&quot; string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>如果您尝试访问或修改超出数组现有边界的索引的值，您将触发运行时错误。您可以通过将索引与数组的<code>count</code>属性进行比较，在使用索引之前检查索引是否有效。数组中最大的有效索引是<code>count1</code>，因为数组从零开始索引——然而，当<code>count</code>为<code>0</code>（这意味着数组为空），没有有效的索引。</p></blockquote><p>当删除项目时，数组中的任何间隙都会关闭，因此索引<code>0</code>的值再次等于<code>&quot;Sixeggs&quot;</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>firstItem <span class="token operator">=</span> shoppingList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment">// firstItem is now equal to &quot;Six eggs&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想从数组中删除最后一项，使用&#39; removeLast() &#39;方法，而不是&#39; remove(at:) &#39;方法，以避免需要查询数组的&#39; count &#39;属性。像&#39; remove(at:) &#39;方法一样，&#39; removeLast() &#39;返回被删除的项:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> apples <span class="token operator">=</span> shoppingList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// the last item in the array has just been removed</span>
<span class="token comment">// shoppingList now contains 5 items, and no apples</span>
<span class="token comment">// the apples constant is now equal to the removed &quot;Apples&quot; string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在数组上迭代" tabindex="-1"><a class="header-anchor" href="#在数组上迭代" aria-hidden="true">#</a> 在数组上迭代</h3><p>您可以使用<code>for</code>-<code>in</code>循环迭代数组中的整组值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> shoppingList <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Six eggs</span>
<span class="token comment">// Milk</span>
<span class="token comment">// Flour</span>
<span class="token comment">// Baking Powder</span>
<span class="token comment">// Bananas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您需要每个项目的整数索引及其值，请使用<code>enumerated()</code>方法迭代数组。对于数组中的每个项目，<code>enumerated()</code>方法返回由整数和项组成的元组。整数从零开始，每个项目数一个；如果您在整个数组中枚举，这些整数与项目的索引匹配。您可以将元组分解为临时常量或变量，作为迭代的一部分：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> shoppingList<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Item </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index <span class="token operator">+</span> <span class="token number">1</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">value</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Item 1: Six eggs</span>
<span class="token comment">// Item 2: Milk</span>
<span class="token comment">// Item 3: Flour</span>
<span class="token comment">// Item 4: Baking Powder</span>
<span class="token comment">// Item 5: Bananas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),L=n("code",null,"for",-1),D=n("code",null,"in",-1),I={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"sets",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sets","aria-hidden":"true"},"#"),s(" Sets")],-1),P=n("p",null,[n("em",null,"集合"),s("在集合中存储相同类型的不同值，没有定义的顺序。当项目顺序不重要时，或者当您需要确保项目只出现一次时，您可以使用集合而不是数组。")],-1),T=n("p",null,"注意",-1),C=n("p",null,[s("Swift的"),n("code",null,"Set"),s("类型与Foundation的"),n("code",null,"NSSet"),s("类桥接。")],-1),G=n("code",null,"Set",-1),B={href:"https://developer.apple.com/documentation/swift/set#2845530",target:"_blank",rel:"noopener noreferrer"},E=n("h3",{id:"集合类型的哈希值",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集合类型的哈希值","aria-hidden":"true"},"#"),s(" 集合类型的哈希值")],-1),N=n("p",null,"为了存储在集合中，类型必须是“哈希”的——也就是说，类型必须为自己提供一种计算“哈希值”的方法。哈希值是一个' Int '值，它对所有相等比较的对象都是相同的，例如，如果' A == b '， ' A '的哈希值等于' b '的哈希值。",-1),H=n("code",null,"String",-1),V=n("code",null,"Int",-1),F=n("code",null,"Double",-1),U=n("code",null,"Bool",-1),Y={href:"https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,"注意",-1),R=n("code",null,"Hashable",-1),M=n("code",null,"hash(into:)",-1),z={href:"https://developer.apple.com/documentation/swift/hashable",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"Hashable",-1),Z={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="设置类型语法" tabindex="-1"><a class="header-anchor" href="#设置类型语法" aria-hidden="true">#</a> 设置类型语法</h3><p>Swift集的类型写为<code>Set&lt;Element&gt;</code>，其中<code>Element</code>是允许该集存储的类型。与数组不同，集合没有等效的速记形式。</p><h3 id="创建和初始化空集" tabindex="-1"><a class="header-anchor" href="#创建和初始化空集" aria-hidden="true">#</a> 创建和初始化空集</h3><p>您可以使用初始化器语法创建特定类型的空集：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> letters <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Character</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;letters is of type Set&lt;Character&gt; with </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">letters<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> items.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;letters is of type Set&lt;Character&gt; with 0 items.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>从初始化器的类型推断<code>letters</code>变量的类型为<code>Set&lt;Character&gt;</code>。</p></blockquote><p>或者，如果上下文已经提供了类型信息，例如函数参数或已经键入的变量或常量，您可以创建一个带有空数组文字的空集：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>letters<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// letters now contains 1 value of type Character</span>
letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// letters is now an empty set, but is still of type Set&lt;Character&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用数组字面创建集合" tabindex="-1"><a class="header-anchor" href="#使用数组字面创建集合" aria-hidden="true">#</a> 使用数组字面创建集合</h3><p>您还可以使用数组文字初始化集合，作为将一个或多个值写入集合的速记方式。</p><p>下面的示例创建一个名为 <code>favoriteGenres</code>集合来存储<code>String</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> favoriteGenres<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Rock&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Classical&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Hip hop&quot;</span></span><span class="token punctuation">]</span>
<span class="token comment">// favoriteGenres has been initialized with three initial items</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>favoritegenre</code> 变量被声明为&quot;一组 <code>String</code> 值&quot;，写成 <code>set &lt;String&gt;</code> 。因为这个特定的集合指定了一个值类型 <code>String</code> ，它只允许存储 String 值。在这里， <code>favoritegenre</code> 集合被初始化为三个 String 值( <code>Rock</code> ， <code>Classical</code> 和 <code>Hip hop</code> )，写入一个数组文字。</p><blockquote><p>注意</p><p><code>favoriteGenres</code>集被声明为变量（使用<code>var</code>引入器），而不是常量（使用<code>let</code>介绍器），因为在下面的示例中添加了和删除了项目。</p></blockquote><p>仅凭数组字面值无法推断集合类型，因此必须显式声明类型<code>Set</code>。但是，由于Swift的类型推断，如果您使用仅包含一种类型的值的数组文字初始化集元素的类型，则不必编写该集合元素的类型。<code>favoriteGenres</code>的初始化可以以较短的形式编写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> favoriteGenres<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Rock&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Classical&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Hip hop&quot;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于数组文字中的所有值都是相同的类型，Swift可以推断<code>Set&lt;String&gt;</code>是用于<code>favoriteGenres</code>变量的正确类型。</p><h3 id="访问和修改一组" tabindex="-1"><a class="header-anchor" href="#访问和修改一组" aria-hidden="true">#</a> 访问和修改一组</h3><p>您通过其方法和属性访问和修改集合。</p><p>要了解集合中的项目数量，请检查其只读<code>count</code>属性：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I have </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">favoriteGenres<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> favorite music genres.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;I have 3 favorite music genres.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用布尔为<code>isEmpty</code>属性作为快捷方式，以检查<code>count</code>属性是否等于<code>0</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> favoriteGenres<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;As far as music goes, I&#39;m not picky.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I have particular music preferences.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;I have particular music preferences.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过调用集合的<code>insert(_:)</code>方法将新项目添加到集合中：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>favoriteGenres<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Jazz&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// favoriteGenres now contains 4 items</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过调用集合的<code>remove(_:)</code>方法从集合中删除项目，如果项目是集合的成员，则删除项目，并返回删除的值，如果集合不包含它，则返回<code>nil</code>。或者，集合中的所有项目都可以使用其<code>removeAll()</code>方法删除。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> removedGenre <span class="token operator">=</span> favoriteGenres<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Rock&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">removedGenre</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">? I&#39;m over it.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I never much cared for that.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Rock? I&#39;m over it.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要检查集合是否包含特定项，请使用<code>contains(_:)</code>方法。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> favoriteGenres<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Funk&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I get up on the good foot.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s too funky in here.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;It&#39;s too funky in here.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在一组上迭代" tabindex="-1"><a class="header-anchor" href="#在一组上迭代" aria-hidden="true">#</a> 在一组上迭代</h3><p>您可以使用<code>for</code>-<code>in</code>循环迭代集合中的值。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> genre <span class="token keyword">in</span> favoriteGenres <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">genre</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Classical</span>
<span class="token comment">// Jazz</span>
<span class="token comment">// Hip hop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),J=n("code",null,"for",-1),Q=n("code",null,"in",-1),W={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>Swift的<code>Set</code>类型没有定义的顺序。要按特定顺序迭代集合的值，请使用<code>sorted()</code>方法，该方法将集合的元素作为使用<code>&lt;</code>运算符排序的数组返回。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> genre <span class="token keyword">in</span> favoriteGenres<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">genre</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Classical</span>
<span class="token comment">// Hip hop</span>
<span class="token comment">// Jazz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行集合操作" tabindex="-1"><a class="header-anchor" href="#执行集合操作" aria-hidden="true">#</a> 执行集合操作</h2><p>您可以高效地执行基本集合操作，例如将两个集合组合在一起，确定两个集合具有共同值，或确定两个集合是否包含所有、部分或不包含相同的值。</p><h3 id="基本集操作" tabindex="-1"><a class="header-anchor" href="#基本集操作" aria-hidden="true">#</a> 基本集操作</h3><p>下面的插图描绘了两个集合——<code>a</code>和<code>b</code>——以及由阴影区域表示的各种集合操作的结果。</p><img src="`+u+`" alt="../_images/setVennDiagram_2x.png" style="zoom:67%;"><ul><li>使用<code>intersection(_:)</code>方法创建一个新集合，其中只有两个集合共有的值。</li><li>使用<code>symmetricDifference(_:)</code>方法创建一个新集合，其中两个集合都有值，但不是两者。</li><li>使用<code>union(_:)</code>方法创建一个包含两个集合中所有值的新集合。</li><li>使用<code>subtracting(_:)</code>方法创建一个值不在指定集合中的新集合。</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> oddDigits<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> evenDigits<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> singleDigitPrimeNumbers<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

oddDigits<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>evenDigits<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
oddDigits<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>evenDigits<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// []</span>
oddDigits<span class="token punctuation">.</span><span class="token function">subtracting</span><span class="token punctuation">(</span>singleDigitPrimeNumbers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// [1, 9]</span>
oddDigits<span class="token punctuation">.</span><span class="token function">symmetricDifference</span><span class="token punctuation">(</span>singleDigitPrimeNumbers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// [1, 2, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设定成员资格和平等" tabindex="-1"><a class="header-anchor" href="#设定成员资格和平等" aria-hidden="true">#</a> 设定成员资格和平等</h3><p>下图描述了三个集合——a、b和c，其中重叠的区域表示集合之间共享的元素。设置一个是集的超集b,因为包含了所有元素b。相反地,b是集的一个子集,因为所有元素b也包含一组。b, c是不相交的,因为他们没有共同之处。</p><p><img src="https://docs.swift.org/swift-book/_images/setEulerDiagram_2x.png" alt="../_images/setEulerDiagram_2x.png"></p><ul><li>使用“相等”运算符(<code>==</code>)确定两个集合是否包含所有相同的值。</li><li>Use the <code>isSubset(of:)</code> 方法确定一个集合的所有值是否包含在指定的集合中。</li><li>Use the <code>isSuperset(of:)</code> 方法确定一个集合是否包含指定集合中的所有值。</li><li>Use the <code>isStrictSubset(of:)</code> or <code>isStrictSuperset(of:)</code> 方法确定一个集合是子集还是超集，但不等于指定的集合。</li><li>使用<code>isDisjoint(with:)</code>方法确定两个集合是否没有共同值。</li></ul><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> houseAnimals<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;🐶&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐱&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">let</span> farmAnimals<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;🐮&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐔&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐑&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐶&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐱&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">let</span> cityAnimals<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;🐦&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐭&quot;</span></span><span class="token punctuation">]</span>

houseAnimals<span class="token punctuation">.</span><span class="token function">isSubset</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> farmAnimals<span class="token punctuation">)</span>
<span class="token comment">// true</span>
farmAnimals<span class="token punctuation">.</span><span class="token function">isSuperset</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> houseAnimals<span class="token punctuation">)</span>
<span class="token comment">// true</span>
farmAnimals<span class="token punctuation">.</span><span class="token function">isDisjoint</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> cityAnimals<span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字典-dictionaries" tabindex="-1"><a class="header-anchor" href="#字典-dictionaries" aria-hidden="true">#</a> 字典(Dictionaries)</h2><p><em>字典在</em>集合中存储相同类型的键和相同类型的值之间的关联，没有定义的顺序。每个值都与一个唯一的<em>键</em>相关联，该键充当字典中该值的标识符。与数组中的项目不同，字典中的项目没有指定的顺序。当您需要根据它们的标识符查找值时，您可以使用字典，就像使用现实世界的字典来查找特定单词的定义一样。</p>`,16),$=n("p",null,"注意",-1),nn=n("p",null,[s("Swift的"),n("code",null,"Dictionary"),s("类型与Foundation的"),n("code",null,"NSDictionary"),s("类相连。")],-1),sn=n("code",null,"Dictionary",-1),an={href:"https://developer.apple.com/documentation/swift/dictionary#2846239",target:"_blank",rel:"noopener noreferrer"},en=t(`<h3 id="字典类型速记语法" tabindex="-1"><a class="header-anchor" href="#字典类型速记语法" aria-hidden="true">#</a> 字典类型速记语法</h3><p>Swift字典的类型完整地写成‘dictionary &lt;Key, Value&gt;’，其中‘Key’是可以用作字典键的值的类型，而‘Value’是字典为这些键存储的值的类型。</p><blockquote><p>注意</p><p>字典<code>Key</code>类型必须符合<code>Hashable</code>协议，就像集合的值类型一样。</p><p>您还可以以速记形式将字典类型写为<code>[Key:Value]</code>虽然这两种形式在功能上相同，但简写形式是首选，并在参考词典类型时在整个指南中使用。</p></blockquote><h3 id="创建空字典" tabindex="-1"><a class="header-anchor" href="#创建空字典" aria-hidden="true">#</a> 创建空字典</h3><p>与数组一样，您可以使用初始化器语法创建特定类型的空<code>Dictionary</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> namesOfIntegers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token comment">// namesOfIntegers is an empty [Int: String] dictionary</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子创建了一个“[Int: String]”类型的空字典来存储人类可读的整数值名称。它的键的类型是&#39; Int &#39;，它的值的类型是&#39; String &#39;。</p><p>如果上下文已经提供了类型信息，您可以创建一个带有空字典文字的空字典，该字典写为<code>[:]</code>（一对方括号内的冒号）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>namesOfIntegers<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;sixteen&quot;</span></span>
<span class="token comment">// namesOfIntegers now contains 1 key-value pair</span>
namesOfIntegers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token comment">// namesOfIntegers is once again an empty dictionary of type [Int: String]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用字典创建词典" tabindex="-1"><a class="header-anchor" href="#使用字典创建词典" aria-hidden="true">#</a> 使用字典创建词典</h3><p>您还可以使用<em>字典文字</em>初始化字典，该字典的语法与前面看到的数组文字相似。字典文字是将一个或多个键值对写成<code>Dictionary</code>集合的简写方式。</p><p><em>键值对</em>是键和值的组合。在字典文字中，每个键值对中的键和值由冒号分隔。键值对写成列表，用逗号分隔，周围是一对方括号：</p><p>[<code>key 1</code>: <code>value 1</code>, <code>key 2</code>: <code>value 2</code>, <code>key 3</code>: <code>value 3</code>]</p><p>下面的示例创建了一本词典来存储国际机场的名称。在本词典中，键是三个字母的国际航空运输协会代码，值是机场名称：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> airports<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;YYZ&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Toronto Pearson&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;DUB&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Dublin&quot;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>airports</code>词典被声明为具有<code>[String:String]</code>的类型，意思是“键为<code>String</code>类型，其值也为<code>String</code>类型的<code>Dictionary</code>”。</p><blockquote><p>注意</p><p><code>airports</code>词典被声明为变量（使用<code>var</code>介绍器），而不是常量（使用<code>let</code>介绍器），因为在下面的示例中，词典中添加了更多的机场。</p></blockquote><p><code>airports</code>词典以包含两个键值对的字典字面进行初始化。第一对有<code>&quot;YYZ&quot;</code>的键和<code>&quot;TorontoPearson&quot;</code>的值。第二对有<code>&quot;DUB&quot;</code>的键和<code>&quot;Dublin&quot;</code>的值。</p><p>这本词典的文字包含两个<code>String:String</code>对。此键值类型与<code>airports</code>变量声明的类型匹配（仅具有<code>String</code>键和仅<code>String</code>值的字典），因此允许分配字典文字，作为用两个初始项初始化<code>airports</code>字典的一种方式。</p><p>与数组一样，如果您使用键和值具有一致类型的字典字典初始化，则不必编写字典类型。<code>airports</code>的初始化可以以较短的形式书写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> airports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;YYZ&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Toronto Pearson&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;DUB&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Dublin&quot;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为字面值中的所有键都是彼此相同的类型，同样的，所有值也都是彼此相同的类型，Swift可以推断&#39; [String: String] &#39;是&#39; airports &#39;字典的正确类型。</p><h3 id="访问和修改词典" tabindex="-1"><a class="header-anchor" href="#访问和修改词典" aria-hidden="true">#</a> 访问和修改词典</h3><p>您通过字典的方法和属性或使用下标语法访问和修改字典。</p><p>与数组一样，您可以通过检查字典的只读<code>count</code>属性来查找<code>Dictionary</code>中的项目数量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The airports dictionary contains </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airports<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> items.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;The airports dictionary contains 2 items.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用布尔为<code>isEmpty</code>属性作为快捷方式，以检查<code>count</code>属性是否等于<code>0</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> airports<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The airports dictionary is empty.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The airports dictionary isn&#39;t empty.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The airports dictionary isn&#39;t empty.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以将新项目添加到带有下标语法的字典中。使用适当类型的新键作为下标索引，并分配适当类型的新值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;London&quot;</span></span>
<span class="token comment">// the airports dictionary now contains 3 items</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用下标语法来更改与特定键关联的值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LHR&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;London Heathrow&quot;</span></span>
<span class="token comment">// the value for &quot;LHR&quot; has been changed to &quot;London Heathrow&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>作为下标的替代方案，使用字典的<code>updateValue(_:forKey:)</code>方法来设置或更新特定键的值。与上面的下标示例一样，<code>updateValue(_:forKey:)</code>方法为键设置值（如果没有，则为该键设置值，如果该键已经存在，则更新该值。然而，与下标不同，<code>updateValue(_:forKey:)</code>方法在执行更新后返回<em>旧</em>值。这使您能够检查是否进行了更新。</p><p><code>updateValue(_:forKey:)</code>方法返回字典值类型的可选值。例如，对于存储<code>String</code>值的字典，该方法返回<code>String?</code>或“可选<code>String</code>”类型的值。如果更新前存在该键，则此可选值包含该键的旧值，如果没有值，则<code>nil</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> oldValue <span class="token operator">=</span> airports<span class="token punctuation">.</span><span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dublin Airport&quot;</span></span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;DUB&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The old value for DUB was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">oldValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The old value for DUB was Dublin.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用下标语法从字典中检索特定键的值。由于可以请求一个不存在值的键，字典的下标返回字典值类型的可选值。如果字典包含请求键的值，则下标返回一个可选值，其中包含该键的现有值。否则，下标返回<code>nil</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> airportName <span class="token operator">=</span> airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;DUB&quot;</span></span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The name of the airport is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airportName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That airport isn&#39;t in the airports dictionary.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The name of the airport is Dublin Airport.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用下标语法通过为该键分配<code>nil</code>的值从字典中删除键值对：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;APL&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Apple International&quot;</span></span>
<span class="token comment">// &quot;Apple International&quot; isn&#39;t the real airport for APL, so delete it</span>
airports<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;APL&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>
<span class="token comment">// APL has now been removed from the dictionary</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，使用<code>removeValue(forKey:)</code>方法从字典中删除键值对。如果存在键值对，此方法将删除并返回删除的值，如果没有值，则返回<code>nil</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> removedValue <span class="token operator">=</span> airports<span class="token punctuation">.</span><span class="token function">removeValue</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;DUB&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The removed airport&#39;s name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">removedValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The airports dictionary doesn&#39;t contain a value for DUB.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;The removed airport&#39;s name is Dublin Airport.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在字典上迭代" tabindex="-1"><a class="header-anchor" href="#在字典上迭代" aria-hidden="true">#</a> 在字典上迭代</h3><p>您可以使用<code>for</code>-<code>in</code>循环迭代字典中的键值对。字典中的每个项目都作为<code>(key,value)</code>元组返回，您可以将元组的成员分解为临时常量或变量，作为迭代的一部分：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>airportCode<span class="token punctuation">,</span> airportName<span class="token punctuation">)</span> <span class="token keyword">in</span> airports <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airportCode</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airportName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// LHR: London Heathrow</span>
<span class="token comment">// YYZ: Toronto Pearson</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),tn=n("code",null,"for",-1),on=n("code",null,"in",-1),pn={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p>您还可以通过访问字典的键和<code>values</code>属性来检索字典键或值<code>keys</code>迭代集合：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> airportCode <span class="token keyword">in</span> airports<span class="token punctuation">.</span>keys <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Airport code: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airportCode</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Airport code: LHR</span>
<span class="token comment">// Airport code: YYZ</span>

<span class="token keyword">for</span> airportName <span class="token keyword">in</span> airports<span class="token punctuation">.</span>values <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Airport name: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">airportName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Airport name: London Heathrow</span>
<span class="token comment">// Airport name: Toronto Pearson</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您需要将字典的键或值与采用<code>Array</code>实例的API一起使用，请使用<code>keys</code>或<code>values</code>属性初始化新数组：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> airportCodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>airports<span class="token punctuation">.</span>keys<span class="token punctuation">)</span>
<span class="token comment">// airportCodes is [&quot;LHR&quot;, &quot;YYZ&quot;]</span>

<span class="token keyword">let</span> airportNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span>airports<span class="token punctuation">.</span>values<span class="token punctuation">)</span>
<span class="token comment">// airportNames is [&quot;London Heathrow&quot;, &quot;Toronto Pearson&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift的<code>Dictionary</code>类型没有定义的顺序。要按特定顺序迭代字典的键或值，请在其<code>keys</code>或<code>values</code>属性上使用<code>sorted()</code>方法。</p>`,5);function ln(un,rn){const a=p("ExternalLinkIcon");return i(),c("div",null,[d,k,m,v,g,n("blockquote",null,[b,n("p",null,[s("Swift的数组、集合和字典类型作为"),h,s("实现。有关泛型类型和集合的更多信息，请参阅"),n("a",f,[s("泛型"),e(a)]),s("。")])]),w,n("blockquote",null,[q,y,n("p",null,[s("有关将"),_,s("与Foundation和Cocoa一起使用的更多信息，请参阅"),n("a",S,[s("Array和NSArray之间的桥接"),e(a)]),s("。")])]),x,n("p",null,[s("有关"),L,s("-"),D,s("循环的更多信息，请参阅"),n("a",I,[s("for-in循环"),e(a)]),s("。")]),A,P,n("blockquote",null,[T,C,n("p",null,[s("For more information about using "),G,s(" with Foundation and Cocoa, see "),n("a",B,[s("Bridging Between Set and NSSet"),e(a)]),s(".")])]),E,N,n("p",null,[s("Swift的所有基本类型（如"),H,s("、"),V,s("、"),F,s("和"),U,s("）默认都是可散列的，并且可以用作设置值类型或字典键类型。默认情况下，没有关联值的枚举案例值（如"),n("a",Y,[s("枚举"),e(a)]),s("中所述）也是可散列的。")]),n("blockquote",null,[K,n("p",null,[s("您可以使用自己的自定义类型作为设置值类型或字典键类型，使其符合Swift标准库中的"),R,s("协议。有关实现所需"),M,s("方法的信息，请参阅"),n("a",z,[O,e(a)]),s("。有关遵守协议的信息，请参阅"),n("a",Z,[s("协议"),e(a)]),s("。")])]),j,n("p",null,[s("有关"),J,s("-"),Q,s("循环的更多信息，请参阅"),n("a",W,[s("for-in循环"),e(a)]),s("。")]),X,n("blockquote",null,[$,nn,n("p",null,[s("有关使用"),sn,s("与基金会和可可的更多信息，请参阅"),n("a",an,[s("词典和NS词典之间的衔接"),e(a)]),s("。")])]),en,n("p",null,[s("有关"),tn,s("-"),on,s("循环的更多信息，请参阅"),n("a",pn,[s("for-in循环"),e(a)]),s("。")]),cn])}const kn=o(r,[["render",ln],["__file","13.swift-collection-types.html.vue"]]);export{kn as default};
