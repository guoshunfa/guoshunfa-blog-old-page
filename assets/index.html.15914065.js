import{_ as n,o as s,c as a,e as t}from"./app.4659d0e0.js";const p={},e=t(`<h1 id="react框架-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#react框架-解决跨域问题" aria-hidden="true">#</a> React框架 - 解决跨域问题</h1><h2 id="_1-场景" tabindex="-1"><a class="header-anchor" href="#_1-场景" aria-hidden="true">#</a> <strong>1. 场景</strong></h2><p>React服务的地址是<code>127.0.0.1:3000</code>，接口服务的地址是<code>127.0.0.1:5000</code>。</p><p>React服务3000直接调用接口服务5000可能会产生跨域问题。</p><p>这里有两种解决方案，一种是直接在package.json中配置，一种是使用单独的配置文件。下面会对这两种进行介绍。</p><h2 id="_2-第一种-package-json-配置" tabindex="-1"><a class="header-anchor" href="#_2-第一种-package-json-配置" aria-hidden="true">#</a> 2. 第一种：package.json 配置</h2><blockquote><p>缺点：</p><ol><li>只能配置一个服务，如有多个服务不能使用。</li></ol><p>优点：</p><ol><li>配置简单。</li></ol></blockquote><p><strong>配置：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;proxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://127.0.0.1:5000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>访问：</strong></p><p>正常访问3000服务，会被转发到5000，如：<code>http://127.0.0.1:3000/findUsers</code>。</p><h2 id="_3-第二种-使用-http-proxy-middleware-组件包" tabindex="-1"><a class="header-anchor" href="#_3-第二种-使用-http-proxy-middleware-组件包" aria-hidden="true">#</a> 3. 第二种：使用 http-proxy-middleware 组件包</h2><blockquote><p>缺点：</p><ol><li>配置繁琐。</li><li>接口调用必须加前缀，如/api1。</li></ol><p>优点：</p><ol><li>可配置多个接口服务。</li></ol></blockquote><p><strong>配置：</strong></p><p>src文件下创建setupProxy.js文件，文件内容如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy-middleware&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
		<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">&#39;/api1&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment">//遇见/api1前缀的请求，就会触发该代理配置</span>
			<span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;http://localhost:5000&#39;</span><span class="token punctuation">,</span> <span class="token comment">//请求转发给谁</span>
			<span class="token literal-property property">changeOrigin</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//控制服务器收到的请求头中Host的值</span>
			<span class="token literal-property property">pathRewrite</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&#39;^/api1&#39;</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> <span class="token comment">//重写请求路径(必须)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">&#39;/api2&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
			<span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;http://localhost:5001&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">changeOrigin</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token literal-property property">pathRewrite</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&#39;^/api2&#39;</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问：</p><p><code>http://127.0.0.1:3000/api1/findUsers</code>，会被转发到5001服务的<code>http://127.0.0.1:5001/findUsers</code></p>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","index.html.vue"]]);export{u as default};
