import{_ as p,r as o,o as c,c as i,a as s,b as n,d as t,e}from"./app.4659d0e0.js";const l={},u=e(`<h1 id="swift基础-功能-functions" tabindex="-1"><a class="header-anchor" href="#swift基础-功能-functions" aria-hidden="true">#</a> Swift基础 - 功能(Functions)</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Functions.html</p><p><em>函数</em>是执行特定任务的自包含的代码块。您给函数一个名称来标识它的作用，该名称用于在需要时“调用”该函数以执行其任务。</p><p>Swift的统一函数语法足够灵活，可以表达任何东西，从没有参数名称的简单C型函数到带有每个参数名称和参数标签的复杂Objective-C风格方法。参数可以提供默认值来简化函数调用，并且可以作为输入输出参数传递，这些参数在函数完成执行后修改传递的变量。</p><p>Swift中的每个函数都有一个类型，由函数的参数类型和返回类型组成。您可以像 Swift 中的任何其他类型一样使用此类型，这样可以轻松地将函数作为参数传递给其他函数，并从函数返回函数。函数也可以写入其他函数，以封装嵌套函数范围内的有用功能。</p><h2 id="定义和调用函数" tabindex="-1"><a class="header-anchor" href="#定义和调用函数" aria-hidden="true">#</a> 定义和调用函数</h2><p>当您定义函数时，您可以选择定义函数作为输入的一个或多个命名类型值，称为<em>参数</em>。您还可以选择定义一种值类型，该函数将在完成后作为输出传递回，称为其<em>返回类型</em>。</p><p>每个函数都有一个<em>函数名</em>，该函数名描述了函数执行的任务。要使用函数，您可以“调用”该函数及其名称，并将其传递与函数参数类型匹配的输入值（称为<em>参数</em>）。函数的参数必须始终以与函数参数列表相同的顺序提供。</p><p>以下示例中的函数称为<code>greet(person:)</code>因为它就是这样做的——它以一个人的名字作为输入，并为该人返回问候语。要做到这一点，您定义了一个输入参数——一个名为<code>person</code>的<code>String</code>值——和一个返回类型的<code>String</code>，其中将包含对该人的问候语：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span> <span class="token operator">+</span> person <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
   <span class="token keyword">return</span> greeting
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有这些信息都汇总到函数的定义中，该<em>定义</em>前缀为<code>func</code>关键字。您可以使用<em>返回箭头</em><code>-&gt;</code>（连字符后跟直角括号）指示函数的返回类型，后跟要返回的类型名称。</p><p>定义描述了函数做什么，它希望收到什么，以及它完成后会返回什么。该定义可以轻松地从代码中的其他地方明确调用该函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello, Anna!&quot;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Brian&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello, Brian!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用&#39; greet(person:) &#39;函数的方法是在&#39; person &#39;参数标签后给它传递一个&#39; String &#39;值，例如&#39; greet(person: &quot;Anna&quot;) &#39;。因为函数返回&#39; String &#39;值，所以可以调用&#39; print(_:separator:terminator:) &#39;函数来包装&#39; greet(person:) &#39;，以打印该字符串并查看其返回值，如上所示。</p>`,14),r=s("p",null,"注意",-1),d=s("code",null,"print(_:separator:terminator:)",-1),k={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID166",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID169",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID169",target:"_blank",rel:"noopener noreferrer"},b=e(`<p><code>greet(person:)</code>函数的正文从定义一个名为<code>greeting</code>的新<code>String</code>常量并将其设置为简单的问候消息开始。然后，使用<code>return</code>关键字将此问候语传回函数。在显示<code>returngreeting</code>的代码行中，该函数完成其执行并返回<code>greeting</code>的当前值。</p><p>您可以多次调用<code>greet(person:)</code>函数，输入值不同。上面的示例显示了如果使用<code>&quot;Anna&quot;</code>的输入值和<code>&quot;Brian&quot;</code>的输入值调用会发生什么。该功能在每种情况下都会返回量身定制的问候语。</p><p>为了缩短此函数的主体，您可以将消息创建和返回语句合并为一行：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greetAgain</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello again, &quot;</span></span> <span class="token operator">+</span> person <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetAgain</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello again, Anna!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数参数和返回值" tabindex="-1"><a class="header-anchor" href="#函数参数和返回值" aria-hidden="true">#</a> 函数参数和返回值</h2><p>在Swift中，函数参数和返回值非常灵活。您可以定义任何东西，从具有单个未命名参数的简单实用程序函数到具有表达式参数名称和不同参数选项的复杂函数。</p><h3 id="没有参数的函数" tabindex="-1"><a class="header-anchor" href="#没有参数的函数" aria-hidden="true">#</a> 没有参数的函数</h3><p>定义输入参数不需要函数。这里有一个没有输入参数的函数，每当调用时，它总是返回相同的<code>String</code>消息：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">sayHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数定义仍然需要在函数名称后面加上括号，即使它不接受任何参数。调用函数时，函数名后面还有一对空括号。</p><h3 id="具有多个参数的函数" tabindex="-1"><a class="header-anchor" href="#具有多个参数的函数" aria-hidden="true">#</a> 具有多个参数的函数</h3><p>函数可以有多个输入参数，这些参数写在函数的括号中，用逗号分隔。</p><p>此功能使用一个人的名字以及他们是否已经被问候作为输入，并为该人返回适当的问候语：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> alreadyGreeted<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> alreadyGreeted <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token function">greetAgain</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> person<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> person<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tim&quot;</span></span><span class="token punctuation">,</span> alreadyGreeted<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello again, Tim!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您通过将标记为<code>person</code>的<code>String</code>参数值和在括号中标记为greedGreeted的<code>Bool</code>参数值，用逗号分隔，来调用 <code>greet(person:alreadyGreeted:)</code>函数。请注意，此函数与前面一节中显示的<code>greet(person:)</code>函数不同。虽然这两个函数都有以<code>greet</code>开头的名字，但<code>greet(person:alreadyGreeted:)</code>函数需要两个参数，但<code>greet(person:)</code>函数只需要一个参数。</p><h3 id="没有返回值的函数" tabindex="-1"><a class="header-anchor" href="#没有返回值的函数" aria-hidden="true">#</a> 没有返回值的函数</h3><p>定义返回类型不需要函数。以下是<code>greet(person:)</code>函数的版本，该函数打印自己的<code>String</code>值，而不是返回它：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Dave&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello, Dave!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于它不需要返回值，函数的定义不包括返回箭头（<code>-&gt;</code>）或返回类型。</p><blockquote><p>注意</p><p>严格来说，这个版本的<code>greet(person:)</code>函数仍然返回一个值，即使没有定义返回值。没有定义返回类型的函数返回类型为<code>Void</code>的特殊值。这只是一个空元组，写为<code>()</code></p></blockquote><p>调用函数时，可以忽略其返回值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">printAndCount</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
   <span class="token keyword">return</span> string<span class="token punctuation">.</span>count
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function-definition function">printWithoutCounting</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token function">printAndCount</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> string<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">printAndCount</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// prints &quot;hello, world&quot; and returns a value of 12</span>
<span class="token function">printWithoutCounting</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// prints &quot;hello, world&quot; but doesn&#39;t return a value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个函数<code>printAndCount(string:)</code>打印字符串，然后将其字符计数返回为<code>Int</code>。第二个函数<code>printWithoutCounting(string:)</code>调用第一个函数，但忽略了其返回值。当调用第二个函数时，消息仍然由第一个函数打印，但返回的值不使用。</p><blockquote><p>注意</p><p>返回值可以忽略，但表示将返回值的函数必须始终这样做。具有定义返回类型的函数不允许控件在不返回值的情况下从函数底部掉出来，尝试这样做将导致编译时错误。</p></blockquote><h3 id="具有多个返回值的函数" tabindex="-1"><a class="header-anchor" href="#具有多个返回值的函数" aria-hidden="true">#</a> 具有多个返回值的函数</h3><p>您可以使用元组类型作为函数返回多个值作为复合返回值的一部分的返回类型。</p><p>下面的示例定义了一个名为<code>minMax(array:)</code>的函数，该函数在<code>Int</code>值数组中找到最小和最大的数字：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">minMax</span><span class="token punctuation">(</span>array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>min<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> currentMin <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">var</span> currentMax <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">for</span> value <span class="token keyword">in</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..&lt;</span>array<span class="token punctuation">.</span>count<span class="token punctuation">]</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> value <span class="token operator">&lt;</span> currentMin <span class="token punctuation">{</span>
           currentMin <span class="token operator">=</span> value
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> currentMax <span class="token punctuation">{</span>
           currentMax <span class="token operator">=</span> value
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span>currentMin<span class="token punctuation">,</span> currentMax<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>minMax(array:)</code>函数返回一个包含两个<code>Int</code>值的元组。这些值被标记为<code>min</code>和<code>max</code>，以便在查询函数的返回值时按名称访问。</p><p><code>minMax(array:)</code>函数的主体首先将两个名为<code>currentMin</code>和<code>currentMax</code>的工作变量设置为数组中第一个整数的值。然后，该函数迭代数组中的剩余值，并检查每个值，看看它分别小于或大于<code>currentMin</code>和<code>currentMax</code>的值。最后，总体最小值和最大值作为两个<code>Int</code>值的元组返回。</p><p>由于元组的成员值被命名为函数返回类型的一部分，因此可以使用点语法访问它们，以检索找到的最小值和最大值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> bounds <span class="token operator">=</span> <span class="token function">minMax</span><span class="token punctuation">(</span>array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;min is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">bounds<span class="token punctuation">.</span>min</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> and max is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">bounds<span class="token punctuation">.</span>max</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;min is -6 and max is 109&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，元组的成员不需要在从函数返回元组时命名，因为它们的名称已被指定为函数返回类型的一部分。</p><h4 id="可选的元组退货类型" tabindex="-1"><a class="header-anchor" href="#可选的元组退货类型" aria-hidden="true">#</a> 可选的元组退货类型</h4><p>如果要从函数返回的元组类型有可能对整个元组具有“无值”，则可以使用<em>可选</em>的元组返回类型来反映整个元组可以为<code>nil</code>的事实。您通过在元组类型的结束括号后放置问号来编写可选的元组返回类型，例如<code>(Int,Int)?</code>或者<code>(String,Int,Bool)?</code></p><blockquote><p>注意</p><p>可选元组类型，如<code>(Int,Int)?</code>不同于包含可选类型的元组，如<code>(Int?,Int?)</code>对于可选的元组类型，整个元组是可选的，而不仅仅是元组中的每个单个值。</p></blockquote><p>上面的<code>minMax(array:)</code>函数返回一个包含两个<code>Int</code>值的元组。然而，该功能不会对传递的数组进行任何安全检查。如果<code>array</code>组参数包含空数组，则上面定义的<code>minMax(array:)</code>函数将在尝试访问数<code>array[0]</code>时触发运行时错误。</p><p>要安全地处理空数组，请使用可选的元组返回类型编写<code>minMax(array:)</code>函数，并在数组为空时返回<code>nil</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">minMax</span><span class="token punctuation">(</span>array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>min<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> array<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token nil constant">nil</span> <span class="token punctuation">}</span>
   <span class="token keyword">var</span> currentMin <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">var</span> currentMax <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token keyword">for</span> value <span class="token keyword">in</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..&lt;</span>array<span class="token punctuation">.</span>count<span class="token punctuation">]</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> value <span class="token operator">&lt;</span> currentMin <span class="token punctuation">{</span>
           currentMin <span class="token operator">=</span> value
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> currentMax <span class="token punctuation">{</span>
           currentMax <span class="token operator">=</span> value
        <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span>currentMin<span class="token punctuation">,</span> currentMax<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用可选绑定来检查此版本的<code>minMax(array:)</code>函数是返回实际元组值还是<code>nil</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> <span class="token keyword">let</span> bounds <span class="token operator">=</span> <span class="token function">minMax</span><span class="token punctuation">(</span>array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;min is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">bounds<span class="token punctuation">.</span>min</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> and max is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">bounds<span class="token punctuation">.</span>max</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;min is -6 and max is 109&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="具有隐式返回的函数" tabindex="-1"><a class="header-anchor" href="#具有隐式返回的函数" aria-hidden="true">#</a> 具有隐式返回的函数</h3><p>如果函数的整个主体都是单个表达式，则函数隐式返回该表达式。例如，以下两个函数都有相同的行为：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greeting</span><span class="token punctuation">(</span><span class="token keyword">for</span> person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span> <span class="token operator">+</span> person <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Dave&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello, Dave!&quot;</span>

<span class="token keyword">func</span> <span class="token function-definition function">anotherGreeting</span><span class="token punctuation">(</span><span class="token keyword">for</span> person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span> <span class="token operator">+</span> person <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">anotherGreeting</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Dave&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello, Dave!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>greeting(for:)</code>函数的整个定义是它返回的问候信息，这意味着它可以使用这种较短的形式。<code>anotherGreeting(for:)</code>函数返回相同的问候信息，像使用较长的函数一样使用<code>return</code>关键字。您仅写为一条<code>return</code>行的任何函数都可以省略<code>return</code>。</p>`,45),f={href:"https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID608",target:"_blank",rel:"noopener noreferrer"},g=e(`<blockquote><p>注意</p><p>您写入的隐式返回值的代码需要返回一些值。例如，您不能使用<code>print(13)</code>作为隐式返回值。但是，您可以使用一个永远不会返回 likefatalError<code>fatalError(&quot;Ohno!&quot;)</code>函数作为隐式返回值，因为Swift知道隐式返回不会发生。</p></blockquote><h2 id="函数参数标签和参数名称" tabindex="-1"><a class="header-anchor" href="#函数参数标签和参数名称" aria-hidden="true">#</a> 函数参数标签和参数名称</h2><p>每个函数参数都有一个<em>参数标签</em>和一个<em>参数名称</em>。调用函数时使用参数标签；每个参数都写在函数调用中，前面有参数标签。参数名称用于实现函数。默认情况下，参数使用其参数名称作为参数标签。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>firstParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// In the function body, firstParameterName and secondParameterName</span>
   <span class="token comment">// refer to the argument values for the first and second parameters.</span>
<span class="token punctuation">}</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span>firstParameterName<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有参数都必须有唯一的名称。虽然多个参数可能具有相同的参数标签，但唯一的参数标签有助于使您的代码更具可读性。</p><h3 id="指定参数标签" tabindex="-1"><a class="header-anchor" href="#指定参数标签" aria-hidden="true">#</a> 指定参数标签</h3><p>您在参数名称之前写一个参数标签，用空格分隔：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>argumentLabel parameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// In the function body, parameterName refers to the argument value</span>
   <span class="token comment">// for that parameter.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是<code>greet(person:)</code>功能的变体，该函数采用一个人的名字和家乡，并返回问候语：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> from hometown<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!  Glad you could visit from </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hometown</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Bill&quot;</span></span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cupertino&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Hello Bill!  Glad you could visit from Cupertino.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用参数标签可以允许以表达式、类似句子的方式调用函数，同时仍然提供可读且意图清晰的函数体。</p><h3 id="省略参数标签" tabindex="-1"><a class="header-anchor" href="#省略参数标签" aria-hidden="true">#</a> 省略参数标签</h3><p>如果您不想要参数的参数标签，请为该参数写一个下划线（<code>_</code>），而不是显式参数标签。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> firstParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// In the function body, firstParameterName and secondParameterName</span>
   <span class="token comment">// refer to the argument values for the first and second parameters.</span>
<span class="token punctuation">}</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数有参数标签，则在调用函数时<em>必须</em>标记参数。</p><h3 id="默认参数值" tabindex="-1"><a class="header-anchor" href="#默认参数值" aria-hidden="true">#</a> 默认参数值</h3><p>您可以通过在该参数类型之后为参数分配值来定义函数中任何参数的<em>默认值</em>。如果定义了默认值，您可以在调用函数时省略该参数。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> parameterWithDefault<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// If you omit the second argument when calling this function, then</span>
   <span class="token comment">// the value of parameterWithDefault is 12 inside the function body.</span>
<span class="token punctuation">}</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> parameterWithDefault<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// parameterWithDefault is 6</span>
<span class="token function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// parameterWithDefault is 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将没有默认值的参数放在函数参数列表的开头，放在具有默认值的参数之前。如果没有默认值的参数通常对函数的含义更重要——首先写入它们可以更容易识别正在调用相同的函数，无论是否省略任何默认参数。</p><h3 id="变量参数" tabindex="-1"><a class="header-anchor" href="#变量参数" aria-hidden="true">#</a> 变量参数</h3><p><em>变参数</em>接受指定类型的零个或多个值。您使用变异参数来指定在调用函数时可以传递不同数量的输入值。通过在参数的类型名称后插入三个句号字符（<code>...</code>）来编写变量参数。</p><p>传递给变量参数的值作为适当类型的数组在函数的主体内提供。例如，具有<code>numbers</code>名称和<code>Double...</code>类型的变量参数在函数的主体中作为称为类型<code>[Double]\`\`numbers</code>的常数数组提供。</p><p>以下示例计算了任何长度的数字列表的<em>算术平均值</em>（也称为<em>平均值</em>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">arithmeticMean</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> numbers<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> total<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span>
       total <span class="token operator">+=</span> number
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> total <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">arithmeticMean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">// returns 3.0, which is the arithmetic mean of these five numbers</span>
<span class="token function">arithmeticMean</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8.25</span><span class="token punctuation">,</span> <span class="token number">18.75</span><span class="token punctuation">)</span>
<span class="token comment">// returns 10.0, which is the arithmetic mean of these three numbers</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个函数可以有多个变性参数。变参数之后的第一个参数必须有一个参数标签。参数标签明确了哪些参数传递给变分参数，哪些参数传递给变分参数之后的参数。</p><h3 id="输入输出参数" tabindex="-1"><a class="header-anchor" href="#输入输出参数" aria-hidden="true">#</a> 输入输出参数</h3><p>默认情况下，函数参数是常量。试图从该函数主体内更改函数参数的值会导致编译时错误。这意味着您不能错误地更改参数的值。如果您希望函数修改参数的值，并希望这些更改在函数调用结束后持续存在，请将该参数定义为<em>进出参数</em>。</p>`,27),w=s("code",null,"inout",-1),h=s("em",null,"从",-1),y={href:"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>您只能传递一个变量作为进出参数的参数。您不能传递常量或字面值作为参数，因为常量和文字无法修改。当您将安培数（<code>&amp;</code>）作为参数传递给输入输出参数时，将它直接放在变量名称之前，以指示函数可以修改它。</p><blockquote><p>注意</p><p>进出参数不能有默认值，变分参数不能标记为<code>inout</code>。</p></blockquote><p>这是一个名为<code>swapTwoInts(_:_:)</code>的函数示例，它有两个名为<code>a</code>和<code>b</code>的输入输出整数参数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">swapTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> temporaryA <span class="token operator">=</span> a
   a <span class="token operator">=</span> b
   b <span class="token operator">=</span> temporaryA
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&#39; swaptwints(:😃 &#39;函数只是将&#39; b &#39;的值交换为&#39; a &#39;， &#39; a &#39;的值交换为&#39; b &#39;。函数通过将&#39; a &#39;的值存储在一个名为&#39; temporaryA &#39;的临时常量中，将&#39; b &#39;的值赋给&#39; a &#39;，然后将&#39; temporaryA &#39;赋给&#39; b &#39;来执行交换。</p><p>您可以调用具有<code>Int</code>类型为两个变量的swapTwoInts<code>swapTwoInts(_:_:)</code>函数来交换其值。请注意，<code>someInt</code>和<code>anotherInt</code>的名称前缀为安培，当它们传递给swapTwoInts<code>swapTwoInts(_:_:)</code>函数时：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> someInt <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">var</span> anotherInt <span class="token operator">=</span> <span class="token number">107</span>
<span class="token function">swapTwoInts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>someInt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>anotherInt<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;someInt is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someInt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, and anotherInt is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">anotherInt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;someInt is now 107, and anotherInt is now 3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例表明，<code>someInt</code>和<code>anotherInt</code>的原始值被swapTwoInts<code>swapTwoInts(_:_:)</code>函数修改，即使它们最初是在函数之外定义的。</p><blockquote><p>注意</p><p>输入输出参数与从函数返回值不同。上面的<code>swapTwoInts</code>示例没有定义返回类型或返回值，但它仍然修改了<code>someInt</code>和<code>anotherInt</code>的值。输入输出参数是函数在其函数体范围之外产生效果的另一种方式。</p></blockquote><h2 id="功能类型" tabindex="-1"><a class="header-anchor" href="#功能类型" aria-hidden="true">#</a> 功能类型</h2><p>每个函数都有特定的<em>函数类型</em>，由参数类型和函数的返回类型组成。</p><p>例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">addTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function-definition function">multiplyTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例定义了两个简单的数学函数，称为<code>addTwoInts</code>和<code>multiplyTwoInts</code>。这些函数各接受两个<code>Int</code>值，并返回一个<code>Int</code>值，这是执行适当数学运算的结果。</p><p>这两个函数的类型都是&#39; (Int, Int) -&gt; Int &#39;。这可以理解为:</p><p>“具有两个参数的函数，两个参数都是<code>Int</code>类型，并且返回<code>Int</code>类型的值。”</p><p>以下是另一个例子，对于没有参数或返回值的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数的类型是&#39; ()-&gt; Void &#39;，或者&quot;一个没有参数的函数，返回&#39; Void &#39; &quot;。</p><h3 id="使用功能类型" tabindex="-1"><a class="header-anchor" href="#使用功能类型" aria-hidden="true">#</a> 使用功能类型</h3><p>您使用的功能类型就像 Swift 中的任何其他类型一样。例如，您可以将常量或变量定义为函数类型，并为该变量分配适当的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> mathFunction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token operator">=</span> addTwoInts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这可以理解为：</p><p>“定义一个名为<code>mathFunction</code>的变量，该变量具有一种‘接受两个<code>Int</code>值并返回一个<code>Int</code>值的函数’。将这个新变量设置为引用名为<code>addTwoInts</code>函数。”</p><p><code>addTwoInts(_:_:)</code>函数具有与<code>mathFunction</code>变量相同的类型，因此Swift的类型检查器允许此分配。</p><p>您现在可以调用名为<code>mathFunction</code>的分配函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Result: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">mathFunction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Result: 5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>具有相同匹配类型的不同函数可以分配给相同的变量，就像非函数类型一样：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>mathFunction <span class="token operator">=</span> multiplyTwoInts
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Result: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">mathFunction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Result: 6&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与任何其他类型一样，当您将函数分配给常量或变量时，您可以将其留给Swift来推断函数类型：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> anotherMathFunction <span class="token operator">=</span> addTwoInts
<span class="token comment">// anotherMathFunction is inferred to be of type (Int, Int) -&gt; Int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数类型作为参数类型" tabindex="-1"><a class="header-anchor" href="#函数类型作为参数类型" aria-hidden="true">#</a> 函数类型作为参数类型</h3><p>你可以使用像&#39; (Int, Int) -&gt; Int &#39;这样的函数类型作为另一个函数的形参类型。这使您能够将函数实现的某些方面留给函数的调用者来提供。</p><p>以下是从上面打印数学函数结果的示例：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">printMathResult</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> mathFunction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Result: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">mathFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">printMathResult</span><span class="token punctuation">(</span>addTwoInts<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Result: 8&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子定义了一个名为&#39; printMathResult(::😃 &#39;的函数，它有三个参数。第一个参数叫做&#39; mathFunction &#39;，其类型为&#39; (Int, Int) -&gt; Int &#39;。您可以传递该类型的任何函数作为第一个参数的实参。第二个和第三个形参称为&#39; a &#39;和&#39; b &#39;，都是&#39; Int &#39;类型。它们用作所提供的数学函数的两个输入值。</p><p>当调用<code>printMathResult(_:_:_:)</code>时，它传递了<code>addTwoInts(_:_:)</code>函数以及整数值<code>3</code>和5。它调用值为<code>3</code>和5的函数，并打印8的结果。</p><p><code>printMathResult(_:_:_:)</code>的作用是打印对适当类型的数学函数的调用结果。该函数的实现实际做什么并不重要，重要的是该函数的类型是否正确。这使<code>printMathResult(_:_:_:)</code>能够以类型安全的方式将其部分功能移交给函数的调用者。</p><h3 id="函数类型作为返回类型" tabindex="-1"><a class="header-anchor" href="#函数类型作为返回类型" aria-hidden="true">#</a> 函数类型作为返回类型</h3><p>您可以使用函数类型作为另一个函数的返回类型。您可以通过在返回函数的返回箭头（<code>-&gt;</code>）后立即写入完整的函数类型来做到这一点。</p><p>下一个例子定义了两个简单的函数，分别叫做“stepForward(😃”和“stepBackward(😃”。&#39; stepForward(😃 &#39;函数返回的值比其输入值大1，&#39; stepBackward(😃 &#39;函数返回的值比其输入值小1。两个函数都具有&#39; (Int) -&gt; Int &#39;类型:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">stepForward</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> input <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function-definition function">stepBackward</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> input <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个函数叫做&#39; chooseStepFunction(backward:) &#39;，它的返回类型是&#39; (Int) -&gt; Int &#39;。&#39; chooseStepFunction(backward:) &#39;函数返回&#39; stepForward(😃 &#39;函数或&#39; stepBackward(😃 &#39;函数，该函数基于一个名为&#39; backward &#39;的布尔形参:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> backward <span class="token operator">?</span> stepBackward <span class="token punctuation">:</span> stepForward
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您现在可以使用<code>chooseStepFunction(backward:)</code>获取将向一个或另一个方向前进的函数：</p><ol><li>var currentValue = 3</li><li>let moveNearerToZero = chooseStepFunction(backward: currentValue &gt; 0)</li><li>// moveNearerToZero now refers to the stepBackward() function</li></ol><p>上面的例子决定了将一个名为“currentValue”的变量移动到逐渐接近零的位置时，是需要一个正的步骤还是负的步骤。&#39; currentValue &#39;的初始值为&#39; 3 &#39;，这意味着&#39; currentValue &gt; 0 &#39;返回&#39; true &#39;，导致&#39; chooseStepFunction(backward:) &#39;返回&#39; stepBackward(😃 &#39;函数。对返回函数的引用存储在一个名为“moveNearerToZero”的常量中。</p><p>现在&#39; moveNearerToZero &#39;指向了正确的函数，它可以被用来计数到0:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Counting to zero:&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Counting to zero:</span>
<span class="token keyword">while</span> currentValue <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">currentValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">... &quot;</span></span><span class="token punctuation">)</span>
   currentValue <span class="token operator">=</span> <span class="token function">moveNearerToZero</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zero!&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// 3...</span>
<span class="token comment">// 2...</span>
<span class="token comment">// 1...</span>
<span class="token comment">// zero!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="嵌套函数" tabindex="-1"><a class="header-anchor" href="#嵌套函数" aria-hidden="true">#</a> 嵌套函数</h2><p>到目前为止，您在本章中遇到的所有函数都是<em>全局函数</em>的示例，这些<em>函数</em>是在全局范围内定义的。您还可以定义其他函数主体内的函数，称为<em>嵌套函数</em>。</p><p>默认情况下，嵌套函数对外部世界隐藏，但仍然可以被其封闭函数调用和使用。封闭函数也可以返回其嵌套函数之一，以允许嵌套函数在另一个作用域中使用。</p><p>您可以重写上面的<code>chooseStepFunction(backward:)</code>示例来使用和返回嵌套函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">func</span> <span class="token function-definition function">stepForward</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> input <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
   <span class="token keyword">func</span> <span class="token function-definition function">stepBackward</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> input <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span>
   <span class="token keyword">return</span> backward <span class="token operator">?</span> stepBackward <span class="token punctuation">:</span> stepForward
<span class="token punctuation">}</span>
<span class="token keyword">var</span> currentValue <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>
<span class="token keyword">let</span> moveNearerToZero <span class="token operator">=</span> <span class="token function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> currentValue <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// moveNearerToZero now refers to the nested stepForward() function</span>
<span class="token keyword">while</span> currentValue <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">currentValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">... &quot;</span></span><span class="token punctuation">)</span>
   currentValue <span class="token operator">=</span> <span class="token function">moveNearerToZero</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zero!&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// -4...</span>
<span class="token comment">// -3...</span>
<span class="token comment">// -2...</span>
<span class="token comment">// -1...</span>
<span class="token comment">// zero!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54);function q(x,_){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("blockquote",null,[r,s("p",null,[d,n("函数没有第一个参数的标签，其其他参数是可选的，因为它们具有默认值。下文在"),s("a",k,[n("函数参数标签和参数名称"),t(a)]),n("以及"),s("a",m,[n("默认参数值"),t(a)]),n("中讨论了函数语法"),s("a",v,[n("的"),t(a)]),n("这些变化。")])]),b,s("p",null,[n("正如您在"),s("a",f,[n("速记获取声明"),t(a)]),n("中看到的那样，属性获取者也可以使用隐式返回。")]),g,s("p",null,[n("您可以通过将输入关键字放在参数类型之前来编写"),w,n("输出参数。入出参数有一个值，该值被传递给函数，由函数修改，并"),h,n("函数中传递回来以替换原始值。有关进出参数和相关编译器优化行为的详细讨论，请参阅"),s("a",y,[n("输入输出参数"),t(a)]),n("。")]),I])}const F=p(l,[["render",q],["__file","15.swift-functions.html.vue"]]);export{F as default};
