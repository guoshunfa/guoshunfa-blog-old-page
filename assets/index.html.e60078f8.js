import{_ as e,r as t,o as p,c as o,a as s,b as n,d as c,e as l}from"./app.4659d0e0.js";const i={},r=s("h1",{id:"vuepress框架-问题解答",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vuepress框架-问题解答","aria-hidden":"true"},"#"),n(" Vuepress框架 - 问题解答")],-1),u={id:"_1-正确解决vuepress本地访问出现资源报错404的问题",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#_1-正确解决vuepress本地访问出现资源报错404的问题","aria-hidden":"true"},"#",-1),k={href:"https://blog.csdn.net/zpfz756/article/details/110458257",target:"_blank",rel:"noopener noreferrer"},v=l(`<p><strong>背景</strong></p><p>最近发现好多小伙伴刚用VuePress，然后一build完就直接用本地浏览器访问，结果出现黑块。仅仅出现那种问题还好，给项目安装 vuepress-plugin-serve 插件就行了， 但是如果有需求是需要离线查看 VuePress 生成后的文档呢？所以我特地研究了一下——</p><p><strong>解决办法</strong></p><p>打开 .vuepress/config.js 文件，把 base 的值改成 ./，为了方便调试，最好这样写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//base: &quot;/&quot;,</span>
<span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>写两个，一个用于Dev，一个用于Build。 然后打开项目下的 node_modules@vuepress\\core\\lib\\client 下的 app.js 文件，找到下方这个片段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> routerBase<span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  routes<span class="token punctuation">,</span>
  <span class="token function">scrollBehavior</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> savedPosition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> savedPosition
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>$vuepress<span class="token punctuation">.</span><span class="token function">$get</span><span class="token punctuation">(</span><span class="token string">&#39;disableScrollBehavior&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把 mode: &#39;history&#39;, 注释掉就行了（让它默认为 hash 模式）。</p>`,8);function m(b,h){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,s("h2",u,[d,n(" 1. "),s("a",k,[n("正确解决VuePress本地访问出现资源报错404的问题"),c(a)])]),v])}const _=e(i,[["render",m],["__file","index.html.vue"]]);export{_ as default};
