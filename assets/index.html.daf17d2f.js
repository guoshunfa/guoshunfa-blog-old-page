import{_ as o,r as p,o as c,c as i,a,b as n,d as e,e as t}from"./app.4659d0e0.js";const r={},l=t('<h1 id="乐观锁解决数据库并发修改问题" tabindex="-1"><a class="header-anchor" href="#乐观锁解决数据库并发修改问题" aria-hidden="true">#</a> 乐观锁解决数据库并发修改问题</h1><h2 id="_1-相关信息描述" tabindex="-1"><a class="header-anchor" href="#_1-相关信息描述" aria-hidden="true">#</a> 1. 相关信息描述</h2><h3 id="_1-1-数据库并发场景描述" tabindex="-1"><a class="header-anchor" href="#_1-1-数据库并发场景描述" aria-hidden="true">#</a> 1.1. 数据库并发场景描述</h3><p>表中有一属性，记录着当前记录被查询的次数。每一次查询之后会把处理过程甩给event（观察者模式）。如果一段时间内访问量变大会出现并发问题。并发会导致数据的不准确。</p><h3 id="_1-2-什么是乐观锁" tabindex="-1"><a class="header-anchor" href="#_1-2-什么是乐观锁" aria-hidden="true">#</a> 1.2. 什么是乐观锁</h3>',5),d={href:"https://baike.baidu.com/item/%E6%82%B2%E8%A7%82%E9%94%81",target:"_blank",rel:"noopener noreferrer"},u={href:"https://baike.baidu.com/item/%E4%BA%8B%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h2><h3 id="_2-1-场景描述" tabindex="-1"><a class="header-anchor" href="#_2-1-场景描述" aria-hidden="true">#</a> 2.1. 场景描述</h3><p>SpringBoot + Mysql</p><h3 id="_2-2-数据库表调整" tabindex="-1"><a class="header-anchor" href="#_2-2-数据库表调整" aria-hidden="true">#</a> 2.2. 数据库表调整</h3><p>加入属性version，用来做乐观锁验证。</p><h3 id="_2-3-sql调整" tabindex="-1"><a class="header-anchor" href="#_2-3-sql调整" aria-hidden="true">#</a> 2.3. sql调整</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> test_user <span class="token keyword">set</span> age<span class="token operator">=</span>age<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>version<span class="token operator">=</span>version<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id} and version=#{version};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-4-服务层逻辑加入乐观锁" tabindex="-1"><a class="header-anchor" href="#_2-4-服务层逻辑加入乐观锁" aria-hidden="true">#</a> 2.4. 服务层逻辑加入乐观锁</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userAgeAddOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TestUser</span> testUser <span class="token operator">=</span> userTestMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> userTestMapper<span class="token punctuation">.</span><span class="token function">userAgeAddOne</span><span class="token punctuation">(</span>testUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> testUser<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">userAgeAddOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function h(v,_){const s=p("ExternalLinkIcon");return c(),i("div",null,[l,a("blockquote",null,[a("p",null,[n("乐观锁（ Optimistic Locking ） 相对"),a("a",d,[n("悲观锁"),e(s)]),n("而言，乐观锁机制采取了更加宽松的加锁机制。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长"),a("a",u,[n("事务"),e(s)]),n("而言，这样的开销往往无法承受。而乐观锁机制在一定程度上解决了这个问题。乐观锁，大多是基于数据版本（ Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来实现。读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据版本号等于数据库表当前版本号，则予以更新，否则认为是过期数据。")])]),k])}const b=o(r,[["render",h],["__file","index.html.vue"]]);export{b as default};
