import{_ as o,r as i,o as c,c as p,a as n,b as s,d as e,e as t}from"./app.4659d0e0.js";const l="/assets/202204050850070.95a969d4.png",d="/assets/202204050919792.f1b625cc.png",r="/assets/202204050928055.0fd3c3cf.png",u="/assets/202204050929164.4d50179c.png",k="/assets/202204050930927.364bc917.png",m={},v=t('<h1 id="swift基础-字符串和字符" tabindex="-1"><a class="header-anchor" href="#swift基础-字符串和字符" aria-hidden="true">#</a> Swift基础 - 字符串和字符</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html</p><p><em>字符串</em>是一系列角色，如<code>&quot;hello,world&quot;</code>或<code>&quot;albatross&quot;</code>Swift字符串由<code>String</code>类型表示。<code>String</code>的内容可以通过各种方式访问，包括作为<code>Character</code>值的集合。</p><p>Swift的<code>String</code>和<code>Character</code>类型提供了一种快速、符合Unicode的方式来处理代码中的文本。字符串创建和操作的语法轻巧且可读，字符串文字语法与C相似。字符串串联就像将两个字符串与<code>+</code>运算符组合在一起一样简单，字符串的可变性通过在常量或变量之间进行选择来管理，就像Swift中的任何其他值一样。您还可以使用字符串将常量、变量、文字和表达式插入较长的字符串中，该过程称为字符串插值。这样可以轻松创建用于显示、存储和打印的自定义字符串值。</p><p>尽管语法简单，但Swift的<code>String</code>类型是一个快速、现代的字符串实现。每个字符串都由独立于编码的Unicode字符组成，并支持在各种Unicode表示中访问这些字符。</p>',5),g=t("<p>注意</p><p>Swift的<code>String</code>类型与Foundation的<code>NSString</code>类桥接。Foundation还扩展了<code>String</code>，以公开<code>NSString</code>定义的方法。这意味着，如果您导入Foundation，您可以在<code>String</code>上访问这些<code>NSString</code>方法，而无需铸造。</p>",2),b=n("code",null,"String",-1),h={href:"https://developer.apple.com/documentation/swift/string#2919514",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="弦文学" tabindex="-1"><a class="header-anchor" href="#弦文学" aria-hidden="true">#</a> 弦文学</h2><p>您可以在代码中包含预定义的<code>String</code>值作为<em>字符串文字</em>。字符串文字是用双引号包围的字符序列（“）。</p><p>使用字符串文字作为常量或变量的初始值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> someString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Some string literal value&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，Swift推断出<code>someString</code>常量的<code>String</code>类型，因为它是用字符串字面值初始化的。</p><h3 id="多行字符串文字" tabindex="-1"><a class="header-anchor" href="#多行字符串文字" aria-hidden="true">#</a> 多行字符串文字</h3><p>如果您需要一个跨越几行的字符串，请使用多行字符串文字——一个由三个双引号包围的字符序列：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> quotation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
The White Rabbit put on his spectacles.  &quot;Where shall I begin,
please your Majesty?&quot; he asked.

&quot;Begin at the beginning,&quot; the King said gravely, &quot;and go on
till you come to the end; then stop.&quot;
&quot;&quot;&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行字符串文字包括其开头和结尾引号之间的所有行。字符串在开头引号（“”）后的第一行开始，在结束引号之前的一行结束，这意味着下面的字符串都没有以换行符开头或结束：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> singleLineString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;These are the same.&quot;</span></span>
<span class="token keyword">let</span> multilineString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
These are the same.
&quot;&quot;&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您的源代码在多行字符串文字中包含换行符时，该换行符也会出现在字符串的值中。如果您想使用换行符使源代码更容易阅读，但不希望换行符成为字符串值的一部分，请在这些行末尾写一个反斜杠（<code>\\</code>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> softWrappedQuotation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
The White Rabbit put on his spectacles.  &quot;Where shall I begin, </span><span class="token punctuation">\\</span><span class="token string">
please your Majesty?&quot; he asked.

&quot;Begin at the beginning,&quot; the King said gravely, &quot;and go on </span><span class="token punctuation">\\</span><span class="token string">
till you come to the end; then stop.&quot;
&quot;&quot;&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要制作以行提要开头或结尾的多行字符串文字，请写一行作为第一行或最后一行。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> lineBreaks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;

This string starts with a line break.
It also ends with a line break.

&quot;&quot;&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以缩进多行字符串以匹配周围的代码。结尾引号（“”）前的空格告诉Swift在所有其他行之前要忽略哪个空格。但是，如果您在行的开头写空格，除了结束引号之前的内容外，则该空格<em>也</em>包括在内。</p><p><img src="`+l+'" alt="../_images/multilineStringWhitespace_2x.png"></p><p>在上面的示例中，即使整个多行字符串文字缩进，字符串中的第一行和最后一行也不会以任何空格开头。中间线的缩进比结束引号更多，所以它从额外的四空格缩进开始。</p><h3 id="文字中的特殊字符" tabindex="-1"><a class="header-anchor" href="#文字中的特殊字符" aria-hidden="true">#</a> 文字中的特殊字符</h3><p>字符串文字可以包括以下特殊字符：</p>',19),q=t("<li>转义的特殊字符<code>\\0</code>（空字符）、<code>\\\\</code>（反斜杠）、<code>\\t</code>（水平选项卡）、<code>\\n</code>（行馈送）、<code>\\r</code>（回车）、<code>\\&quot;</code>（双引号）和<code>\\&#39;</code>（单引号）</li>",1),w=n("code",null,"\\u{",-1),S=n("em",null,"n",-1),_=n("code",null,"}",-1),x=n("em",null,"n",-1),U={href:"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID293",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>下面的代码显示了这些特殊字符的四个示例。<code>wiseWords</code>常数包含两个转义的双引号。<code>dollarSign</code>、<code>blackHeart</code>和<code>sparklingHeart</code>常量演示了Unicode标量格式：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> wiseWords <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\&quot;Imagination is more important than knowledge\\&quot; - Einstein&quot;</span></span>
<span class="token comment">// &quot;Imagination is more important than knowledge&quot; - Einstein</span>
<span class="token keyword">let</span> dollarSign <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{24}&quot;</span></span>        <span class="token comment">// $,  Unicode scalar U+0024</span>
<span class="token keyword">let</span> blackHeart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{2665}&quot;</span></span>      <span class="token comment">// ♥,  Unicode scalar U+2665</span>
<span class="token keyword">let</span> sparklingHeart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{1F496}&quot;</span></span> <span class="token comment">// 💖, Unicode scalar U+1F496</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于多行字符串文字使用三个双引号，而不仅仅是一个，因此您可以在多行字符串文字中包含一个双引号（”）而不逃避它。要在多行字符串中包含文本<code>&quot;&quot;&quot;</code>请至少转义一个引号。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> threeDoubleQuotationMarks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
Escaping the first quotation mark \\&quot;&quot;&quot;
Escaping all three quotation marks \\&quot;\\&quot;\\&quot;
&quot;&quot;&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展字符串分隔符" tabindex="-1"><a class="header-anchor" href="#扩展字符串分隔符" aria-hidden="true">#</a> 扩展字符串分隔符</h3><p>你可以在<em>扩展分隔符</em>中放置一个字符串字面值，以包含字符串中的特殊字符而不调用它们的效果。将字符串放在引号( <code>&quot;</code> )内，然后用数字符号( <code>#</code> )包围它。例如，打印字符串字面量 <code>#&quot;Line 1\\nLine 2&quot;#</code> 将打印换行转义序列( <code>\\n</code> )，而不是跨两行打印字符串。</p><p>如果您需要字符串字面量中的字符的特殊效果，请匹配转义字符(\\ &#39;)之后字符串中的数字符号的数量。例如，如果你的字符串是#&quot;Line 1\\nLine 2&quot;# &#39;，而你想要换行，你可以使用#&quot;Line 1#nLine 2&quot;# &#39;代替。类似地，“###”Line1###nLine2“###”也会断行。</p><p>使用扩展分隔符创建的字符串文字也可以是多行字符串文字。您可以使用扩展分隔符将文本<code>&quot;&quot;&quot;</code>包含在多行字符串中，覆盖结束文字的默认行为。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> threeMoreDoubleQuotationMarks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">#&quot;&quot;&quot;
Here are three more double quotes: &quot;&quot;&quot;
&quot;&quot;&quot;#</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化空字符串" tabindex="-1"><a class="header-anchor" href="#初始化空字符串" aria-hidden="true">#</a> 初始化空字符串</h2><p>要创建一个空<code>String</code>值作为构建较长字符串的起点，请为变量分配空字符串文字，或使用初始化器语法初始化新的<code>String</code>实例：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> emptyString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span>               <span class="token comment">// empty string literal</span>
<span class="token keyword">var</span> anotherEmptyString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// initializer syntax</span>
<span class="token comment">// these two strings are both empty, and are equivalent to each other</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过检查isEmpty &#39;属性来确定String &#39;值是否为空:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">if</span> emptyString<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Nothing to see here&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Nothing to see here&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串可变性" tabindex="-1"><a class="header-anchor" href="#字符串可变性" aria-hidden="true">#</a> 字符串可变性</h3><p>您指示是否可以通过将特定<code>String</code>分配给变量（在这种情况下可以修改）或常量（在这种情况下无法修改）来修改（或<em>突变</em>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> variableString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Horse&quot;</span></span>
variableString <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; and carriage&quot;</span></span>
<span class="token comment">// variableString is now &quot;Horse and carriage&quot;</span>

<span class="token keyword">let</span> constantString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Highlander&quot;</span></span>
constantString <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; and another Highlander&quot;</span></span>
<span class="token comment">// this reports a compile-time error - a constant string cannot be modified</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>这种方法不同于Objective-C和Cocoa中的字符串突变，在这两个类（<code>NSString</code>和<code>NSMutableString</code>）之间进行选择，以指示字符串是否可以突变。</p></blockquote><h2 id="字符串是值类型" tabindex="-1"><a class="header-anchor" href="#字符串是值类型" aria-hidden="true">#</a> 字符串是值类型</h2>`,19),y=n("code",null,"String",-1),A=n("em",null,"值类型",-1),T=n("code",null,"String",-1),I=n("code",null,"String",-1),E=n("em",null,"复制",-1),L=n("code",null,"String",-1),F={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88",target:"_blank",rel:"noopener noreferrer"},D={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>Swift的默认复制<code>String</code>行为确保当函数或方法向您传递<code>String</code>值时，很明显，无论它来自哪里，您都拥有该确切的<code>String</code>值。您可以放心，除非您自己修改，否则传递的字符串不会被修改。</p><p>在幕后，Swift的编译器优化了字符串使用，因此只有在绝对必要的情况下才能进行实际复制。这意味着在将字符串作为值类型使用时，您总是会获得出色的性能。</p><h2 id="与角色合作" tabindex="-1"><a class="header-anchor" href="#与角色合作" aria-hidden="true">#</a> 与角色合作</h2><p>您可以通过使用<code>for</code>-<code>in</code>循环迭代字符串来访问<code>String</code>的单个<code>Character</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> character <span class="token keyword">in</span> <span class="token string-literal"><span class="token string">&quot;Dog!🐶&quot;</span></span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// D</span>
<span class="token comment">// o</span>
<span class="token comment">// g</span>
<span class="token comment">// !</span>
<span class="token comment">// 🐶</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),O=n("code",null,"for",-1),M=n("code",null,"in",-1),P={href:"https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID121",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>或者，您可以通过提供<code>Character</code>类型注释从单个字符字符串文字中创建独立的<code>Character</code>常量或变量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> exclamationMark<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>String</code>可以通过将<code>Character</code>值数组作为参数传递给其初始化器来构建值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> catCharacters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Character</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;t&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;🐱&quot;</span></span><span class="token punctuation">]</span>
<span class="token keyword">let</span> catString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>catCharacters<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>catString<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Cat!🐱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="串联字符串和字符" tabindex="-1"><a class="header-anchor" href="#串联字符串和字符" aria-hidden="true">#</a> 串联字符串和字符</h2><p><code>String</code>值可以与加法运算符（<code>+</code>）一起添加（或<em>串联</em>），以创建新的<code>String</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span>
<span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot; there&quot;</span></span>
<span class="token keyword">var</span> welcome <span class="token operator">=</span> string1 <span class="token operator">+</span> string2
<span class="token comment">// welcome now equals &quot;hello there&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用加法赋值运算符（<code>+=</code>) <code>String</code>值附加到现有的<code>String</code>变量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> instruction <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;look over&quot;</span></span>
instruction <span class="token operator">+=</span> string2
<span class="token comment">// instruction now equals &quot;look over there&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用<code>String</code>类型的<code>append()</code>方法将<code>Character</code>值附加到<code>String</code>变量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> exclamationMark<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span>
welcome<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>exclamationMark<span class="token punctuation">)</span>
<span class="token comment">// welcome now equals &quot;hello there!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>您无法将<code>String</code>或<code>Character</code>附加到现有<code>Character</code>变量，因为<code>Character</code>值必须仅包含单个字符。</p></blockquote><p>如果您使用多行字符串文字来构建较长字符串的行，则希望字符串中的每行都以换行符结束，包括最后一行。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> badStart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
one
two
&quot;&quot;&quot;</span></span>
<span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
three
&quot;&quot;&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>badStart <span class="token operator">+</span> end<span class="token punctuation">)</span>
<span class="token comment">// Prints two lines:</span>
<span class="token comment">// one</span>
<span class="token comment">// twothree</span>

<span class="token keyword">let</span> goodStart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;
one
two

&quot;&quot;&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>goodStart <span class="token operator">+</span> end<span class="token punctuation">)</span>
<span class="token comment">// Prints three lines:</span>
<span class="token comment">// one</span>
<span class="token comment">// two</span>
<span class="token comment">// three</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，将<code>badStart</code>与<code>end</code>连接会产生一个两行字符串，这不是所需的结果。由于<code>badStart</code>的最后一行不会以换行符结束，因此该行与第一行<code>end</code>相结合。相比之下，两条<code>goodStart</code>线都以换行符结束，因此当它与<code>end</code>相结合时，结果有三条线，正如预期的那样。</p><h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h2><p><em>字符串插值</em>是一种通过将常量、变量、文字和表达式的值包含在字符串文字中来构建新<code>String</code>值的方法。您可以在单行和多行字符串文字中使用字符串插值。您插入字符串文字的每个项目都包裹在一对括号中，前缀为反斜杠（<code>\\</code>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> multiplier <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">multiplier</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times 2.5 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Double</span><span class="token punctuation">(</span>multiplier<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.5</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>
<span class="token comment">// message is &quot;3 times 2.5 is 7.5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>multiplier</code>的值被插入字符串文字为<code>\\(multiplier)</code>当计算字符串插值以创建实际字符串时，此占位符将被<code>multiplier</code>的实际值取代。</p><p><code>multiplier</code> 的值也是字符串后面更大的表达式的一部分。这个表达式计算 <code>Double(multiplier) * 2.5</code> 的值，并将结果( <code>7.5</code> )插入到字符串中。在本例中，当表达式包含在字符串字面值中时，它被写成<code>\\(Double(multiplier) * 2.5)</code> 。</p><p>您可以使用扩展字符串分隔符创建包含字符的字符串，否则这些字符将被视为字符串插值。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">#&quot;Write an interpolated string in Swift using \\(multiplier).&quot;#</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Write an interpolated string in Swift using \\(multiplier).&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要在使用扩展分隔符的字符串中使用字符串插值，请将反斜杠后的数字符号数量与字符串开头和结尾的数字符号数量匹配。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">#&quot;6 times 7 is </span><span class="token interpolation-punctuation punctuation">\\#(</span><span class="token interpolation"><span class="token number">6</span> <span class="token operator">*</span> <span class="token number">7</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;#</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;6 times 7 is 42.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>您在插值字符串括号内写的表达式不能包含未转义反斜杠（<code>\\</code>）、回车或行馈送。然而，它们可以包含其他字符串文字。</p></blockquote><h2 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode" aria-hidden="true">#</a> Unicode</h2><p><em>Unicode</em>是在不同书写系统中编码、表示和处理文本的国际标准。它使您能够以标准化的形式表示来自任何语言的几乎任何字符，并从外部来源（如文本文件或网页）读取和写入这些字符。如本节所述，Swift的<code>String</code>和<code>Character</code>类型完全符合Unicode。</p><h3 id="unicode标量值" tabindex="-1"><a class="header-anchor" href="#unicode标量值" aria-hidden="true">#</a> Unicode标量值</h3><p>在幕后，Swift的原生 <code>String</code> 类型是由<em>Unicode标量值</em>构建的。Unicode标量值是字符或修饰符的唯一21位数字，例如&#39; <code>U+0061</code> 表示&#39;拉丁小写字母A ( &quot; A &quot;)，或 <code>U+1F425</code> 表示正面的<code>BABY CHICK</code> ( &quot;🐥&quot;)。</p><p>请注意，并非所有21位Unicode标量值都分配给一个字符——一些标量保留用于未来的分配或用于UTF-16编码。分配给字符的标量值通常也有一个名称，例如上面示例中的<code>LATINSMALLLETTERA</code>和<code>FRONT-FACINGBABY</code>。</p><h3 id="扩展的语法集群" tabindex="-1"><a class="header-anchor" href="#扩展的语法集群" aria-hidden="true">#</a> 扩展的语法集群</h3><p>Swift<code>Character</code>类型的每个实例都代表一个<em>扩展的字素集群</em>。扩展字素集群是一个或多个Unicode标量的序列，（当组合时）产生单个人类可读字符。</p><p>这是一个例子。字母 <code>é</code> 可以表示为单个Unicode标量 <code>é</code> ( <code>拉丁小写字母E WITH ACUTE</code> ，或&#39; <code>U+00E9</code> &#39;)。然而，同样的字母也可以表示为一对标量——一个标准字母 <code>e</code> (<code>拉丁小写字母e</code> ，或&#39; <code>U+0065</code> &#39;)，后面跟着一个<code>组合急性重音</code>标量( <code>U+0301</code> )。 <code>combined ACUTE ACCENT</code> 标量图形化地应用于它前面的标量，当一个支持unicode的文本呈现系统呈现一个 <code>e</code> 时，它就会变成一个&#39; <code>é</code> &#39;。</p><p>在这两种情况下，字母<code>é</code>都表示为单个Swift<code>Character</code>值，表示扩展的字素集群。在第一种情况下，集群包含单个标量；在第二种情况下，它是一个由两个标量组成的集群：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> eAcute<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{E9}&quot;</span></span>                         <span class="token comment">// é</span>
<span class="token keyword">let</span> combinedEAcute<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{65}\\u{301}&quot;</span></span>          <span class="token comment">// e followed by ́</span>
<span class="token comment">// eAcute is é, combinedEAcute is é</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展字素集群是一种灵活的方式，可以将许多复杂的脚本字符表示为单个<code>Character</code>值。例如，韩语字母的韩语音节可以表示为预写或分解序列。这两种表示形式都符合 Swift 中的单个<code>Character</code>值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> precomposed<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{D55C}&quot;</span></span>                  <span class="token comment">// 한</span>
<span class="token keyword">let</span> decomposed<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{1112}\\u{1161}\\u{11AB}&quot;</span></span>   <span class="token comment">// ᄒ, ᅡ, ᆫ</span>
<span class="token comment">// precomposed is 한, decomposed is 한</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展的字素集群使用于封闭标记的标量（如<code>COMBININGENCLOSINGCIRCLE</code>或<code>U+20DD</code>）能够将其他Unicode标量作为单个<code>Character</code>值的一部分包围：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> enclosedEAcute<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{E9}\\u{20DD}&quot;</span></span>
<span class="token comment">// enclosedEAcute is é⃝</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>区域指标符号的Unicode标量可以成对组合，形成单个<code>Character</code>值，例如<code>REGIONALINDICATORSYMBOLLETTERU</code>（<code>U+1F1FA</code>）<code>REGIONALINDICATORSYMBOLLETTERS</code>（<code>U+1F1F8</code>的组合：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> regionalIndicatorForUS<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{1F1FA}\\u{1F1F8}&quot;</span></span>
<span class="token comment">// regionalIndicatorForUS is 🇺🇸</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计数字符" tabindex="-1"><a class="header-anchor" href="#计数字符" aria-hidden="true">#</a> 计数字符</h2><p>要检索字符串中<code>Character</code>值的计数，请使用字符串的<code>count</code>属性：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> unusualMenagerie <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;unusualMenagerie has </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">unusualMenagerie<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> characters&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;unusualMenagerie has 40 characters&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，Swift对<code>Character</code>值使用扩展字素簇意味着字符串串联和修改可能并不总是影响字符串的字符数。</p><p>例如，如果您使用四个字符的单词<code>cafe</code>初始化新字符串，然后在字符串末尾附加<code>COMBININGACUTEACCENT</code>（<code>U+0301</code>），则生成的字符串仍将有4个字符数，第四个字符为é，而不是<code>e</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> word <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;cafe&quot;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;the number of characters in </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">word</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">word<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;the number of characters in cafe is 4&quot;</span>

word <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot;\\u{301}&quot;</span></span>    <span class="token comment">// COMBINING ACUTE ACCENT, U+0301</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;the number of characters in </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">word</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">word<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;the number of characters in café is 4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>扩展的字素集群可以由多个Unicode标量组成。这意味着不同的字符——以及同一字符的不同表示形式——可能需要不同数量的内存来存储。因此，Swift中的字符在字符串表示中不会各自占用相同数量的内存。因此，如果不迭代字符串以确定其扩展的字素集群边界，就无法计算字符串中的字符数。如果您正在处理特别长的字符串值，请注意<code>count</code>属性必须迭代整个字符串中的Unicode标量，以确定该字符串的字符。</p><p><code>count</code>属性返回的字符计数并不总是与包含相同字符的<code>NSString</code>的<code>length</code>属性相同。<code>NSString</code>的长度基于字符串UTF-16表示中的16位代码单元数量，而不是字符串中Unicode扩展字素集群的数量。</p></blockquote><h2 id="访问和修改字符串" tabindex="-1"><a class="header-anchor" href="#访问和修改字符串" aria-hidden="true">#</a> 访问和修改字符串</h2><p>您可以通过字符串的方法和属性或使用下标语法访问和修改字符串。</p><h3 id="字符串索引" tabindex="-1"><a class="header-anchor" href="#字符串索引" aria-hidden="true">#</a> 字符串索引</h3><p>每个<code>String</code>值都有一个关联的<em>索引类型</em><code>String.Index</code>，对应于字符串中每个<code>Character</code>的位置。</p><p>如上所述，不同的字符可能需要不同数量的内存来存储，因此为了确定哪个<code>Character</code>位于特定位置，您必须从该<code>String</code>的开头或结尾迭代每个Unicode标量。因此，Swift字符串无法按整数值进行索引。</p><p>使用<code>startIndex</code>属性访问<code>String</code>的第一个<code>Character</code>的位置。TheendIndex属性是<code>String</code>中最后一个字符后的位置。因此，<code>endIndex</code>属性不是字符串下标的有效参数。如果<code>String</code>为空，<code>startIndex</code>和<code>endIndex</code>是相等的。</p><p>您可以使用<code>String</code>的<code>index(before:)</code>和<code>index(after:)</code>方法访问给定索引之前和之后的索引。要访问离给定索引更远的索引，您可以使用<code>index(_:offsetBy:)</code>方法，而不是多次调用这些方法之一。</p><p>您可以使用下标语法访问特定<code>String</code>索引的<code>Character</code>。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Guten Tag!&quot;</span></span>
greeting<span class="token punctuation">[</span>greeting<span class="token punctuation">.</span>startIndex<span class="token punctuation">]</span>
<span class="token comment">// G</span>
greeting<span class="token punctuation">[</span>greeting<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> greeting<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// !</span>
greeting<span class="token punctuation">[</span>greeting<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>after<span class="token punctuation">:</span> greeting<span class="token punctuation">.</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">// u</span>
<span class="token keyword">let</span> index <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span>
greeting<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
<span class="token comment">// a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试访问字符串范围之外的索引或字符串范围之外的索引中的<code>Character</code>将触发运行时错误。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>greeting<span class="token punctuation">[</span>greeting<span class="token punctuation">.</span>endIndex<span class="token punctuation">]</span> <span class="token comment">// Error</span>
greeting<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>after<span class="token punctuation">:</span> greeting<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>indices</code>属性访问字符串中单个字符的所有索引。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> index <span class="token keyword">in</span> greeting<span class="token punctuation">.</span>indices <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">greeting<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> &quot;</span></span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;G u t e n   T a g ! &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>您可以在符合<code>Collection</code>协议的任何类型上使用<code>startIndex</code>和<code>endIndex</code>属性以及<code>index(before:)</code> <code>index(after:)</code>和<code>index(_:offsetBy:)</code>方法。这包括<code>String</code>，如图所示，以及集合类型，如数<code>Array</code>、<code>Dictionary</code>和<code>Set</code>。</p></blockquote><h3 id="插入和移除" tabindex="-1"><a class="header-anchor" href="#插入和移除" aria-hidden="true">#</a> 插入和移除</h3><p>要在指定索引处将单个字符插入字符串，请使用<code>insert(_:at:)</code>方法，要在指定索引处插入另一个字符串的内容，请使用<code>insert(contentsOf:at:)</code>方法。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> welcome <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hello&quot;</span></span>
welcome<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;!&quot;</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> welcome<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span>
<span class="token comment">// welcome now equals &quot;hello!&quot;</span>

welcome<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot; there&quot;</span></span><span class="token punctuation">,</span> at<span class="token punctuation">:</span> welcome<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> welcome<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// welcome now equals &quot;hello there!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在指定索引处从字符串中删除单个字符，请使用<code>remove(at:)</code>方法，要删除指定范围内的子字符串，请使用<code>removeSubrange(_:)</code>方法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>welcome<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> welcome<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>before<span class="token punctuation">:</span> welcome<span class="token punctuation">.</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// welcome now equals &quot;hello there&quot;</span>

<span class="token keyword">let</span> range <span class="token operator">=</span> welcome<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>welcome<span class="token punctuation">.</span>endIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">..&lt;</span>welcome<span class="token punctuation">.</span>endIndex
welcome<span class="token punctuation">.</span><span class="token function">removeSubrange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span>
<span class="token comment">// welcome now equals &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>你可以使用&#39; insert(:at:) &#39;， &#39; insert(contentsOf:at:) &#39;， &#39; remove(at:) &#39;和&#39; removeSubrange(😃 &#39;方法来处理任何符合&#39; RangeReplaceableCollection &#39;协议的类型。这包括如下所示的&#39; String &#39;，以及&#39; Array &#39;、&#39; Dictionary &#39;和&#39; Set &#39;等集合类型。</p></blockquote><h2 id="子字符串" tabindex="-1"><a class="header-anchor" href="#子字符串" aria-hidden="true">#</a> 子字符串</h2>`,69),G=n("code",null,"prefix(_:)",-1),R={href:"https://developer.apple.com/documentation/swift/substring",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"Substring",-1),W=n("code",null,"String",-1),V=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span>
<span class="token keyword">let</span> index <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;,&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">??</span> greeting<span class="token punctuation">.</span>endIndex
<span class="token keyword">let</span> beginning <span class="token operator">=</span> greeting<span class="token punctuation">[</span><span class="token operator">..&lt;</span>index<span class="token punctuation">]</span>
<span class="token comment">// beginning is &quot;Hello&quot;</span>

<span class="token comment">// Convert the result to a String for long-term storage.</span>
<span class="token keyword">let</span> newString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>beginning<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与字符串一样，每个子字符串都有一个内存区域，其中存储了构成子字符串的字符。字符串和子字符串的区别在于，作为性能优化，子字符串可以重用用于存储原始字符串的部分内存，或用于存储另一个子字符串的部分内存。（字符串具有类似的优化，但如果两个字符串共享内存，它们是相等的。）这种性能优化意味着，在您修改字符串或子字符串之前，您不必支付复制内存的性能成本。如上所述，子字符串不适合长期存储——因为它们重用原始字符串的存储，只要使用其任何子字符串，整个原始字符串都必须保存在内存中。</p><p>在上面的示例中，<code>greeting</code>是一个字符串，这意味着它有一个内存区域，其中存储了构成字符串的字符。因为<code>beginning</code>是<code>greeting</code>的子字符串，所以它重用<code>greeting</code>使用的记忆。相比之下，<code>newString</code>是一个字符串——当它从子字符串创建时，它有自己的存储空间。下图显示了这些关系：</p><p><img src="`+d+'" alt="../_images/stringSubstring_2x.png"></p>',4),Q=n("p",null,"注意",-1),K=n("code",null,"String",-1),z=n("code",null,"Substring",-1),Y={href:"https://developer.apple.com/documentation/swift/stringprotocol",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"StringProtocol",-1),j=n("code",null,"StringProtocol",-1),X=n("code",null,"String",-1),$=n("code",null,"Substring",-1),Z=n("h2",{id:"比较字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#比较字符串","aria-hidden":"true"},"#"),s(" 比较字符串")],-1),nn=n("p",null,"Swift提供了三种比较文本值的方法：字符串和字符平等、前缀平等和后缀平等。",-1),sn=n("h3",{id:"弦乐和性格平等",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#弦乐和性格平等","aria-hidden":"true"},"#"),s(" 弦乐和性格平等")],-1),an=n("code",null,"==",-1),en=n("code",null,"!=",-1),tn={href:"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID70",target:"_blank",rel:"noopener noreferrer"},on=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> quotation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;We&#39;re a lot alike, you and I.&quot;</span></span>
<span class="token keyword">let</span> sameQuotation <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;We&#39;re a lot alike, you and I.&quot;</span></span>
<span class="token keyword">if</span> quotation <span class="token operator">==</span> sameQuotation <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;These two strings are considered equal&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;These two strings are considered equal&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果扩展的字素簇在<em>正典上等价，则</em>两个<code>String</code>值（或两个<code>Character</code>值）被认为是相等的。如果扩展的字素簇具有相同的语言意义和外观，即使它们是由幕后不同的Unicode标量组成的，它们在规范上也是等价的。</p><p>例如，<code>拉丁小写字母E加急音(U+00E9)</code> 在规范上等同于<code>拉丁小写字母E</code>(<code>U+0065</code>)后面跟着<code>组合急音</code>(<code>U+0301</code>)。这两个扩展的字素集群都是表示字符 <code>é</code> 的有效方法，因此它们被认为是规范等价的:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// &quot;Voulez-vous un café?&quot; using LATIN SMALL LETTER E WITH ACUTE</span>
<span class="token keyword">let</span> eAcuteQuestion <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Voulez-vous un caf\\u{E9}?&quot;</span></span>

<span class="token comment">// &quot;Voulez-vous un café?&quot; using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT</span>
<span class="token keyword">let</span> combinedEAcuteQuestion <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Voulez-vous un caf\\u{65}\\u{301}?&quot;</span></span>

<span class="token keyword">if</span> eAcuteQuestion <span class="token operator">==</span> combinedEAcuteQuestion <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;These two strings are considered equal&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;These two strings are considered equal&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相反，英语中使用的<code>LATINCAPITALLETTERA</code>（<code>U+0041</code>或<code>&quot;A&quot;</code><em>不</em>等同于俄语中使用的<code>CYRILLICLETTERA</code>（<code>U+0410</code>或<code>&quot;А&quot;</code>。这些角色在视觉上相似，但没有相同的语言含义：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> latinCapitalLetterA<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{41}&quot;</span></span>

<span class="token keyword">let</span> cyrillicCapitalLetterA<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;\\u{0410}&quot;</span></span>

<span class="token keyword">if</span> latinCapitalLetterA <span class="token operator">!=</span> cyrillicCapitalLetterA <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;These two characters aren&#39;t equivalent.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;These two characters aren&#39;t equivalent.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>Swift 中的字符串和字符比较不区分区域设置。</p></blockquote><h3 id="前缀和后缀平等" tabindex="-1"><a class="header-anchor" href="#前缀和后缀平等" aria-hidden="true">#</a> 前缀和后缀平等</h3><p>要检查字符串是否具有特定的字符串前缀或后缀，请调用string’shasPrefix<code>hasPrefix(_:)</code>和<code>hasSuffix(_:)</code>方法，这两种方法都采用typeString的单个参数并返回布尔值。</p><p>以下示例考虑了代表莎士比亚《*罗密欧与朱丽叶》*前两幕场景位置的一系列弦：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> romeoAndJuliet <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token string-literal"><span class="token string">&quot;Act 1 Scene 1: Verona, A public place&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 1 Scene 2: Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 1 Scene 3: A room in Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 1 Scene 4: A street outside Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 1 Scene 5: The Great Hall in Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 1: Outside Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 2: Capulet&#39;s orchard&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 3: Outside Friar Lawrence&#39;s cell&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 4: A street in Verona&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 5: Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">,</span>
   <span class="token string-literal"><span class="token string">&quot;Act 2 Scene 6: Friar Lawrence&#39;s cell&quot;</span></span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用<code>hasPrefix(_:)</code>方法与<code>romeoAndJuliet</code>数组一起计算该剧第1幕中的场景数量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> act1SceneCount <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> scene <span class="token keyword">in</span> romeoAndJuliet <span class="token punctuation">{</span>
   <span class="token keyword">if</span> scene<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Act 1 &quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       act1SceneCount <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There are </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">act1SceneCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> scenes in Act 1&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;There are 5 scenes in Act 1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，使用<code>hasSuffix(_:)</code>方法来计算卡普莱特豪宅和劳伦斯修士牢房内或周围发生的场景数量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> mansionCount <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">var</span> cellCount <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> scene <span class="token keyword">in</span> romeoAndJuliet <span class="token punctuation">{</span>
   <span class="token keyword">if</span> scene<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Capulet&#39;s mansion&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       mansionCount <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> scene<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Friar Lawrence&#39;s cell&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       cellCount <span class="token operator">+=</span> <span class="token number">1</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">mansionCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> mansion scenes; </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">cellCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> cell scenes&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;6 mansion scenes; 2 cell scenes&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),cn=n("p",null,"注意",-1),pn=n("code",null,"hasPrefix(_:)",-1),ln=n("code",null,"hasSuffix(_:)",-1),dn={href:"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID299",target:"_blank",rel:"noopener noreferrer"},rn=n("h2",{id:"字符串的unicode表示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字符串的unicode表示","aria-hidden":"true"},"#"),s(" 字符串的Unicode表示")],-1),un=n("p",null,[s("当将Unicode字符串写入文本文件或其他存储时，该字符串中的Unicode标量将以几种Unicode定义的"),n("em",null,"编码形式"),s("之一编码。每个表单都以称为"),n("em",null,"代码单元"),s("的小块对字符串进行编码。这些包括UTF-8编码形式（将字符串编码为8位代码单元）、UTF-16编码形式（将字符串编码为16位代码单元）和UTF-32编码形式（将字符串编码为32位代码单元）。")],-1),kn=n("code",null,"in",-1),mn=n("code",null,"Character",-1),vn={href:"https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#ID290",target:"_blank",rel:"noopener noreferrer"},gn=t(`<p>或者，在其他三种符合Unicode的表示形式之一中访问<code>String</code>值：</p><ul><li>UTF-8代码单元的集合（使用字符串的<code>utf8</code>属性访问）</li><li>UTF-16代码单元的集合（使用字符串的<code>utf16</code>属性访问）</li><li>21位Unicode标量值的集合，相当于字符串的UTF-32编码形式（使用字符串的<code>unicodeScalars</code>属性访问）</li></ul><p>下面的每个例子显示了以下字符串的不同表示形式，该字符串由字符<code>D</code>, <code>o</code>, <code>g</code>, <code>‼</code> (<code>DOUBLE EXCLAMATION MARK</code>, 或Unicode标量<code>U+203C</code>)，和🐶字符(&#39; DOG FACE &#39;，或Unicode标量&#39; U+1F436 &#39;)组成:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> dogString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Dog‼🐶&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="utf-8代表" tabindex="-1"><a class="header-anchor" href="#utf-8代表" aria-hidden="true">#</a> UTF-8代表</h3><p>您可以通过迭代其<code>utf8</code>属性来访问<code>String</code>的UTF-8表示形式。此属性类型为<code>String.UTF8View</code>，这是无符号8位（<code>UInt8</code>）值的集合，字符串UTF-8表示中的每个字节一个：</p><p><img src="`+r+`" alt="../_images/UTF8_2x.png"></p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> codeUnit <span class="token keyword">in</span> dogString<span class="token punctuation">.</span>utf8 <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">codeUnit</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> &quot;</span></span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;68 111 103 226 128 188 240 159 144 182 &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，前三个十进制&#39; codeUnit &#39;值(&#39; 68 &#39;，&#39; 111 &#39;，&#39; 103 &#39;)表示字符&#39; D &#39;， &#39; o &#39;和&#39; g &#39;，它们的UTF-8表示与它们的ASCII表示相同。接下来的三个十进制&#39; codeUnit &#39;值(&#39; 226 &#39;，&#39; 128 &#39;，&#39; 188 &#39;)是&#39; DOUBLE感叹号&#39;字符的三字节UTF-8表示。最后四个&#39; codeUnit &#39;值(&#39; 240 &#39;，&#39; 159 &#39;，&#39; 144 &#39;，&#39; 182 &#39;)是&#39; DOG FACE &#39;字符的四字节UTF-8表示。</p><h3 id="utf-16代表" tabindex="-1"><a class="header-anchor" href="#utf-16代表" aria-hidden="true">#</a> UTF-16代表</h3><p>您可以通过迭代其<code>utf16</code>属性来访问<code>String</code>的UTF-16表示形式。此属性类型为<code>String.UTF16View</code>，这是无符号16位（<code>UInt16</code>）值的集合，字符串UTF-16表示中的每个16位代码单元一个：</p><p><img src="`+u+`" alt="../_images/UTF16_2x.png"></p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> codeUnit <span class="token keyword">in</span> dogString<span class="token punctuation">.</span>utf16 <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">codeUnit</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> &quot;</span></span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;68 111 103 8252 55357 56374 &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，前三个<code>codeUnit</code>值（<code>68</code>、<code>111</code>、<code>103</code>）代表字符<code>D</code>、<code>o</code>和<code>g</code>，其UTF-16代码单元的值与字符串的UTF-8表示相同（因为这些Unicode标量代表ASCII字符）。</p><p>第四个<code>codeUnit</code>值（8252）是十六进制值<code>203C</code>的十进制，它表示<code>DOUBLEEXCLAMATIONMARK</code>字符的Unicode标量<code>U+203C</code>。此字符可以在UTF-16中表示为单个代码单元。</p><p>第5和第6个&#39; codeUnit &#39;值(&#39; 55357 &#39;和&#39; 56374 &#39;)是&#39; DOG FACE &#39;字符的UTF-16代理对表示。这些值是高替代值‘U+D83D’(十进制值‘55357’)和低替代值‘U+DC36’(十进制值‘56374’)。</p><h3 id="unicode标量表示" tabindex="-1"><a class="header-anchor" href="#unicode标量表示" aria-hidden="true">#</a> Unicode标量表示</h3><p>您可以通过迭代其<code>unicodeScalars</code>属性来访问<code>String</code>值的Unicode标量表示形式。此属性类型为<code>UnicodeScalarView</code>，这是<code>UnicodeScalar</code>类型的值集合。</p><p>每个<code>UnicodeScalar</code>都有一个<code>value</code>属性，返回标量的21位值，在<code>UInt32</code>值中表示：</p><p><img src="`+k+`" alt="../_images/UnicodeScalar_2x.png"></p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> scalar <span class="token keyword">in</span> dogString<span class="token punctuation">.</span>unicodeScalars <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">scalar<span class="token punctuation">.</span>value</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> &quot;</span></span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;68 111 103 8252 128054 &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前三个<code>UnicodeScalar</code>值（<code>68</code>、<code>111</code>、<code>103</code>）的<code>value</code>属性再次表示字符<code>D</code>、<code>o</code>和<code>g</code>。</p><p>第四个<code>codeUnit</code>值（8252）再次等价于十六进制值<code>203C</code>，该值表示<code>DOUBLEEXCLAMATION</code>字符的Unicode标量<code>U+203C</code>。</p><p>The <code>value</code> property of the fifth and final <code>UnicodeScalar</code>, <code>128054</code>, is a decimal equivalent of the hexadecimal value <code>1F436</code>, which represents the Unicode scalar <code>U+1F436</code> for the <code>DOG FACE</code>character.</p><p>作为查询其<code>value</code>属性的替代方案，每个<code>UnicodeScalar</code>值也可以用于构建新的<code>String</code>值，例如字符串插值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">for</span> scalar <span class="token keyword">in</span> dogString<span class="token punctuation">.</span>unicodeScalars <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">scalar</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// D</span>
<span class="token comment">// o</span>
<span class="token comment">// g</span>
<span class="token comment">// ‼</span>
<span class="token comment">// 🐶</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function bn(hn,fn){const a=i("ExternalLinkIcon");return c(),p("div",null,[v,n("blockquote",null,[g,n("p",null,[s("有关将"),b,s("与Foundation和Cocoa一起使用的更多信息，请参阅"),n("a",h,[s("String和NSString之间的桥接"),e(a)]),s("。")])]),f,n("ul",null,[q,n("li",null,[s("一个任意的Unicode标量值，写为"),w,S,_,s("，其中"),x,s("是一个1-8位十六进制数字（Unicode在下面的"),n("a",U,[s("Unicode"),e(a)]),s("中讨论）")])]),C,n("p",null,[s("Swift的"),y,s("类型是一种"),A,s("。如果您创建新的"),T,s("值，则该"),I,s("值在传递给函数或方法时，或分配给常量或变量时将被"),E,s("。在每种情况下，都会创建现有"),L,s("值的新副本，并传递或分配新副本，而不是原始版本。值类型在"),n("a",F,[s("结构"),e(a)]),s("中描述"),n("a",D,[s("，枚举是值类型"),e(a)]),s("。")]),N,n("p",null,[O,s("-"),M,s("循环在"),n("a",P,[s("For-In循环"),e(a)]),s("中描述。")]),B,n("p",null,[s("当您从字符串（例如，使用下标或类似"),G,s("的方法获得子字符串时，结果是"),n("a",R,[H,e(a)]),s("的实例，而不是另一个字符串。Swift中的子字符串具有大多数与字符串相同的方法，这意味着您可以像处理字符串一样使用子字符串。然而，与字符串不同，您在对字符串执行操作时仅使用子字符串的时间很短。当您准备将结果存储更长时间时，您将子字符串转换为"),W,s("实例。例如：")]),V,n("blockquote",null,[Q,n("p",null,[K,s("和"),z,s("都符合"),n("a",Y,[J,e(a)]),s("协议，这意味着字符串操作函数通常可以方便地接受"),j,s("值。您可以使用"),X,s("或"),$,s("值调用此类函数。")])]),Z,nn,sn,n("p",null,[s("字符串和字符相等性与“等于”运算符（"),an,s("和“不等于”运算符（"),en,s("），如"),n("a",tn,[s("比较运算符"),e(a)]),s("中所述：")]),on,n("blockquote",null,[cn,n("p",null,[pn,s("和"),ln,s("方法在每个字符串中的扩展字素簇之间执行逐个字符规范等价比较，如"),n("a",dn,[s("String和字符平等"),e(a)]),s("中所述。")])]),rn,un,n("p",null,[s("Swift提供了几种不同的方式来访问字符串的Unicode表示形式。您可以使用"),kn,s("语句迭代字符串，以Unicode扩展字素集群的形式访问其单个"),mn,s("值。这个过程在《"),n("a",vn,[s("处理角色》"),e(a)]),s("中进行了描述。")]),gn])}const wn=o(m,[["render",bn],["__file","12.swift-strings-chracters.html.vue"]]);export{wn as default};
