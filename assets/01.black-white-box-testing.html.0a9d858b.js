import{_ as i,o as a,c as e,e as l}from"./app.4659d0e0.js";const h={},p=l('<h1 id="测试基础-黑盒测试与白盒测试概念描述" tabindex="-1"><a class="header-anchor" href="#测试基础-黑盒测试与白盒测试概念描述" aria-hidden="true">#</a> 测试基础 - 黑盒测试与白盒测试概念描述</h1><blockquote><p>黑盒测试：已知产品的功能设计规格，可以进行测试证明每个实现了的功能是否符合要求。</p><p>白盒测试：已知产品的内部工作过程，可以进行测试证明每种内部操作是否符合设计规格要求，所有内部成分是否经过检查。</p></blockquote><h2 id="_1-第一认识" tabindex="-1"><a class="header-anchor" href="#_1-第一认识" aria-hidden="true">#</a> 1. 第一认识</h2><h3 id="_1-1-黑盒测试" tabindex="-1"><a class="header-anchor" href="#_1-1-黑盒测试" aria-hidden="true">#</a> 1.1. 黑盒测试</h3><ul><li><p>测试特点：测试功能；</p></li><li><p>测试依据：需求规格说明书</p></li><li><p>方法举例：等价类划分、边界值测试</p></li><li><p>优点：能站在用户的立场上进行测试</p></li><li><p>缺点：不能测试程序内部特定部位，如程序有误，则无法发现。</p></li></ul><h3 id="_1-2-白盒测试" tabindex="-1"><a class="header-anchor" href="#_1-2-白盒测试" aria-hidden="true">#</a> 1.2. 白盒测试</h3><ul><li><p>测试特点：测试程序接口与结构</p></li><li><p>测试依据：软件程序</p></li><li><p>方法举例：逻辑覆盖</p></li><li><p>优点：对程序内部特定部位进行覆盖测试。</p></li><li><p>缺点：无法检验程序外部特性。</p></li></ul><h2 id="_2-第二认识" tabindex="-1"><a class="header-anchor" href="#_2-第二认识" aria-hidden="true">#</a> 2. 第二认识</h2><h3 id="_2-1-黑盒测试" tabindex="-1"><a class="header-anchor" href="#_2-1-黑盒测试" aria-hidden="true">#</a> 2.1. 黑盒测试</h3><p>​ 黑盒测试把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，针对“软件界面”和”软件功能“进行测试，只检查功能是否符合需求规格说明书能正常使用。因此黑盒测试又叫功能测试或数据驱动测试。</p><h3 id="_2-2-白盒测试" tabindex="-1"><a class="header-anchor" href="#_2-2-白盒测试" aria-hidden="true">#</a> 2.2. 白盒测试</h3><p>​ 白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看作一个打开的盒子，他允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一致。因此白盒测试又称为”结构测试“或”逻辑驱动测试“。白盒测试是按照程序内部的结构来测试程序，通过测试检验产品内部动作是否按照设计规格说明书的要求正常进行，检验程序中的每条通道是否都按照规定正常工作。</p><h2 id="_3-第三认识" tabindex="-1"><a class="header-anchor" href="#_3-第三认识" aria-hidden="true">#</a> 3. 第三认识</h2><h3 id="_3-1-黑盒测试" tabindex="-1"><a class="header-anchor" href="#_3-1-黑盒测试" aria-hidden="true">#</a> 3.1. 黑盒测试</h3><p>黑盒测试主要是为了发现以下错误：</p><ol><li><p>是否有不正确或者遗漏了的功能；</p></li><li><p>在接口上，输入能否正确的接受？能否输出正确的结果？</p></li><li><p>是否有数据结构错误或外部信息（例如数据库文件）访问错误？</p></li><li><p>性能上是否能够满足要求？</p></li><li><p>是否有初始化或终止性错误？</p></li></ol><p>黑盒的测试用例技术设计有三种： 边界值分析、等价类划分、错误推测法。</p><h3 id="_3-2-白盒测试" tabindex="-1"><a class="header-anchor" href="#_3-2-白盒测试" aria-hidden="true">#</a> 3.2. 白盒测试</h3><p>白盒测试主要是想对程序模块进行以下检查：</p><ol><li><p>对程序模块的所有独立的执行路径至少测试一遍；</p></li><li><p>对所有的逻辑判定，取”真“与”假“的两种情况都能至少测一遍；</p></li><li><p>在循环的边界和运行的界限内执行循环体；</p></li><li><p>测试内部数据结构的有效性，等等；</p></li><li><p>静态白盒测试 ：即代码审查，正式审查和检验设计和程序代码；</p></li><li><p>动态白盒测试 利用查看代码功能和实现方式得到的信息来设计和执行测试，也叫结构测试；</p></li></ol><p>白盒的测试用例技术包括逻辑覆盖和基本路径测试。</p><p>逻辑覆盖：是以程序内在逻辑结构为基础的测试用例设计技术，这一方法要求测试人员对程序的逻辑结构有清楚的了解。</p><p>基本路径测试：在程序控制流程图的基础上，通过分析控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例。</p>',23),r=[p];function d(t,n){return a(),e("div",null,r)}const o=i(h,[["render",d],["__file","01.black-white-box-testing.html.vue"]]);export{o as default};
