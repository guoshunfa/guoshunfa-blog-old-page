import{_ as a,o as e,c as n,e as s}from"./app.4659d0e0.js";const i={},t=s(`<h1 id="idea-debug调试" tabindex="-1"><a class="header-anchor" href="#idea-debug调试" aria-hidden="true">#</a> IDEA - Debug调试</h1><h2 id="debug-基本操作" tabindex="-1"><a class="header-anchor" href="#debug-基本操作" aria-hidden="true">#</a> debug 基本操作</h2><p>这里主要描述这些按钮的用处。</p><p>按钮依次的用处是：</p><ul><li>回到断点处</li><li>步过</li><li>步入</li><li>强制步入</li><li>步出</li><li>丢帧</li><li>运行到光标处</li><li>评估表达式</li><li>跟踪当前流链</li></ul><img src="https://file.pandacode.cn/blog/202209252022737.png" alt="image-20220925202204677" style="zoom:50%;"><h3 id="回到断点处" tabindex="-1"><a class="header-anchor" href="#回到断点处" aria-hidden="true">#</a> 回到断点处</h3><p>当不知道当前断点停留在何处时，点击这个按钮，即可回到当前断点处。</p><img src="https://file.pandacode.cn/blog/202209251958312.png" alt="image-20220925195821200" style="zoom:67%;"><h3 id="步过" tabindex="-1"><a class="header-anchor" href="#步过" aria-hidden="true">#</a> 步过</h3><p>正常执行下一行代码。</p><img src="https://file.pandacode.cn/blog/202209252000202.png" alt="image-20220925200012141" style="zoom:67%;"><h3 id="步入" tabindex="-1"><a class="header-anchor" href="#步入" aria-hidden="true">#</a> 步入</h3><p>进入到方法中。</p><img src="https://file.pandacode.cn/blog/202209252001741.png" alt="image-20220925200139665" style="zoom:67%;"><h3 id="强制步入" tabindex="-1"><a class="header-anchor" href="#强制步入" aria-hidden="true">#</a> 强制步入</h3><p>进入到方法的源码中。</p><img src="https://file.pandacode.cn/blog/202209252005963.png" alt="image-20220925200509871" style="zoom:67%;"><h3 id="步出" tabindex="-1"><a class="header-anchor" href="#步出" aria-hidden="true">#</a> 步出</h3><p>于步入相反，步出是让方法正常执行结果，并且返回到方法调用方。</p><img src="https://file.pandacode.cn/blog/202209252004792.png" alt="image-20220925200418736" style="zoom:67%;"><h3 id="丢帧" tabindex="-1"><a class="header-anchor" href="#丢帧" aria-hidden="true">#</a> 丢帧</h3><p>如果一部分代码没有调试到，可以点击这个按钮，将断点会退到原来位置。</p><img src="https://file.pandacode.cn/blog/202209252009849.png" alt="image-20220925200948768" style="zoom:67%;"><h3 id="运行到光标处" tabindex="-1"><a class="header-anchor" href="#运行到光标处" aria-hidden="true">#</a> 运行到光标处</h3><p>光标指定将要执行的一行代码，点击此按钮，断点会停留到光标所在的那一行。</p><img src="https://file.pandacode.cn/blog/202209252011355.png" alt="image-20220925201141301" style="zoom:67%;"><h3 id="评估表达式" tabindex="-1"><a class="header-anchor" href="#评估表达式" aria-hidden="true">#</a> 评估表达式</h3><p>可以通过代码段的方式，对当前的调试内容进行进一步分析。</p><img src="https://file.pandacode.cn/blog/202209252014433.png" alt="image-20220925201413360" style="zoom:67%;"><img src="https://file.pandacode.cn/blog/202209252015434.png" alt="image-20220925201529346" style="zoom:50%;"><h3 id="跟踪当前流链" tabindex="-1"><a class="header-anchor" href="#跟踪当前流链" aria-hidden="true">#</a> 跟踪当前流链</h3><p>主要用于JDK8 的 Stream调试。</p><img src="https://file.pandacode.cn/blog/202209252018503.png" alt="image-20220925201851445" style="zoom:67%;"><p>针对Stream的调试，idea提供了一个很强大的功能。通过流跟踪，可以清晰的看出数据的走向。</p><p><img src="https://file.pandacode.cn/blog/202209252021245.png" alt="image-20220925202115185"></p><h2 id="debug-高级操作" tabindex="-1"><a class="header-anchor" href="#debug-高级操作" aria-hidden="true">#</a> debug 高级操作</h2><p>debug高级调试分为几种：</p><ul><li><p>字段断点调试</p></li><li><p>异常断点调试</p></li><li><p>方法断点调试</p></li><li><p>手动制造抛出异常 和 强制返回</p></li></ul><h3 id="字段断点调试" tabindex="-1"><a class="header-anchor" href="#字段断点调试" aria-hidden="true">#</a> 字段断点调试</h3><p>字段左侧打上断点，右键断点位置，根据需要调整配置。</p><img src="https://file.pandacode.cn/blog/202209250912872.png" alt="image-20220925091222581" style="zoom:50%;"><p>我这里选中了“字段修改时监听”。</p><p>Debug时字段如果在某个位置进行了修改，断点会自动打到修改的那行代码，详细请看下方截图。</p><p><img src="https://file.pandacode.cn/blog/202209250919264.png" alt="image-20220925091912211" style="zoom:50%;"> <img src="https://file.pandacode.cn/blog/202209250919481.png" alt="image-20220925091944421" style="zoom:50%;"></p><h3 id="异常断点调试" tabindex="-1"><a class="header-anchor" href="#异常断点调试" aria-hidden="true">#</a> 异常断点调试</h3><p>先看一下这段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> bool <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会报一个错误：NullPointerException（空指针异常），下面我们通过debug进行捕捉NullPointerException。</p><p>首先打开debug断点面板</p><p><img src="https://file.pandacode.cn/blog/202209250927737.png" alt="image-20220925092700682"></p><p>打开断点面板后，点击左上角加号（➕），选择Java异常断点，查找并添加NullPointerException。</p><p><img src="https://file.pandacode.cn/blog/202209250929494.png" alt="image-20220925092919437"></p><p>这样就能够拦截到NullPointerException了。</p><img src="https://file.pandacode.cn/blog/202209250931794.png" alt="image-20220925093138728" style="zoom:50%;"><h3 id="方法断点调试" tabindex="-1"><a class="header-anchor" href="#方法断点调试" aria-hidden="true">#</a> 方法断点调试</h3><p>在方法处加入断点，右键断点进行断点详情，可以在方法输入或输出时进行调试。</p><img src="https://file.pandacode.cn/blog/202209251003678.png" alt="image-20220925100354612" style="zoom:50%;"><p>我这里选择了方法输入和方法输出，在进行debug时，断点会停留在方法的第一行和结束行。</p><p><img src="https://file.pandacode.cn/blog/202209251007157.png" alt="image-20220925100741094" style="zoom:50%;"> <img src="https://file.pandacode.cn/blog/202209251013297.png" alt="image-20220925100808169" style="zoom:50%;"></p><h3 id="手动制造抛出异常-和-强制返回" tabindex="-1"><a class="header-anchor" href="#手动制造抛出异常-和-强制返回" aria-hidden="true">#</a> 手动制造抛出异常 和 强制返回</h3><p>在线程执行过程中，想在某一行代码手动的制造异常抛出或者强制返回，只需要在当前帧右键，选择抛出异常（或者强制返回），输入异常值（或者返回数据），即可直接抛出异常（或者返回）。</p><img src="https://file.pandacode.cn/blog/202209251018363.png" alt="image-20220925101818301" style="zoom:50%;"><img src="https://file.pandacode.cn/blog/202209251021623.png" alt="image-20220925102152560" style="zoom:50%;"><h2 id="debug-调试远端服务" tabindex="-1"><a class="header-anchor" href="#debug-调试远端服务" aria-hidden="true">#</a> debug 调试远端服务</h2><p>如果通过debug 调试远端服务的代码，下面描述几种方式。</p><h3 id="服务启动时添加参数" tabindex="-1"><a class="header-anchor" href="#服务启动时添加参数" aria-hidden="true">#</a> 服务启动时添加参数</h3><blockquote><p>切记，仅可以用于测试环境。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n,address<span class="token operator">=</span><span class="token number">5005</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,69),p=[t];function l(o,d){return e(),n("div",null,p)}const r=a(i,[["render",l],["__file","05.idea-debug.html.vue"]]);export{r as default};
