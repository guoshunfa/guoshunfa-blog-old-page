import{_ as n,o as s,c as e,e as a}from"./app.4659d0e0.js";const t={},i=a(`<h1 id="shell-expect-用法描述" tabindex="-1"><a class="header-anchor" href="#shell-expect-用法描述" aria-hidden="true">#</a> Shell - expect 用法描述</h1><h2 id="_1-expect-自动化交互脚本" tabindex="-1"><a class="header-anchor" href="#_1-expect-自动化交互脚本" aria-hidden="true">#</a> 1. expect 自动化交互脚本</h2><h3 id="_1-1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-介绍" aria-hidden="true">#</a> 1.1. 介绍</h3><p>expect是一个自动化交互套件，主要应用于执行命令和程序时，系统以交互形式要求输入指定字符串，实现交互通信。</p><h3 id="_1-2-安装" tabindex="-1"><a class="header-anchor" href="#_1-2-安装" aria-hidden="true">#</a> 1.2. 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">expect</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-命令介绍" tabindex="-1"><a class="header-anchor" href="#_1-3-命令介绍" aria-hidden="true">#</a> 1.3. 命令介绍</h3><p>Expect中最关键的四个命令是send,expect,spawn,interact。</p><ul><li><p>send：向进程发送字符串，用于模拟用户的输入， 该命令不能自动回车换行，一般要加\\r（回车）</p></li><li><p>expect： expect的一个内部命令，判断上次输出结果里是否包含指定的字符串，如果有则立即返回，否则就等待超时时间后返回，只能捕捉由spawn启动的进程的输出expect</p></li><li><p>spawn：启动进程，并跟踪后续交互信息</p></li><li><p>interact：执行完成后保存交互状态，把控制权交给控制台</p></li><li><p>set timeout 30：设置超时时间为30秒(默认的超时时间是 10 秒，通过 set 命令可以设置会话超时时间, 若不限制超时时间则应设置为-1)</p></li><li><p>exp_continue： 允许expect继续向下执行指令meout：指定超时时间，过期则继续执行后续指令</p></li><li><p>send_user： 回显命令，相当于echo</p></li><li><p><code>$argv</code>参数数组：Expect脚本可以接受从bash传递的参数，可以使用 [lindex <code>$argv</code> n] 获得，n从0开始，分别表示第一个<code>$1</code>，第二个<code>$2</code>，第三个<code>$3</code>……参数 (<code>$argvn</code>没有空格则表示脚本名称 ； <code>$argv</code> n有空格则代表下标)</p></li></ul><p>一般流程：spawn 启动追踪 —&gt; expect 匹配捕捉关键字 ——&gt; 捕捉到将触发send 代替人为输入指令—&gt; interact /expect eof</p><p>Expect脚本必须以interact或expect eof 结束，执行自动化任务通常expect eof就够了</p><p>expect eof 是在等待结束标志。由spawn启动的命令在结束时会产生一个eof标记，expect eof 即在等待这个标记</p><h3 id="_1-4-bash-shell内加入expect脚本" tabindex="-1"><a class="header-anchor" href="#_1-4-bash-shell内加入expect脚本" aria-hidden="true">#</a> 1.4. bash shell内加入expect脚本</h3><p>使用<code>&lt;&lt;-EOF</code> ，引入expect脚本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/base</span>
/usr/bin/expect <span class="token operator">&lt;&lt;-</span><span class="token string">EOF

EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-事例" tabindex="-1"><a class="header-anchor" href="#_2-事例" aria-hidden="true">#</a> 2. 事例</h2><h3 id="_2-1-ssh-连接远端服务器" tabindex="-1"><a class="header-anchor" href="#_2-1-ssh-连接远端服务器" aria-hidden="true">#</a> 2.1. ssh 连接远端服务器</h3><p>1). 开始构建文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> test_expect.exp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2). 构建文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/expect</span>
<span class="token comment"># 传入参数数量验证</span>
<span class="token keyword">if</span> <span class="token punctuation">{</span><span class="token variable">$argc</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
    <span class="token comment">#do something</span>
    send_user <span class="token string">&quot;usage: <span class="token variable">$argv0</span> &lt;remote_user&gt; &lt;remote_host&gt; &lt;remote_pwd&gt;&quot;</span>
    <span class="token builtin class-name">exit</span>
<span class="token punctuation">}</span>

// 将超时设置为-1以禁用超时功能。
<span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token parameter variable">-1</span>

<span class="token comment"># 远程服务器用户名</span>
<span class="token builtin class-name">set</span> remote_user <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token comment"># 远程服务器域名</span>
<span class="token builtin class-name">set</span> remote_host <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">1</span><span class="token punctuation">]</span> 
<span class="token comment"># 远程服务器密码</span>
<span class="token builtin class-name">set</span> remote_pwd <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token comment"># 远程登录</span>
spawn <span class="token function">ssh</span> <span class="token variable">\${remote_user}</span>@<span class="token variable">\${remote_host}</span>
<span class="token function">expect</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;*password&quot;</span> <span class="token punctuation">{</span>send <span class="token string">&quot;<span class="token variable">\${remote_pwd}</span><span class="token entity" title="\\r">\\r</span>&quot;</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token string">&quot;*yes/no&quot;</span> <span class="token punctuation">{</span>send <span class="token string">&quot;yes<span class="token entity" title="\\r">\\r</span>&quot;</span><span class="token punctuation">;</span>exp_continue<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment"># ssh登陆成功后，继续进行操作。</span>
<span class="token function">expect</span> <span class="token string">&quot;]#&quot;</span> <span class="token punctuation">{</span> send <span class="token string">&quot;cd /<span class="token entity" title="\\r">\\r</span>&quot;</span> <span class="token punctuation">}</span>
<span class="token comment"># 结束</span>
<span class="token function">expect</span> eof
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3). 使用脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./test_expect.exp username <span class="token function">ip</span> password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="🌟-注意事项" tabindex="-1"><a class="header-anchor" href="#🌟-注意事项" aria-hidden="true">#</a> 🌟 注意事项</h2><ul><li>脚本文件内容第一行必须加入<code>#!/usr/bin/expect</code>。</li><li>expect 脚本文件执行必须使用 ./test_expect.exp。</li></ul>`,25),c=[i];function p(l,o){return s(),e("div",null,c)}const r=n(t,[["render",p],["__file","61.shell-expect.html.vue"]]);export{r as default};
