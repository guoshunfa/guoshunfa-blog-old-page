import{_ as p,r as o,o as i,c,a as s,b as n,d as e,e as t}from"./app.4659d0e0.js";const r={},l=s("h1",{id:"js-网络请求-ajax",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#js-网络请求-ajax","aria-hidden":"true"},"#"),n(" JS - 网络请求 AJAX")],-1),u=s("h2",{id:"_1-ajax-介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-ajax-介绍","aria-hidden":"true"},"#"),n(" 1. AJAX 介绍")],-1),d=s("strong",null,"A",-1),k=s("strong",null,"J",-1),v=s("strong",null,"A",-1),h=s("strong",null,"X",-1),m={href:"https://baike.baidu.com/item/XML/86251",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/HTML/97049",target:"_blank",rel:"noopener noreferrer"},g={href:"https://baike.baidu.com/item/XHTML/316621",target:"_blank",rel:"noopener noreferrer"},x={href:"https://baike.baidu.com/item/JavaScript/321142",target:"_blank",rel:"noopener noreferrer"},f={href:"https://baike.baidu.com/item/DOM/50288",target:"_blank",rel:"noopener noreferrer"},_={href:"https://baike.baidu.com/item/XSLT/1330564",target:"_blank",rel:"noopener noreferrer"},y={href:"https://baike.baidu.com/item/XMLHttpRequest/6788735",target:"_blank",rel:"noopener noreferrer"},j={href:"https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/6582461",target:"_blank",rel:"noopener noreferrer"},X=t(`<h2 id="_2-ajax-的实现方式介绍网络" tabindex="-1"><a class="header-anchor" href="#_2-ajax-的实现方式介绍网络" aria-hidden="true">#</a> 2. AJAX 的实现方式介绍网络</h2><p>目前前端进行网络请求有两种方式，XHR和fatch。</p><p>对XHR进行封装的组件有很多，常见的有axios，jquery。</p><p><strong>备注：XHR（XMLHttpRequest）</strong></p><p>（建议使用axios。）</p><h3 id="_2-1-优缺点" tabindex="-1"><a class="header-anchor" href="#_2-1-优缺点" aria-hidden="true">#</a> 2.1. 优缺点</h3><h5 id="xhr" tabindex="-1"><a class="header-anchor" href="#xhr" aria-hidden="true">#</a> <strong>XHR</strong></h5><p><strong>缺点：</strong></p><ol><li>API用法繁琐。</li><li>没有关注分离的设计思想。</li></ol><h5 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> <strong>fetch</strong></h5><p><strong>优点：</strong></p><ol><li>关注分离的设计思想。</li><li>API相对于XHR更简单。</li><li>fetch是浏览器原生支持的，使用fetch可以不用引用http的类库即可实现。</li></ol><p><strong>缺点：</strong></p><ol><li>老版浏览器兼容问题。（IE系列是完全不支持的，主流浏览器的早起版本也不支持，所以如果在项目中使用需要做兼容方案处理。）</li></ol><h2 id="_3-原生js-实现-ajax" tabindex="-1"><a class="header-anchor" href="#_3-原生js-实现-ajax" aria-hidden="true">#</a> 3. 原生JS 实现 AJAX</h2><blockquote><p>直接使用XHR(XMLHttpRequest)。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-axios-实现-ajax" tabindex="-1"><a class="header-anchor" href="#_4-axios-实现-ajax" aria-hidden="true">#</a> 4. axios 实现 AJAX</h2>`,18),A={href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="_4-1-安装" tabindex="-1"><a class="header-anchor" href="#_4-1-安装" aria-hidden="true">#</a> 4.1. 安装</h3><p>Using npm:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ npm install axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Using bower:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ bower install axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Using yarn:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ yarn add axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Using jsDelivr CDN:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Using unpkg CDN:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-api-demo" tabindex="-1"><a class="header-anchor" href="#_4-2-api-demo" aria-hidden="true">#</a> 4.2. API demo</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Send a POST request</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Fred&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Flintstone&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// GET request for remote image in node.js</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://bit.ly/2mTM3nY&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">&#39;stream&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;ada_lovelace.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-jquery-实现-ajax" tabindex="-1"><a class="header-anchor" href="#_5-jquery-实现-ajax" aria-hidden="true">#</a> 5. JQuery 实现 AJAX</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-fetch-实现-ajax" tabindex="-1"><a class="header-anchor" href="#_6-fetch-实现-ajax" aria-hidden="true">#</a> 6. Fetch 实现 AJAX</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response<span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求出错&#39;</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Fetch 更多参数:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// must match &#39;Content-Type&#39; header</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token string">&#39;no-cache&#39;</span><span class="token punctuation">,</span> <span class="token comment">// *default, no-cache, reload, force-cache, only-if-cached</span>
  <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&#39;same-origin&#39;</span><span class="token punctuation">,</span> <span class="token comment">// include, same-origin, *omit</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;user-agent&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Mozilla/4.0 MDN Example&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;content-type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token comment">// *GET, POST, PUT, DELETE, etc.</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;cors&#39;</span><span class="token punctuation">,</span> <span class="token comment">// no-cors, cors, *same-origin</span>
  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;follow&#39;</span><span class="token punctuation">,</span> <span class="token comment">// manual, *follow, error</span>
  <span class="token literal-property property">referrer</span><span class="token operator">:</span> <span class="token string">&#39;no-referrer&#39;</span><span class="token punctuation">,</span> <span class="token comment">// *client, no-referrer</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,21),q={href:"https://blog.csdn.net/weixin_41275295/article/details/100699978",target:"_blank",rel:"noopener noreferrer"},M={href:"https://baike.baidu.com/item/ajax/8425",target:"_blank",rel:"noopener noreferrer"};function L(T,J){const a=o("ExternalLinkIcon");return i(),c("div",null,[l,u,s("p",null,[n("​ Ajax即"),d,n("synchronous "),k,n("avascript "),v,n("nd "),h,n("ML（异步JavaScript和"),s("a",m,[n("XML"),e(a)]),n("）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用现有技术集合的‘新’方法，包括: "),s("a",b,[n("HTML"),e(a)]),n(" 或 "),s("a",g,[n("XHTML"),e(a)]),n(", CSS, "),s("a",x,[n("JavaScript"),e(a)]),n(", "),s("a",f,[n("DOM"),e(a)]),n(", XML, "),s("a",_,[n("XSLT"),e(a)]),n(", 以及最重要的"),s("a",y,[n("XMLHttpRequest"),e(a)]),n("。 [3] 使用Ajax技术网页应用能够快速地将增量更新呈现在"),s("a",j,[n("用户界面"),e(a)]),n("上，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作。")]),X,s("blockquote",null,[s("p",null,[n("前往 "),s("a",A,[n("github"),e(a)]),n(" （详情请查看axios Github 项目README.md 文件。）")])]),w,s("ul",null,[s("li",null,[s("a",q,[n("XHR 和 Fetch 的使用详解和区别总结"),e(a)])]),s("li",null,[s("a",M,[n("百度百科"),e(a)])])])])}const E=p(r,[["render",L],["__file","index.html.vue"]]);export{E as default};
