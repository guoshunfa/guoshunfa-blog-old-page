import{_ as c,r as d,o as r,c as a,a as o,b as e,d as t,e as l}from"./app.4659d0e0.js";const n={},s=o("h1",{id:"swift基础-高级操作员",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#swift基础-高级操作员","aria-hidden":"true"},"#"),e(" Swift基础 - 高级操作员")],-1),p=o("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html",-1),h={href:"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html",target:"_blank",rel:"noopener noreferrer"},u=l('<p>与C中的算术运算符不同，Swift中的算术运算符默认不会溢出。溢出行为被困住，并报告为错误。要选择溢出行为，请使用Swift的第二组默认溢出的算术运算符，例如溢出加法运算符（<code>&amp;+</code>）。所有这些溢出运算符都以安培和（<code>&amp;</code>）开头。</p><p>当您定义自己的结构、类和枚举时，为这些自定义类型提供您自己的标准Swift运算符的实现可能会很有用。Swift可以轻松提供这些运算符的定制实现，并准确确定它们对您创建的每个类型的行为。</p><p>您不限于预定义的运算符。Swift允许您自由定义自己的自定义内缀、前缀、后缀和赋值运算符，并具有自定义优先级和关联性值。这些运算符可以像任何预定义运算符一样在您的代码中使用和采用，您甚至可以扩展现有类型以支持您定义的自定义运算符。</p><h2 id="按位运算符" tabindex="-1"><a class="header-anchor" href="#按位运算符" aria-hidden="true">#</a> 按位运算符</h2><p><em>按位运算符</em>使您能够操作数据结构中的单个原始数据位。它们通常用于低级编程，例如图形编程和设备驱动程序创建。当您处理来自外部来源的原始数据时，例如编码和解码数据以通过自定义协议进行通信时，按位运算符也很有用。</p><p>Swift支持C中的所有按位运算符，如下所述。</p><h3 id="bitwise-not运算符" tabindex="-1"><a class="header-anchor" href="#bitwise-not运算符" aria-hidden="true">#</a> Bitwise NOT运算符</h3><p><em>按位不算符</em>（<code>~</code>）反转数字中的所有位：</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseNOT_2x.png" alt="../_images/bitwiseNOT_2x.png"></p><p>按位NOt运算符是一个前缀运算符，并显示在其操作的值之前，没有任何空格：</p><ol><li>let initialBits: UInt8 = 0b00001111</li><li>let invertedBits = ~initialBits // equals 11110000</li></ol><p><code>UInt8</code>整数有8位，可以存储<code>0</code>到<code>255</code>之间的任何值。此示例初始化二进制值<code>00001111</code>的<code>UInt8</code>整数，其前四位设置为<code>0</code>，后四位设置为1。这相当于小数点后15。</p><p>然后，按位NOt运算符创建一个名为<code>invertedBits</code>的新常量，该常量等于initialBits，但所有位都倒置。零变成1，1变成零。<code>invertedBits</code>的值为<code>11110000</code>，等于<code>240</code>的无符号小数值。</p><h3 id="位和运算符" tabindex="-1"><a class="header-anchor" href="#位和运算符" aria-hidden="true">#</a> 位和运算符</h3><p><em>按位和运算符</em>（<code>&amp;</code>）结合了两个数字的位。<em>只有当两个</em>输入数字中的位等于<code>1</code>时，它才会返回一个新数字，其位设置为<code>1</code>：</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseAND_2x.png" alt="../_images/bitwiseAND_2x.png"></p><p>在下面的示例中，<code>firstSixBits</code>和<code>lastSixBits</code>的值都有四个中间位等于1。按位和运算符将它们组合成数字<code>00111100</code>，等于<code>60</code>的无符号小数值：</p><ol><li>let firstSixBits: UInt8 = 0b11111100</li><li>let lastSixBits: UInt8 = 0b00111111</li><li>let middleFourBits = firstSixBits &amp; lastSixBits // equals 00111100</li></ol><h3 id="bitwise-or运算符" tabindex="-1"><a class="header-anchor" href="#bitwise-or运算符" aria-hidden="true">#</a> Bitwise OR运算符</h3><p><em>按位OR运算符</em>（<code>|</code>）比较两个数字的位。如果<em>任一</em>输入号中的位等于<code>1</code>运算符返回一个新数字，其位设置为<code>1</code>：</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseOR_2x.png" alt="../_images/bitwiseOR_2x.png"></p><p>在下面的示例中，<code>someBits</code>和<code>moreBits</code>的值将不同的位设置为1。按位或运算符将它们组合成数字<code>11111110</code>，等于<code>254</code>的无符号小数点：</p><ol><li>let someBits: UInt8 = 0b10110010</li><li>let moreBits: UInt8 = 0b01011110</li><li>let combinedbits = someBits | moreBits // equals 11111110</li></ol><h3 id="位xor运算符" tabindex="-1"><a class="header-anchor" href="#位xor运算符" aria-hidden="true">#</a> 位XOR运算符</h3><p><em>按位XOR运算符</em>，或“排他性OR运算符”（<code>^</code>），比较两个数字的位。运算符返回一个新数字，其位设置为<code>1</code>，其中输入位不同，并设置为<code>0</code>，其中输入位相同：</p><p><img src="https://docs.swift.org/swift-book/_images/bitwiseXOR_2x.png" alt="../_images/bitwiseXOR_2x.png"></p><p>在下面的示例中，<code>firstBits</code>和<code>otherBits</code>的值在另一个没有的位置上都设置为<code>1</code>。按位XOR运算符将这两个位的输出值设置为<code>1</code>。<code>firstBits``otherBits</code>中的所有其他位都匹配，并在输出值中设置为<code>0</code>：</p><ol><li>let firstBits: UInt8 = 0b00010100</li><li>let otherBits: UInt8 = 0b00000101</li><li>let outputBits = firstBits ^ otherBits // equals 00010001</li></ol><h3 id="逐位左移和右移运算符" tabindex="-1"><a class="header-anchor" href="#逐位左移和右移运算符" aria-hidden="true">#</a> 逐位左移和右移运算符</h3><p>根据下面定义的规则，<em>按位左移运算符</em>（<code>&lt;&lt;</code>）和<em>按位右移运算符</em>（<code>&gt;&gt;</code>）将数字中的所有位向左或向右移动一定数量的位置。</p><p>位左移和右移具有整数乘以或除以二倍的效果。将整数的位向左移动一个位置会使其值翻倍，而将其向右移动一个位置会将其值减半。</p><h4 id="无符号整数的移动行为" tabindex="-1"><a class="header-anchor" href="#无符号整数的移动行为" aria-hidden="true">#</a> 无符号整数的移动行为</h4><p>无符号整数的位移位行为如下：</p><ol><li>现有位按请求的位数向左或向右移动。</li><li>任何移动到整数存储边界之外的位都会被丢弃。</li><li>在原始位向左或向右移动后，零插入后面的空间。</li></ol><p>这种方法被称为<em>逻辑转变</em>。</p><p>The illustration below shows the results of <code>11111111 &lt;&lt; 1</code> (which is <code>11111111</code> shifted to the left by <code>1</code> place), and <code>11111111 &gt;&gt; 1</code> (which is <code>11111111</code> shifted to the right by <code>1</code> place). Blue numbers are shifted, gray numbers are discarded, and orange zeros are inserted:</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftUnsigned_2x.png" alt="../_images/bitshiftUnsigned_2x.png"></p><p>以下是 Swift 代码中位移的外观：</p><ol><li>let shiftBits: UInt8 = 4 // 00000100 in binary</li><li>shiftBits &lt;&lt; 1 // 00001000</li><li>shiftBits &lt;&lt; 2 // 00010000</li><li>shiftBits &lt;&lt; 5 // 10000000</li><li>shiftBits &lt;&lt; 6 // 00000000</li><li>shiftBits &gt;&gt; 2 // 00000001</li></ol><p>您可以使用位移来编码和解码其他数据类型中的值：</p><ol><li>let pink: UInt32 = 0xCC6699</li><li>let redComponent = (pink &amp; 0xFF0000) &gt;&gt; 16 // redComponent is 0xCC, or 204</li><li>let greenComponent = (pink &amp; 0x00FF00) &gt;&gt; 8 // greenComponent is 0x66, or 102</li><li>let blueComponent = pink &amp; 0x0000FF // blueComponent is 0x99, or 153</li></ol><p>此示例使用名为<code>pink</code>的<code>UInt32</code>常量来存储粉红色的级联样式表颜色值。CSS颜色值<code>#CC6699</code>在Swift的十六进制数字表示中写为<code>0xCC6699</code>。然后，按位AND运算符（<code>&amp;</code>）和按位右移运算符（<code>&gt;&gt;</code>）分解为红色（<code>CC</code>）、绿色（<code>66</code>）和蓝色（<code>99</code>）组件。</p><p>红色分量是通过在数字<code>0xCC6699</code>和<code>0xFF0000</code>之间执行按位AND获得的。<code>0xFF0000</code>中的零有效地“屏蔽”了<code>0xCC6699</code>的第二和第三个字节，导致<code>6699</code>被忽略，并因此留下<code>0xCC0000</code>。</p><p>This number is then shifted 16 places to the right (<code>&gt;&gt; 16</code>). Each pair of characters in a hexadecimal number uses 8 bits, so a move 16 places to the right will convert <code>0xCC0000</code> into <code>0x0000CC</code>. This is the same as <code>0xCC</code>, which has a decimal value of <code>204</code>.</p><p>同样，绿色分量是通过在数字<code>0xCC6699</code>和<code>0x00FF00</code>之间执行按位AND获得的，输出值为<code>0x006600</code>。然后，该输出值向右移动八个位置，给出的值为<code>0x66</code>，小数值为<code>102</code>。</p><p>最后，通过在数字<code>0xCC6699</code>和<code>0x0000FF</code>之间执行按位AND获得蓝色分量，输出值为<code>0x000099</code>。由于<code>0x000099</code>已经等于<code>0x99</code>，其小数值为153，因此使用此值时不会将其向右移动，</p><h4 id="有符号整数的移动行为" tabindex="-1"><a class="header-anchor" href="#有符号整数的移动行为" aria-hidden="true">#</a> 有符号整数的移动行为</h4><p>有符号整数的移位行为比无符号整数更复杂，因为有符号整数在二进制中表示的方式。（为了简单起见，以下示例基于8位有符号整数，但同样的原则适用于任何大小的有符号整数。）</p><p>有符号整数使用它们的第一个位（称为<em>符号位</em>）来指示整数是正数还是负数。<code>0</code>的符号位表示正值，<code>1</code>的符号位表示负数。</p><p>剩余的位（称为<em>值位</em>）存储实际值。正数的存储方式与无符号整数完全相同，从<code>0</code>向上计数。以下是<code>Int8</code>中的位如何查找数字<code>4</code>：</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftSignedFour_2x.png" alt="../_images/bitshiftSignedFour_2x.png"></p><p>符号位为<code>0</code>（意为“正”），七个值位只是数字4，用二进制符号书写。</p><p>然而，负数的存储方式不同。它们通过从<code>2</code>减去<code>n</code>的绝对值来存储，其中<code>n</code>是值位数。八位数字有7个值位，这意味着<code>2</code>到7或<code>128</code>的功率。</p><p>以下是<code>Int8</code>内部的位如何查找数字<code>-4</code>：</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftSignedMinusFour_2x.png" alt="../_images/bitshiftSignedMinusFour_2x.png"></p><p>这一次，符号位为<code>1</code>（意为“负”），七个值位的二进制值为<code>124</code>（即<code>1284</code>）：</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftSignedMinusFourValue_2x.png" alt="../_images/bitshiftSignedMinusFourValue_2x.png"></p><p>这种负数编码被称为<em>二的补数</em>表示。这可能看起来是一种不寻常的表示负数的方式，但它有几个优点。</p><p>首先，您可以添加<code>-1</code>到<code>-4</code>，只需对所有8位（包括符号位）进行标准二进制添加，并在完成后丢弃任何不适合8位的东西：</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftSignedAddition_2x.png" alt="../_images/bitshiftSignedAddition_2x.png"></p><p>其次，两者的补码表示还允许您像正数一样将负数位移到左侧和右侧，并且最终在向左移动的每移动时将其翻倍，或者在向右移动的每移动时将其减半。为了实现这一目标，当有符号整数向右移动时，会使用额外的规则：当您向右移动有符号整数时，请应用与无符号整数相同的规则，但用<em>符号位</em>而不是用零填充左侧的任何空位。</p><p><img src="https://docs.swift.org/swift-book/_images/bitshiftSigned_2x.png" alt="../_images/bitshiftSigned_2x.png"></p><p>此操作确保有符号整数在向右移动后具有相同的符号，并被称为<em>算术移位</em>。</p><p>由于正数和负数的存储方式特殊，将它们中的任何一个移动到右边会使它们接近于零。在这种转变期间保持符号位不变意味着负整数在值接近于零时保持负数。</p><h2 id="溢出运算符" tabindex="-1"><a class="header-anchor" href="#溢出运算符" aria-hidden="true">#</a> 溢出运算符</h2><p>如果您尝试将数字插入无法保存该值的整数常量或变量中，默认情况下，Swift会报告错误，而不是允许创建无效值。当您处理太大或太小的数字时，这种行为会带来额外的安全性。</p><p>例如，<code>Int16</code>整数类型可以保存<code>-32768</code>和<code>32767</code>之间的任何有符号整数。尝试将<code>Int16</code>常量或变量设置为此范围之外的数字会导致错误：</p><ol><li>var potentialOverflow = Int16.max</li><li>// potentialOverflow equals 32767, which is the maximum value an Int16 can hold</li><li>potentialOverflow += 1</li><li>// this causes an error</li></ol><p>当值太大或太小时提供错误处理，使您在编码边界值条件时具有更大的灵活性。</p><p>但是，当您特别希望溢出条件截断可用位数时，您可以选择此行为，而不是触发错误。Swift提供了三个算法<em>溢出运算符</em>，这些<em>运算符</em>选择溢出行为进行整数计算。这些运算符都以安培数（<code>&amp;</code>）开头：</p><ul><li>溢出添加（<code>&amp;+</code>）</li><li>溢出减法（<code>&amp;-</code>）</li><li>溢出乘法（<code>&amp;*</code>）</li></ul><h3 id="价值溢出" tabindex="-1"><a class="header-anchor" href="#价值溢出" aria-hidden="true">#</a> 价值溢出</h3><p>数字可以向正向和负方向溢出。</p><p>以下是一个示例，说明当允许无符号整数使用溢出加法运算符（<code>&amp;+</code>）向正方向溢出时会发生什么：</p><ol><li>var unsignedOverflow = UInt8.max</li><li>// unsignedOverflow equals 255, which is the maximum value a UInt8 can hold</li><li>unsignedOverflow = unsignedOverflow &amp;+ 1</li><li>// unsignedOverflow is now equal to 0</li></ol><p>变量<code>unsignedOverflow</code>初始化为<code>UInt8</code>可以持有的最大值（<code>255</code>，二进制为<code>11111111</code>）。然后使用溢出加法运算符（<code>&amp;+</code>）将其增加<code>1</code>。这使其二进制表示略高于<code>UInt8</code>可以容纳的大小，导致其溢出超出其界限，如下图所示。溢出加法后保持在<code>UInt8</code>范围内的值为<code>00000000</code>或零。</p><p><img src="https://docs.swift.org/swift-book/_images/overflowAddition_2x.png" alt="../_images/overflowAddition_2x.png"></p><p>当允许无符号整数向负方向溢出时，也会发生类似的事情。以下是使用溢出减法运算符（<code>&amp;-</code>）的示例：</p><ol><li>var unsignedOverflow = UInt8.min</li><li>// unsignedOverflow equals 0, which is the minimum value a UInt8 can hold</li><li>unsignedOverflow = unsignedOverflow &amp;- 1</li><li>// unsignedOverflow is now equal to 255</li></ol><p><code>UInt8</code>可以持有的最低值为零，或二进制中的<code>00000000</code>。如果您使用溢出减法运算符（<code>&amp;-</code>）从<code>00000000</code>中减去<code>1</code>，该数字将溢出并包装为<code>11111111</code>，或小数<code>255</code>。</p><p><img src="https://docs.swift.org/swift-book/_images/overflowUnsignedSubtraction_2x.png" alt="../_images/overflowUnsignedSubtraction_2x.png"></p>',81),f={href:"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID34",target:"_blank",rel:"noopener noreferrer"},m=l('<ol><li>var signedOverflow = Int8.min</li><li>// signedOverflow equals -128, which is the minimum value an Int8 can hold</li><li>signedOverflow = signedOverflow &amp;- 1</li><li>// signedOverflow is now equal to 127</li></ol><p><code>Int8</code>可以持有的最低值为<code>-128</code>，或二进制中的<code>10000000</code>。使用溢出运算符从这个二进制数中减去<code>1</code>，二进制值为<code>01111111</code>，这会切换符号位并给出正<code>127</code>，即<code>Int8</code>可以持有的最大正值。</p><p><img src="https://docs.swift.org/swift-book/_images/overflowSignedSubtraction_2x.png" alt="../_images/overflowSignedSubtraction_2x.png"></p><p>对于有符号整数和非有符号整数，正方向的溢出从最大有效整数值回最小值，负方向的溢出从最小值到最大值。</p><h2 id="优先级和关联性" tabindex="-1"><a class="header-anchor" href="#优先级和关联性" aria-hidden="true">#</a> 优先级和关联性</h2><p>运算符<em>优先级</em>赋予一些运算符比其他运算符更高的优先级；这些运算符首先应用。</p><p>运算符<em>结合性</em>定义了具有相同优先级的运算符如何分组在一起——要么从左分组，要么从右分组。把它想象成“他们与左边的表达式相关联想”，或“他们与右边的表达式相关联”。</p><p>在计算复合表达式的顺序时，重要的是要考虑每个算子的优先级和关联性。例如，运算符优先级解释了为什么以下表达式等于17。</p><ol><li>2 + 3 % 4 * 5</li><li>// this equals 17</li></ol><p>如果您严格从左到右阅读，您可能会期望表达式计算如下：</p><ul><li><code>2</code>加<code>3</code>等于<code>5</code></li><li><code>5</code>剩余的<code>4</code>等于<code>1</code></li><li><code>1</code>乘以<code>5</code>等于<code>5</code></li></ul><p>然而，实际答案是17，而不是5。高优先级算子在低优先级运算符之前进行评估。在Swift中，与C一样，余数运算符（<code>%</code>）和乘法运算符（<code>*</code>）的优先级高于加法运算符（<code>+</code>）。因此，在考虑添加之前，它们都会被评估。</p><p>然而，余数和乘法具有<em>相同的</em>优先级。要确定要使用的确切评估顺序，您还需要考虑它们的关联性。剩余和乘法都与左边的表达式相关联。将其视为从左侧开始，在表达式的这些部分周围添加隐式括号：</p><ol><li>2 + ((3 % 4) * 5)</li></ol><p><code>(3 % 4)</code>是3，所以这相当于：</p><ol><li>2 + (3 * 5)</li></ol><p><code>(3 * 5)</code>是15，所以这相当于：</p><ol><li>2 + 15</li></ol><p>这一计算得出了17的最终答案。</p>',19),w={href:"https://developer.apple.com/documentation/swift/operator_declarations",target:"_blank",rel:"noopener noreferrer"},b=l('<p>注意</p><p>Swift的运算符优先级和结合性规则比C和Objective-C更简单、更可预测。然而，这意味着它们与基于C的语言并不完全相同。在将现有代码移植到Swift时，请务必确保运营商交互的行为仍然像您希望的方式。</p><h2 id="运算符方法" tabindex="-1"><a class="header-anchor" href="#运算符方法" aria-hidden="true">#</a> 运算符方法</h2><p>类和结构可以提供现有运算符自己的实现。这被称为<em>使</em>现有运算符<em>超载</em>。</p><p>下面的示例展示了如何为自定义结构实现算术加法运算符（<code>+</code>）。算术加法运算符是一个二进制运算符，因为它在两个目标上运行，而它是一个内缀运算符，因为它出现在这两个目标之间。</p><p>该示例为二维位置向量<code>(x,y)</code>定义了<code>Vector2D</code>结构，然后是将<code>Vector2D</code>结构实例相加的<em>运算符方法</em>的定义：</p><ol><li>struct Vector2D {</li><li>​ var x = 0.0, y = 0.0</li><li>}</li><li></li><li>extension Vector2D {</li><li>​ static func + (left: Vector2D, right: Vector2D) -&gt; Vector2D {</li><li>​ return Vector2D(x: left.x + right.x, y: left.y + right.y)</li><li>​ }</li><li>}</li></ol><p>运算符方法被定义为<code>Vector2D</code>上的类型方法，其方法名称与要重载的运算符（<code>+</code>）匹配。由于加法不是向量基本行为的一部分，因此类型方法在<code>Vector2D</code>的扩展中定义，而不是在<code>Vector2D</code>的主结构声明中定义。由于算术加法运算符是二进制运算符，因此该运算符方法接受<code>Vector2D</code>类型的两个输入参数，并返回一个输出值，也是<code>Vector2D</code>类型的输出值。</p><p>在这个实现中，输入参数被命名为<code>left</code>和<code>right</code>，以表示位于<code>+</code>运算符左侧和右侧的<code>Vector2D</code>实例。该方法返回一个新的<code>Vector2D</code>实例，其<code>x</code>和<code>y</code>属性使用添加到在一起的两个<code>Vector2D</code>实例的<code>x</code>和<code>y</code>属性的总和初始化。</p><p>类型方法可以用作现有<code>Vector2D</code>实例之间的修复运算符：</p><ol><li>let vector = Vector2D(x: 3.0, y: 1.0)</li><li>let anotherVector = Vector2D(x: 2.0, y: 4.0)</li><li>let combinedVector = vector + anotherVector</li><li>// combinedVector is a Vector2D instance with values of (5.0, 5.0)</li></ol><p>此示例将矢量<code>(3.0,1.0)</code>和<code>(2.0,4.0)</code>组合在一起，使矢量<code>(5.0,5.0)</code>如下所示。</p><p><img src="https://docs.swift.org/swift-book/_images/vectorAddition_2x.png" alt="../_images/vectorAddition_2x.png"></p><h3 id="前缀和后缀运算符" tabindex="-1"><a class="header-anchor" href="#前缀和后缀运算符" aria-hidden="true">#</a> 前缀和后缀运算符</h3><p>上面显示的示例演示了二进制修复运算符的自定义实现。类和结构还可以提供标准<em>一元运算符</em>的实现。单一运算符在单个目标上运行。如果它们在目标（如<code>-a</code>）之前，它们是<em>前缀</em>，如果他们遵循目标（如<code>b!</code>则为<em>后缀</em>运算符。</p><p>在声明运算符方法时，您可以通过在<code>func</code>关键字之前写入<code>prefix</code>或<code>postfix</code>修饰符来实现前缀或后缀一元运算符：</p><ol><li>extension Vector2D {</li><li>​ static prefix func - (vector: Vector2D) -&gt; Vector2D {</li><li>​ return Vector2D(x: -vector.x, y: -vector.y)</li><li>​ }</li><li>}</li></ol><p>上面的示例实现了<code>Vector2D</code>实例的一元减运算符（<code>-a</code>）。一元减算符是前缀运算符，因此这种方法必须用<code>prefix</code>修饰符限定。</p><p>对于简单的数值，一元减算符将正数转换为负等价数，反之亦然。<code>Vector2D</code>实例的相应实现对<code>x</code>和<code>y</code>属性执行此操作：</p><ol><li>let positive = Vector2D(x: 3.0, y: 4.0)</li><li>let negative = -positive</li><li>// negative is a Vector2D instance with values of (-3.0, -4.0)</li><li>let alsoPositive = -negative</li><li>// alsoPositive is a Vector2D instance with values of (3.0, 4.0)</li></ol><h3 id="复合分配运算符" tabindex="-1"><a class="header-anchor" href="#复合分配运算符" aria-hidden="true">#</a> 复合分配运算符</h3><p><em>复合赋值运算符</em>将赋值（=）与另一个运算相结合。例如，加法赋值运算符（<code>+=</code>将加法和赋值组合成一个运算。您可以将复合赋值运算符的左输入参数类型标记为<code>inout</code>，因为参数的值将直接从运算符方法中修改。</p><p>以下示例实现了<code>Vector2D</code>实例的加法赋值运算符方法：</p><ol><li>extension Vector2D {</li><li>​ static func += (left: inout Vector2D, right: Vector2D) {</li><li>​ left = left + right</li><li>​ }</li><li>}</li></ol><p>由于添加运算符是早些时候定义的，因此您无需在这里重新实现添加过程。相反，加法赋值运算符方法利用了现有的加法运算符方法，并使左值设置为左值加右值：</p><ol><li>var original = Vector2D(x: 1.0, y: 2.0)</li><li>let vectorToAdd = Vector2D(x: 3.0, y: 4.0)</li><li>original += vectorToAdd</li><li>// original now has values of (4.0, 6.0)</li></ol><p>注意</p><p>It isn’t possible to overload the default assignment operator (<code>=</code>). Only the compound assignment operators can be overloaded. Similarly, the ternary conditional operator (<code>a ? b : c</code>) can’t be overloaded.</p><h3 id="等效运算符" tabindex="-1"><a class="header-anchor" href="#等效运算符" aria-hidden="true">#</a> 等效运算符</h3><p>默认情况下，自定义类和结构没有<em>等价运算符</em>的实现，称为<em>等于</em>运算符（<code>==</code>，<em>不等于</em>运算符（<code>!=</code>）。您通常实现<code>==</code>运算符，并使用标准库的默认实现<code>!=</code>否定<code>==</code>运算符结果的运算符。有两种方法可以实现<code>==</code>运算符：您可以自己实现它，或者对于许多类型，您可以让Swift为您合成实现。在这两种情况下，您都会添加与标准库的<code>Equatable</code>协议的一致性。</p><p>您以与实现其他修复运算符相同的方式提供<code>==</code>运算符的实现：</p><ol><li>extension Vector2D: Equatable {</li><li>​ static func == (left: Vector2D, right: Vector2D) -&gt; Bool {</li><li>​ return (left.x == right.x) &amp;&amp; (left.y == right.y)</li><li>​ }</li><li>}</li></ol><p>上面的示例实现了<code>==</code>运算符来检查两个<code>Vector2D</code>实例是否具有等效值。在<code>Vector2D</code>的上下文中，将“相等”视为“这两个实例具有相同的<code>x</code>值和<code>y</code>值”是有道理的，因此这是运算符实现使用的逻辑。</p><p>您现在可以使用此运算符检查两个<code>Vector2D</code>实例是否等效：</p><ol><li>let twoThree = Vector2D(x: 2.0, y: 3.0)</li><li>let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)</li><li>if twoThree == anotherTwoThree {</li><li>​ print(&quot;These two vectors are equivalent.&quot;)</li><li>}</li><li>// Prints &quot;These two vectors are equivalent.&quot;</li></ol>',35),x={href:"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID627",target:"_blank",rel:"noopener noreferrer"},_=o("h2",{id:"自定义操作员",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#自定义操作员","aria-hidden":"true"},"#"),e(" 自定义操作员")],-1),D=o("em",null,"自定义",-1),v={href:"https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418",target:"_blank",rel:"noopener noreferrer"},S=l('<p>新运算符使用<code>operator</code>关键字在全局级别声明，并标有<code>prefix</code>、<code>infix</code>或<code>postfix</code>修饰符：</p><ol><li>prefix operator +++</li></ol><p>上面的示例定义了一个名为<code>+++</code>的新前缀运算符。此运算符在Swift中没有现有含义，因此在使用<code>Vector2D</code>实例的特定上下文中，它在下面被赋予了自己的自定义含义。在本例中，<code>+++</code>被视为一个新的“前缀加倍”运算符。它通过使用前面定义的加法赋值运算符将向量添加到自身，将<code>Vector2D</code>实例的<code>x</code>和<code>y</code>值翻倍。要实现<code>+++</code>运算符，请在<code>Vector2D</code>中添加一个名为<code>+++</code>的类型方法，如下所示：</p><ol><li>extension Vector2D {</li><li>​ static prefix func +++ (vector: inout Vector2D) -&gt; Vector2D {</li><li>​ vector += vector</li><li>​ return vector</li><li>​ }</li><li>}</li><li></li><li>var toBeDoubled = Vector2D(x: 1.0, y: 4.0)</li><li>let afterDoubling = +++toBeDoubled</li><li>// toBeDoubled now has values of (2.0, 8.0)</li><li>// afterDoubling also has values of (2.0, 8.0)</li></ol><h3 id="自定义infix运算符的优先级" tabindex="-1"><a class="header-anchor" href="#自定义infix运算符的优先级" aria-hidden="true">#</a> 自定义Infix运算符的优先级</h3>',5),V={href:"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID41",target:"_blank",rel:"noopener noreferrer"},B=l("<p>没有显式放置在优先级组中的自定义内缀运算符将获得一个默认优先级组，其优先级直接高于三元条件运算符的优先级。</p><p>以下示例定义了一个名为<code>+-</code>的新自定义内缀运算符，该运算符属于优先级组 <code>AdditionPrecedence</code>：</p><ol><li>infix operator +-: AdditionPrecedence</li><li>extension Vector2D {</li><li>​ static func +- (left: Vector2D, right: Vector2D) -&gt; Vector2D {</li><li>​ return Vector2D(x: left.x + right.x, y: left.y - right.y)</li><li>​ }</li><li>}</li><li>let firstVector = Vector2D(x: 1.0, y: 2.0)</li><li>let secondVector = Vector2D(x: 3.0, y: 4.0)</li><li>let plusMinusVector = firstVector +- secondVector</li><li>// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)</li></ol>",3),q=o("code",null,"x",-1),k=o("code",null,"y",-1),C=o("code",null,"+",-1),O=o("code",null,"-",-1),I={href:"https://developer.apple.com/documentation/swift/operator_declarations",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380",target:"_blank",rel:"noopener noreferrer"},A=l('<p>注意</p><p>在定义前缀或后缀运算符时，您不会指定优先级。但是，如果您同时将前缀和后缀运算符应用于同一操作数，则首先应用后缀运算符。</p><h2 id="结果建设者" tabindex="-1"><a class="header-anchor" href="#结果建设者" aria-hidden="true">#</a> 结果建设者</h2><p><em>结果生成器</em>是您定义的一种类型，它以自然、声明的方式添加用于创建嵌套数据（如列表或树）的语法。使用结果构建器的代码可以包括普通的Swift语法，例如<code>if</code>和<code>for</code>，以处理条件或重复的数据。</p><p>以下代码定义了使用星星和文本在单行上绘制的几种类型。</p><ol><li>protocol Drawable {</li><li>​ func draw() -&gt; String</li><li>}</li><li>struct Line: Drawable {</li><li>​ var elements: [Drawable]</li><li>​ func draw() -&gt; String {</li><li>​ return elements.map { $0.draw() }.joined(separator: &quot;&quot;)</li><li>​ }</li><li>}</li><li>struct Text: Drawable {</li><li>​ var content: String</li><li>​ init(_ content: String) { self.content = content }</li><li>​ func draw() -&gt; String { return content }</li><li>}</li><li>struct Space: Drawable {</li><li>​ func draw() -&gt; String { return &quot; &quot; }</li><li>}</li><li>struct Stars: Drawable {</li><li>​ var length: Int</li><li>​ func draw() -&gt; String { return String(repeating: &quot;*&quot;, count: length) }</li><li>}</li><li>struct AllCaps: Drawable {</li><li>​ var content: Drawable</li><li>​ func draw() -&gt; String { return content.draw().uppercased() }</li><li>}</li></ol><p><code>Drawable</code>协议定义了对可以绘制的东西的要求，例如线条或形状：类型必须实现<code>draw()</code>方法。<code>Line</code>结构代表单线绘图，它为大多数绘图的顶层容器服务。要绘制一条<code>Line</code>，结构在每行的组件上调用<code>draw()</code>，然后将生成的字符串连接成单个字符串。<code>Text</code>结构包裹字符串使其成为绘图的一部分。<code>AllCaps</code>结构包装和修改另一张绘图，将绘图中的任何文本转换为大写。</p><p>可以通过调用初始化器来使用这些类型绘制绘图：</p><ol><li>let name: String? = &quot;Ravi Patel&quot;</li><li>let manualDrawing = Line(elements: [</li><li>​ Stars(length: 3),</li><li>​ Text(&quot;Hello&quot;),</li><li>​ Space(),</li><li>​ AllCaps(content: Text((name ?? &quot;World&quot;) + &quot;!&quot;)),</li><li>​ Stars(length: 2),</li><li>​ ])</li><li>print(manualDrawing.draw())</li><li>// Prints &quot;*<strong>Hello RAVI PATEL!</strong>&quot;</li></ol><p>这个代码有效，但有点尴尬。<code>AllCaps</code>之后的深嵌套括号很难阅读。当<code>name</code>为<code>nil</code>使用“世界”的后备逻辑必须使用<code>??</code>完成操作员，如果更复杂，那就很难了。如果您需要包含开关或循环来构建部分绘图，则无法做到这一点。结果生成器允许您像这样重写代码，使其看起来像普通的Swift代码。</p><p>要定义结果构建器，请在类型声明上写入<code>@resultBuilder</code>属性。例如，此代码定义了一个名为<code>DrawingBuilder</code>的结果构建器，它允许您使用声明语法来描述绘图：</p><ol><li>@resultBuilder</li><li>struct DrawingBuilder {</li><li>​ static func buildBlock(_ components: Drawable...) -&gt; Drawable {</li><li>​ return Line(elements: components)</li><li>​ }</li><li>​ static func buildEither(first: Drawable) -&gt; Drawable {</li><li>​ return first</li><li>​ }</li><li>​ static func buildEither(second: Drawable) -&gt; Drawable {</li><li>​ return second</li><li>​ }</li><li>}</li></ol><p><code>DrawingBuilder</code>结构定义了实现结果构建器语法部分的三种方法。<code>buildBlock(_:)</code>方法增加了对在代码块中写入一系列行的支持。它将该块中的组件组合成一条<code>Line</code>。ThebuildEither<code>buildEither(first:)</code>和<code>buildEither(second:)</code>方法增加了对<code>if</code>-<code>else</code>的支持。</p><p>您可以将<code>@DrawingBuilder</code>属性应用于函数的参数，该参数将传递给函数的闭包转换为结果构建器从该闭包创建的值。例如：</p><ol><li>func draw(@DrawingBuilder content: () -&gt; Drawable) -&gt; Drawable {</li><li>​ return content()</li><li>}</li><li>func caps(@DrawingBuilder content: () -&gt; Drawable) -&gt; Drawable {</li><li>​ return AllCaps(content: content())</li><li>}</li><li></li><li>func makeGreeting(for name: String? = nil) -&gt; Drawable {</li><li>​ let greeting = draw {</li><li>​ Stars(length: 3)</li><li>​ Text(&quot;Hello&quot;)</li><li>​ Space()</li><li>​ caps {</li><li>​ if let name = name {</li><li>​ Text(name + &quot;!&quot;)</li><li>​ } else {</li><li>​ Text(&quot;World!&quot;)</li><li>​ }</li><li>​ }</li><li>​ Stars(length: 2)</li><li>​ }</li><li>​ return greeting</li><li>}</li><li>let genericGreeting = makeGreeting()</li><li>print(genericGreeting.draw())</li><li>// Prints &quot;*<strong>Hello WORLD!</strong>&quot;</li><li></li><li>let personalGreeting = makeGreeting(for: &quot;Ravi Patel&quot;)</li><li>print(personalGreeting.draw())</li><li>// Prints &quot;*<strong>Hello RAVI PATEL!</strong>&quot;</li></ol><p><code>makeGreeting(for:)</code>函数使用<code>name</code>参数，并用它来绘制个性化的问候语。<code>draw(_:)</code>和<code>caps(_:)</code>函数都以单个闭包作为参数，该闭包标有<code>@DrawingBuilder</code>属性。当您调用这些函数时，您使用<code>DrawingBuilder</code>定义的特殊语法。Swift将绘图的声明性描述转换为对<code>DrawingBuilder</code>上方法的一系列调用，以建立作为函数参数传递的值。例如，Swift将该示例中的对<code>caps(_:)</code>调用转换为以下代码：</p><ol><li>let capsDrawing = caps {</li><li>​ let partialDrawing: Drawable</li><li>​ if let name = name {</li><li>​ let text = Text(name + &quot;!&quot;)</li><li>​ partialDrawing = DrawingBuilder.buildEither(first: text)</li><li>​ } else {</li><li>​ let text = Text(&quot;World!&quot;)</li><li>​ partialDrawing = DrawingBuilder.buildEither(second: text)</li><li>​ }</li><li>​ return partialDrawing</li><li>}</li></ol><p>Swift将<code>if</code>-<code>else</code>块转换为对<code>buildEither(first:)</code>和<code>buildEither(second:)</code>方法的调用。虽然您不会在自己的代码中调用这些方法，但当您使用<code>DrawingBuilder</code>语法时，显示转换结果可以更容易地查看Swift如何转换代码。</p><p>要在特殊绘图语法中添加<code>for</code>循环写入的支持，请添加<code>buildArray(_:)</code>方法。</p><ol><li>extension DrawingBuilder {</li><li>​ static func buildArray(_ components: [Drawable]) -&gt; Drawable {</li><li>​ return Line(elements: components)</li><li>​ }</li><li>}</li><li>let manyStars = draw {</li><li>​ Text(&quot;Stars:&quot;)</li><li>​ for length in 1...3 {</li><li>​ Space()</li><li>​ Stars(length: length)</li><li>​ }</li><li>}</li></ol><p>在上面的代码中，<code>for</code>循环创建一个绘图数组，<code>buildArray(_:)</code>方法将该数组转换为<code>Line</code>。</p>',21),T={href:"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#ID633",target:"_blank",rel:"noopener noreferrer"};function U(F,L){const i=d("ExternalLinkIcon");return r(),a("div",null,[s,p,o("p",null,[o("a",h,[e("除了基本运算符"),t(i)]),e("中描述"),o("a",g,[e("的"),t(i)]),e("运算符外，Swift还提供了几个高级运算符来执行更复杂的值操作。这些包括您将熟悉的C和Objective-C的所有位和位移位运算符。")]),u,o("p",null,[e("签名整数也会发生溢出。有符号整数的所有加法和减法都以按位方式执行，符号位包含在数字中添加或减去中，如"),o("a",f,[e("按位左移和右移运算符"),t(i)]),e("中所述。")]),m,o("p",null,[e("有关Swift标准库提供的运算符的信息，包括运算符优先级组和关联性设置的完整列表，请参阅"),o("a",w,[e("运算符声明"),t(i)]),e("。")]),b,o("p",null,[e("在许多简单的情况下，您可以要求Swift为您提供等效运算符的合成实现，如《"),o("a",x,[e("采用使用合成实现的协议》"),t(i)]),e("中所述。")]),_,o("p",null,[e("除了Swift提供的标准运算符外，您还可以声明和实现自己的"),D,e("运算符。有关可用于定义自定义运算符的字符列表，请参阅"),o("a",v,[e("运算符"),t(i)]),e("。")]),S,o("p",null,[e("每个自定义修复运算符都属于优先级组。优先级组指定运算符相对于其他内缀运算符的优先级，以及运算符的关联性。有关这些特征如何影响内缀运算符与其他内缀运算符的交互的说明，请参阅"),o("a",V,[e("优先级和关联性"),t(i)]),e("。")]),B,o("p",null,[e("这个运算符将两个向量的"),q,e("值加在一起，并从第一个向量中减去第二个向量的"),k,e("值。因为它本质上是一个“加法”运算符，所以它被赋予了与"),C,e("和"),O,e("等加性内缀运算符相同的优先级组。有关Swift标准库提供的运算符的信息，包括运算符优先级组和关联性设置的完整列表，请参阅"),o("a",I,[e("运算符声明"),t(i)]),e("。有关优先级组的更多信息，以及查看定义您自己的运算符和优先级组的语法，请参阅"),o("a",y,[e("运算符声明"),t(i)]),e("。")]),A,o("p",null,[e("有关Swift如何将构建器语法转换为对构建器类型方法的调用的完整列表，请参阅"),o("a",T,[e("结果构建器"),t(i)]),e("。")])])}const E=c(n,[["render",U],["__file","37.swift-advanced-operators.html.vue"]]);export{E as default};
