import{_ as s,r as t,o,c as d,a as n,b as e,d as l,e as i}from"./app.4659d0e0.js";const p={},r=i(`<h1 id="swift基础-不透明的类型" tabindex="-1"><a class="header-anchor" href="#swift基础-不透明的类型" aria-hidden="true">#</a> Swift基础 - 不透明的类型</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html</p><p>具有不透明返回类型的函数或方法隐藏其返回值的类型信息。返回值不是提供具体类型作为函数的返回类型，而是根据其支持的协议来描述。隐藏类型信息在调用模块的模块和代码之间的边界上非常有用，因为返回值的底层类型可以保持私密性。与返回类型为协议类型的值不同，不透明类型保留类型标识——编译器可以访问类型信息，但模块的客户端不能访问。</p><h2 id="不透明类型解决的问题" tabindex="-1"><a class="header-anchor" href="#不透明类型解决的问题" aria-hidden="true">#</a> 不透明类型解决的问题</h2><p>例如，假设您正在编写一个绘制ASCII艺术形状的模块。ASCII艺术形状的基本特征是<code>draw()</code>函数，该函数返回该形状的字符串表示形式，您可以将其用作<code>Shape</code>协议的要求：</p><ol><li>protocol Shape {</li><li>​ func draw() -&gt; String</li><li>}</li><li></li><li>struct Triangle: Shape {</li><li>​ var size: Int</li><li>​ func draw() -&gt; String {</li><li>​ var result: [String] = []</li><li>​ for length in 1...size {</li><li>​ result.append(String(repeating: &quot;*&quot;, count: length))</li><li>​ }</li><li>​ return result.joined(separator: &quot;\\n&quot;)</li><li>​ }</li><li>}</li><li>let smallTriangle = Triangle(size: 3)</li><li>print(smallTriangle.draw())</li><li>// *</li><li>// **</li><li>// ***</li></ol><p>您可以使用泛型来实现垂直翻转形状等操作，如下代码所示。然而，这种方法有一个重要的局限性：翻转的结果暴露了用于创建它的确切通用类型。</p><ol><li>struct FlippedShape&lt;T: Shape&gt;: Shape {</li><li>​ var shape: T</li><li>​ func draw() -&gt; String {</li><li>​ let lines = shape.draw().split(separator: &quot;\\n&quot;)</li><li>​ return lines.reversed().joined(separator: &quot;\\n&quot;)</li><li>​ }</li><li>}</li><li>let flippedTriangle = FlippedShape(shape: smallTriangle)</li><li>print(flippedTriangle.draw())</li><li>// ***</li><li>// **</li><li>// *</li></ol><p>This approach to defining a <code>JoinedShape&lt;T: Shape, U: Shape&gt;</code> structure that joins two shapes together vertically, like the code below shows, results in types like <code>JoinedShape&lt;FlippedShape&lt;Triangle&gt;, Triangle&gt;</code> from joining a flipped triangle with another triangle.</p><ol><li>struct JoinedShape&lt;T: Shape, U: Shape&gt;: Shape {</li><li>​ var top: T</li><li>​ var bottom: U</li><li>​ func draw() -&gt; String {</li><li>​ return top.draw() + &quot;\\n&quot; + bottom.draw()</li><li>​ }</li><li>}</li><li>let joinedTriangles = JoinedShape(top: smallTriangle, bottom: flippedTriangle)</li><li>print(joinedTriangles.draw())</li><li>// *</li><li>// **</li><li>// ***</li><li>// ***</li><li>// **</li><li>// *</li></ol><p>公开有关创建形状的详细信息，可以让不打算属于ASCII艺术模块公共界面的类型泄露出去，因为需要声明完整的返回类型。模块内的代码可以以各种方式构建相同的形状，模块外使用该形状的其他代码不应考虑有关转换列表的实现细节。<code>JoinedShape</code>和<code>FlippedShape</code>等包装类型对模块的用户无关紧要，它们不应该可见。该模块的公共接口包括连接和翻转形状等操作，这些操作返回另一个<code>Shape</code>值。</p><h2 id="返回不透明类型" tabindex="-1"><a class="header-anchor" href="#返回不透明类型" aria-hidden="true">#</a> 返回不透明类型</h2><p>你可以把不透明的类型想象成通用类型的反面。通用类型允许调用函数的代码为该函数的参数选择类型，并以从函数实现抽象出来的方式返回值。例如，以下代码中的函数返回的类型取决于其调用者：</p><p><code>func max&lt;T&gt;(_ x: T, _ y: T) -&gt; T where T: Comparable { ... }</code></p><p>调用<code>max(_:_:)</code>的代码为<code>x</code>和<code>y</code>选择值，这些值的类型决定了<code>T</code>的具体类型。调用代码可以使用任何符合<code>Comparable</code>协议的类型。函数中的代码以一般方式编写，因此它可以处理调用者提供的任何类型。<code>max(_:_:)</code>的实现仅使用所有<code>Comparable</code>类型共享的功能。</p><p>对于具有不透明返回类型的函数，这些角色是反向的。不透明类型允许函数实现以一种从调用函数的代码抽象出来的方式选择它返回的值的类型。例如，以下示例中的函数返回梯形而不暴露该形状的底层类型。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">Square</span><span class="token punctuation">:</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
​    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">Int</span>
​    <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
​        <span class="token keyword">let</span> line <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;*&quot;</span></span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> size<span class="token punctuation">)</span>
​        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> line<span class="token punctuation">,</span> count<span class="token punctuation">:</span> size<span class="token punctuation">)</span>
​        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span>
​    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>func makeTrapezoid() -&gt; some Shape {</li><li>​ let top = Triangle(size: 2)</li><li>​ let middle = Square(size: 2)</li><li>​ let bottom = FlippedShape(shape: top)</li><li>​ let trapezoid = JoinedShape(</li><li>​ top: top,</li><li>​ bottom: JoinedShape(top: middle, bottom: bottom)</li><li>​ )</li><li>​ return trapezoid</li><li>}</li><li>let trapezoid = makeTrapezoid()</li><li>print(trapezoid.draw())</li><li>// *</li><li>// **</li><li>// **</li><li>// **</li><li>// **</li><li>// *</li></ol><p>本示例中的<code>makeTrapezoid()</code>函数将其返回类型声明为<code>someShape</code>；因此，该函数返回符合<code>Shape</code>协议的给定类型的值，而不指定任何特定的具体类型。以这种方式编写<code>makeTrapezoid()</code>可以表达其公共接口的基本方面——它返回的值是一个形状——而无需制作形状由其公共接口的一部分制成的特定类型。这个实现使用两个三角形和一个正方形，但可以重写该函数，以各种其他方式绘制梯形，而不会改变其返回类型。</p><p>此示例突出了不透明的返回类型与泛型类型相反的方式。<code>makeTrapezoid()</code>内部的代码可以返回它需要的任何类型，只要该类型符合<code>Shape</code>协议，就像调用通用函数一样。调用函数的代码需要以一般方式编写，例如实现泛型函数，以便它可以与<code>makeTrapezoid()</code>返回的任何<code>Shape</code>值一起工作。</p><p>您还可以将不透明的返回类型与泛型组合在一起。以下代码中的函数都返回符合<code>Shape</code>协议的某种类型的值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func flip&lt;T: Shape&gt;(_ shape: T) -&gt; some Shape {
2. ​    return FlippedShape(shape: shape)
3. }
4. func join&lt;T: Shape, U: Shape&gt;(_ top: T, _ bottom: U) -&gt; some Shape {
5. ​    JoinedShape(top: top, bottom: bottom)
6. }
7. 
8. let opaqueJoinedTriangles = join(smallTriangle, flip(smallTriangle))
9. print(opaqueJoinedTriangles.draw())
10. // *
11. // **
12. // ***
13. // ***
14. // **
15. // *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),c=n("code",null,"opaqueJoinedTriangles",-1),u={href:"https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html#ID613",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"joinedTriangles",-1),m=n("code",null,"flip(_:)",-1),h=n("code",null,"join(_:_:)",-1),g=n("code",null,"FlippedShape",-1),b=n("code",null,"JoinedShape",-1),S=i(`<p>如果具有不透明返回类型的函数从多个地方返回，则所有可能的返回值必须具有相同的类型。对于泛型函数，该返回类型可以使用函数的泛型类型参数，但它必须仍然是单一类型。例如，以下是形状翻转函数的<em>无效</em>版本，其中包括正方形的特殊情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func invalidFlip&lt;T: Shape&gt;(_ shape: T) -&gt; some Shape {
2. ​    if shape is Square {
3. ​        return shape // Error: return types don&#39;t match
4. ​    }
5. ​    return FlippedShape(shape: shape) // Error: return types don&#39;t match
6. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您使用<code>Square</code>调用此函数，它将返回<code>Square</code>；否则，它将返回aFlippedShape。这违反了仅返回一种类型的值的要求，并使<code>invalidFlip(_:)</code>代码无效。修复<code>invalidFlip(_:)</code>的一种方法是将正方形的特殊情况移动到<code>FlippedShape</code>的实现中，这使得此函数始终返回aFlippedShape值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. struct FlippedShape&lt;T: Shape&gt;: Shape {
2. ​    var shape: T
3. ​    func draw() -&gt; String {
4. ​        if shape is Square {
5. ​            return shape.draw()
6. ​        }
7. ​        let lines = shape.draw().split(separator: &quot;\\n&quot;)
8. ​        return lines.reversed().joined(separator: &quot;\\n&quot;)
9. ​    }
10. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>始终返回单个类型的要求并不妨碍您在不透明的返回类型中使用泛型。以下是将其类型参数集成到其返回的值的基础类型的函数示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func \`repeat\`&lt;T: Shape&gt;(shape: T, count: Int) -&gt; some Collection {
2. ​    return Array&lt;T&gt;(repeating: shape, count: count)
3. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，返回值的底层类型因<code>T</code>而异：无论传递什么形状，<code>repeat(shape:count:)</code>创建并返回该形状的数组。然而，返回值始终具有相同的<code>[T]</code>底层类型，因此它遵循了具有不透明返回类型的函数必须仅返回单个类型的值的要求。</p><p>不透明类型和协议类型之间的差异</p><p>返回不透明类型看起来与使用协议类型作为函数的返回类型非常相似，但这两种返回类型在是否保留类型标识方面有所不同。不透明类型是指一种特定类型，尽管函数的调用者无法看到哪种类型；协议类型可以引用任何符合协议的类型。一般来说，协议类型使您更灵活地了解它们存储的值的底层类型，不透明类型允许您对这些底层类型做出更有力的保证。</p><p>例如，这是一个<code>flip(_:)</code>版本，它使用协议类型作为其返回类型，而不是不透明的返回类型：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func protoFlip&lt;T: Shape&gt;(_ shape: T) -&gt; Shape {
2. ​    return FlippedShape(shape: shape)
3. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此版本的<code>protoFlip(_:)</code>与<code>flip(_:)</code>具有相同的主体，并且它总是返回相同类型的值。与<code>flip(_:)</code>，<code>protoFlip(_:)</code>返回的值不需要始终具有相同的类型——它只需要符合<code>Shape</code>协议。换句话说，<code>protoFlip(_:)</code>与其调用者签订的API合同比<code>flip(_:)</code>的API合同要宽松得多。它保留了返回多种类型值的灵活性：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func protoFlip&lt;T: Shape&gt;(_ shape: T) -&gt; Shape {
2. ​    if shape is Square {
3. ​        return shape
4. ​    }
5. 
6. ​    return FlippedShape(shape: shape)
7. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的修订版本返回<code>Square</code>的实例或<code>FlippedShape</code>的实例，具体取决于传递的形状。此函数返回的两个翻转形状可能具有完全不同的类型。当翻转相同形状的多个实例时，此函数的其他有效版本可以返回不同类型的值。来自<code>protoFlip(_:)</code>不太具体的返回类型信息意味着许多依赖类型信息的操作在返回的值上不可用。例如，无法编写<code>==</code>运算符来比较此函数返回的结果。</p><ol><li>let protoFlippedTriangle = protoFlip(smallTriangle)</li><li>let sameThing = protoFlip(smallTriangle)</li><li>protoFlippedTriangle == sameThing // Error</li></ol><p>示例最后一行的错误有几个原因。迫在眉睫的问题是，<code>Shape</code>不包含<code>==</code>运算符作为其协议要求的一部分。如果您尝试添加一个，您将遇到的下一个问题是<code>==</code>运算符需要知道其左手和右手参数的类型。这种运算符通常接受typeSelf的参数，匹配采用协议的任何具体类型，但在协议中添加<code>Self</code>要求不允许将协议用作类型时发生的类型擦除。</p><p>使用协议类型作为函数的返回类型使您可以灵活地返回任何符合协议的类型。然而，这种灵活性的成本是，一些操作无法对返回的值进行。该示例显示了<code>==</code>运算符如何不可用——这取决于使用协议类型无法保留的特定类型信息。</p><p>这种方法的另一个问题是形状转换不会嵌套。翻转三角形的结果是类型为<code>Shape</code>的值，<code>protoFlip(_:)</code>函数采用符合<code>Shape</code>协议的某种类型的参数。然而，协议类型的值不符合该协议；<code>protoFlip(_:)</code>返回的值不符合<code>Shape</code>。这意味着像<code>protoFlip(protoFlip(smallTriange))</code>这样的应用多个转换的代码无效，因为翻转的形状不是toprotoFlip<code>protoFlip(_:)</code>的有效参数。</p>`,18),k={href:"https://docs.swift.org/swift-book/LanguageGuide/Generics.html",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"Container",-1),f=i(`<ol><li>protocol Container {</li><li>​ associatedtype Item</li><li>​ var count: Int { get }</li><li>​ subscript(i: Int) -&gt; Item { get }</li><li>}</li><li>extension Array: Container { }</li></ol><p>您不能将<code>Container</code>用作函数的返回类型，因为该协议具有关联类型。您也不能在泛型返回类型中将其用作约束，因为函数体外部没有足够的信息来推断泛型类型需要是什么。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. // Error: Protocol with associated types can&#39;t be used as a return type.
2. func makeProtocolContainer&lt;T&gt;(item: T) -&gt; Container {
3. ​    return [item]
4. }
5. 
6. // Error: Not enough information to infer C.
7. func makeProtocolContainer&lt;T, C: Container&gt;(item: T) -&gt; C {
8. ​    return [item]
9. }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用不透明类型<code>someContainer</code>作为返回类型表示所需的API合同——该函数返回容器，但拒绝指定容器的类型：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. func makeOpaqueContainer&lt;T&gt;(item: T) -&gt; some Container {
2. ​    return [item]
3. }
4. let opaqueContainer = makeOpaqueContainer(item: 12)
5. let twelve = opaqueContainer[0]
6. print(type(of: twelve))
7. // Prints &quot;Int&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>twelve</code>的类型被推断为<code>Int</code>，这说明了类型推断适用于不透明类型的事实。在<code>makeOpaqueContainer(item:)</code>的实现中，不透明容器的基础类型是<code>[T]</code>在这种情况下，<code>T</code>是<code>Int</code>，因此返回值是整数数数组，并且推断出<code>Item</code>关联的类型为<code>Int</code>。<code>Container</code>上的下标返回<code>Item</code>，这意味着<code>twelve</code>的类型也被推断为<code>Int</code>。</p>`,6);function _(w,x){const a=t("ExternalLinkIcon");return o(),d("div",null,[r,n("p",null,[e("本示例中"),c,e("的值与本章前面"),n("a",u,[e("不透明类型解决的问题"),l(a)]),e("部分中的泛型示例中的"),v,e("相同。然而，与该示例中的值不同，"),m,e("和"),h,e("将通用形状操作返回的底层类型包装在不透明的返回类型中，这防止这些类型可见。这两个函数都是通用的，因为它们依赖的类型是通用的，函数的类型参数传递"),g,e("和"),b,e("所需的类型信息。")]),S,n("p",null,[e("相比之下，不透明类型保留了底层类型的身份。Swift可以推断关联类型，这允许您在协议类型不能用作返回值的地方使用不透明的返回值。例如，这是来自"),n("a",k,[e("Generics"),l(a)]),e("的"),T,e("协议的一个版本：")]),f])}const F=s(p,[["render",_],["__file","33.swift-opaque-types.html.vue"]]);export{F as default};
