import{_ as o,r as p,o as c,c as i,a as s,b as n,d as e,e as t}from"./app.4659d0e0.js";const l={},u=s("h1",{id:"swift基础-嵌套",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#swift基础-嵌套","aria-hidden":"true"},"#"),n(" Swift基础 - 嵌套")],-1),r=s("p",null,"翻译自：https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID102",-1),d=s("p",null,[s("em",null,"嵌套"),n("是自包含的功能块，可以在代码中传递和使用。Swift中的闭包类似于C和Objective-C中的块以及其他编程语言中的lambdas。")],-1),k=s("p",null,[n("闭包可以从定义常量和变量的上下文中捕获和存储对任何常量和变量的引用。这被称为"),s("em",null,"关闭"),n("这些常量和变量。Swift为您处理捕获的所有内存管理。")],-1),m=s("p",null,"注意",-1),v={href:"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID103",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html",target:"_blank",rel:"noopener noreferrer"},b=t('<ul><li>全局函数是具有名称且不捕获任何值的闭包。</li><li>嵌套函数是具有名称的闭包，可以从其封闭函数中捕获值。</li><li>闭包表达式是用轻量级语法编写的未命名闭包，可以从其周围上下文中捕获值。</li></ul><p>Swift的闭包表达式具有干净、清晰的风格，优化鼓励在常见场景中进行简短、无杂乱的语法。这些优化包括：</p><ul><li>从上下文推断参数和返回值类型</li><li>来自单表达式闭包的隐式回报</li><li>速记参数名称</li><li>尾随闭包语法</li></ul><h2 id="嵌套表达式" tabindex="-1"><a class="header-anchor" href="#嵌套表达式" aria-hidden="true">#</a> 嵌套表达式</h2>',4),f={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID178",target:"_blank",rel:"noopener noreferrer"},w=t(`<p><em>闭包表达式</em>是一种以简短、聚焦的语法编写内联闭包的方法。闭包表达式提供了几种语法优化，用于以缩短的形式编写闭包，而不会失去清晰度或意图。下面的闭包表达式示例通过在几次迭代中完善<code>sorted(by:)</code>方法的单个示例来说明这些优化，每个迭代都以更简洁的方式表达相同的功能。</p><h3 id="排序方法" tabindex="-1"><a class="header-anchor" href="#排序方法" aria-hidden="true">#</a> 排序方法</h3><p>Swift的标准库提供了一个名为<code>sorted(by:)</code>的方法，该方法根据您提供的排序闭包的输出对已知类型的值数组进行排序。完成排序过程后，<code>sorted(by:)</code>方法返回与旧数组类型和大小相同的新数组，其元素按正确的排序顺序排列。原始数组不会被<code>sorted(by:)</code>方法修改。</p><p>下面的闭包表达式示例使用<code>sorted(by:)</code>方法按反向字母顺序对<code>String</code>值数组进行排序。以下是要排序的初始数组：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Chris&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ewa&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Barry&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Daniella&quot;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>sorted(by:)</code>方法接受一个闭包，该闭包接受两个与数组内容相同的类型参数，并返回一个<code>Bool</code>值，说明对值进行排序后，第一个值应该出现在第二个值之前还是之后。如果第一个值出现在第二个值<em>之前</em>，排序闭包需要返回<code>true</code>，否则返回<code>false</code>。</p><p>这个例子是对一个&#39; String &#39;值的数组进行排序，因此排序闭包需要是一个类型为&#39; (String, String) -&gt; Bool &#39;的函数。</p><p>提供排序闭包的一种方法是编写正确类型的正常函数，并将其作为参数传递给<code>sorted(by:)</code>方法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">backward</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> s1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> s2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> s1 <span class="token operator">&gt;</span> s2
<span class="token punctuation">}</span>
<span class="token keyword">var</span> reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> backward<span class="token punctuation">)</span>
<span class="token comment">// reversedNames is equal to [&quot;Ewa&quot;, &quot;Daniella&quot;, &quot;Chris&quot;, &quot;Barry&quot;, &quot;Alex&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果第一个字符串（<code>s1</code>）大于第二个字符串（<code>s2</code>），则 <code>backward(_:_:)</code>函数将返回<code>true</code>，表明<code>s1</code>应该出现在排序数组的<code>s2</code>之前。对于字符串中的字符，“大于”意味着“在字母表中出现得晚于”。这意味着字母<code>&quot;B&quot;</code>大于字母<code>&quot;A&quot;</code>字符串<code>&quot;Tom&quot;</code>大于字符串<code>&quot;Tim&quot;</code>这给出了一个反向字母排序，将<code>&quot;Barry&quot;</code>放在<code>&quot;Alex&quot;</code>之前，以此类过。</p><p>然而，这是一种相当冗长的方式来编写本质上是一个单表达式函数(&#39; a &gt;b &#39;)。在这个例子中，最好使用闭包表达式语法内联编写排序闭包。</p><h3 id="嵌套表达式语法" tabindex="-1"><a class="header-anchor" href="#嵌套表达式语法" aria-hidden="true">#</a> 嵌套表达式语法</h3><p>嵌套表达式语法具有以下一般形式：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">{</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">return</span> type <span class="token keyword">in</span>
   statements
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套表达式语法中的<em>参数</em>可以是输入输出参数，但它们不能有默认值。如果您命名变量参数，则可以使用变量参数。元组也可以用作参数类型和返回类型。</p><p>下面的示例显示了上面的向<code>backward(_:_:)</code>函数的闭包表达式版本：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span>
   <span class="token keyword">return</span> s1 <span class="token operator">&gt;</span> s2
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这个内联闭包的形参声明和返回类型与&#39; backward(:😃 &#39;函数的声明相同。在这两种情况下，它都被写成&#39; (s1: String, s2: String) -&gt; Bool &#39;。但是，对于内联闭包表达式，参数和返回类型写在花括号的*内部，而不是在花括号的外面。</p><p>闭包正文的开头由关键字引入。此关键字表示闭包参数和返回类型的定义已经完成，闭包的主体即将开始。</p><p>由于闭包的主体太短，它甚至可以写在一行上：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span> <span class="token keyword">return</span> s1 <span class="token operator">&gt;</span> s2 <span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这表明对<code>sorted(by:)</code>方法的总体调用保持不变。一对括号仍然包裹着方法的整个参数。然而，这个论点现在是一个内联闭包。</p><h3 id="从上下文推断类型" tabindex="-1"><a class="header-anchor" href="#从上下文推断类型" aria-hidden="true">#</a> 从上下文推断类型</h3><p>因为排序闭包是作为参数传递给方法的，所以Swift可以推断出其参数的类型以及返回值的类型。&#39; sorted(by:) &#39;方法是在一个字符串数组上调用的，所以它的参数必须是一个类型为&#39; (String, String) -&gt; Bool &#39;的函数。这意味着&#39; (String, String) &#39;和&#39; Bool &#39;类型不需要作为闭包表达式定义的一部分编写。因为所有类型都可以被推断，所以返回箭头(&#39; -&gt; &#39;)和形参名称周围的括号也可以被省略:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> s1<span class="token punctuation">,</span> s2 <span class="token keyword">in</span> <span class="token keyword">return</span> s1 <span class="token operator">&gt;</span> s2 <span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当将闭包作为内联闭包表达式传递给函数或方法时，始终可以推断参数类型和返回类型。因此，当闭包用作函数或方法参数时，您永远不需要以最完整的形式编写内联闭包。</p><p>尽管如此，如果您愿意，您仍然可以明确这些类型，如果这能避免代码读者的歧义，则鼓励这样做。在<code>sorted(by:)</code>方法的情况下，从正在进行排序的事实中可以清楚地看出闭包的目的，读者可以安全地假设闭包可能与<code>String</code>值一起工作，因为它有助于对字符串数组进行排序。</p><h3 id="单表达式关闭的隐式返回" tabindex="-1"><a class="header-anchor" href="#单表达式关闭的隐式返回" aria-hidden="true">#</a> 单表达式关闭的隐式返回</h3><p>单表达式闭包可以通过从声明中省略<code>return</code>关键字来隐式返回其单个表达式的结果，如上一个示例的这个版本：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> s1<span class="token punctuation">,</span> s2 <span class="token keyword">in</span> s1 <span class="token operator">&gt;</span> s2 <span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，&#39; sorted(by:) &#39;方法的参数的函数类型明确表示闭包必须返回&#39; Bool &#39;值。因为闭包的主体包含一个返回&#39; Bool &#39;值的表达式(&#39; s1 &gt; s2 &#39;)，所以没有歧义，并且&#39; return &#39;关键字可以被省略。</p><h3 id="运算符方法" tabindex="-1"><a class="header-anchor" href="#运算符方法" aria-hidden="true">#</a> 运算符方法</h3><p>实际上，有更<em>短</em>的方法来编写上面的闭包表达式。Swift的<code>String</code>类型将其大于运算符（<code>&gt;</code>）的字符串特定实现定义为具有两个<code>String</code>类型参数的方法，并返回<code>Bool</code>类型的值。这完全符合<code>sorted(by:)</code>方法所需的方法类型。因此，您可以简单地传递大于运算符，Swift将推断您想要使用其字符串特定的实现：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,34),h={href:"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID42",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="尾随关闭" tabindex="-1"><a class="header-anchor" href="#尾随关闭" aria-hidden="true">#</a> 尾随关闭</h2><p>如果您需要将闭包表达式传递给函数作为函数的最终参数，并且闭包表达式很长，则将其写为<em>尾随闭包</em>可能会有用。您在函数调用的括号后写一个尾随闭包，即使尾随闭包仍然是函数的参数。当您使用尾随闭包语法时，您不会将第一个闭包的参数标签作为函数调用的一部分。函数调用可以包括多个尾随闭包；然而，以下前几个示例使用单个尾随闭包。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunctionThatTakesAClosure</span><span class="token punctuation">(</span>closure<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// function body goes here</span>
<span class="token punctuation">}</span>

<span class="token comment">// 下面是如何在不使用末尾闭包的情况下调用这个函数:</span>

<span class="token function">someFunctionThatTakesAClosure</span><span class="token punctuation">(</span>closure<span class="token punctuation">:</span> <span class="token punctuation">{</span>
   <span class="token comment">// 结束的身体在这里</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 下面是如何使用末尾闭包来调用这个函数:</span>

<span class="token function">someFunctionThatTakesAClosure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// trailing closure&#39;s body goes here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_={href:"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID97",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"sorted(by:)",-1),x=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token short-argument">$0</span> <span class="token operator">&gt;</span> <span class="token short-argument">$1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果闭包表达式作为函数或方法的唯一参数提供，并且您将该表达式作为尾随闭包提供，则在调用函数时，您无需在函数或方法名称后写一对括号<code>()</code>）：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>reversedNames <span class="token operator">=</span> names<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span> <span class="token short-argument">$0</span> <span class="token operator">&gt;</span> <span class="token short-argument">$1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当闭包足够长，无法将其内联写在一行上时，尾随闭包最有用。例如，Swift的<code>Array</code>类型有一个<code>map(_:)</code>方法，该方法以闭包表达式为单个参数。为数组中的每个项目调用一次闭包，并返回该项目的替代映射值（可能是其他类型）。您通过在传递给<code>map(_:)</code>的闭包中编写代码来指定映射的性质和返回值的类型。</p><p>将提供的闭包应用于每个数组元素后，<code>map(_:)</code>方法返回一个包含所有新映射值的新数组，顺序与原始数组中的相应值相同。</p><p>下面介绍如何使用带有尾随闭包的&#39; map(😃 &#39;方法将&#39; Int &#39;值的数组转换为&#39; String &#39;值的数组。数组[16,58,510]被用来创建新的数组[&quot;OneSix&quot;， &quot;FiveEight&quot;， &quot;FiveOneZero&quot;]:</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> digitNames <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Zero&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;One&quot;</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Two&quot;</span></span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Three&quot;</span></span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Four&quot;</span></span><span class="token punctuation">,</span>
   <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Five&quot;</span></span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Six&quot;</span></span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Seven&quot;</span></span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Eight&quot;</span></span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nine&quot;</span></span>
<span class="token punctuation">]</span>
<span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">510</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码创建了整数数字与其名称的英语版本之间的映射词典。它还定义了一个整数数数组，准备转换为字符串。</p><p>您现在可以使用<code>numbers</code>数组创建<code>String</code>值数组，方法是将闭包表达式作为尾随闭包传递到数组的<code>map(_:)</code>方法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> strings <span class="token operator">=</span> numbers<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span>
   <span class="token keyword">var</span> number <span class="token operator">=</span> number
   <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span>
   <span class="token keyword">repeat</span> <span class="token punctuation">{</span>
       output <span class="token operator">=</span> digitNames<span class="token punctuation">[</span>number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">!</span> <span class="token operator">+</span> output
       number <span class="token operator">/=</span> <span class="token number">10</span>
   <span class="token punctuation">}</span> <span class="token keyword">while</span> number <span class="token operator">&gt;</span> <span class="token number">0</span>
   <span class="token keyword">return</span> output
<span class="token punctuation">}</span>
<span class="token comment">// strings is inferred to be of type [String]</span>
<span class="token comment">// its value is [&quot;OneSix&quot;, &quot;FiveEight&quot;, &quot;FiveOneZero&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>map(_:)</code>方法为数组中的每个项调用闭包表达式一次。您不需要指定闭包输入参数<code>number</code>的类型，因为类型可以从要映射的数组中的值中推断出来。</p><p>在本例中，变量<code>number</code>使用闭包<code>number</code>参数的值初始化，以便可以在闭包主体内修改该值。（函数和闭包的参数始终是常量。）闭包表达式还指定了<code>String</code>的返回类型，以指示将存储在映射输出数组中的类型。</p><p>闭包表达式每次调用时都会构建一个名为<code>output</code>的字符串。它使用剩余运算符（<code>number%10</code>）计算<code>number</code>的最后一个数字，并使用此数字在<code>digitNames</code>字典中查找适当的字符串。闭包可用于创建任何大于零的整数的字符串表示形式。</p><p>注意</p><p>对<code>digitNames</code>字典下标的调用后是感叹号（<code>!</code>），因为字典下标返回一个可选值，表示如果键不存在，字典查找可能会失败。在上面的示例中，保证<code>number%10</code>始终是<code>digitNames</code>字典的有效下标键，因此使用感叹号来强制解开存储在下标可选返回值中的<code>String</code>值。</p><p>从<code>digitNames</code>字典中检索到的字符串被添加到<code>output</code>的<em>前面</em>，有效地反向构建数字的字符串版本。（表达式<code>number%10</code>对16、<code>58</code>为<code>8</code>，对<code>510</code>值为<code>0</code>。）</p><p>然后将<code>number</code>变量除以10。因为它是一个整数，所以它在分区期间四舍五入，所以<code>16</code>变成1，<code>58</code>变成5，<code>510</code>变成51。</p><p>重复该过程，直到<code>number</code>等于<code>0</code>，此时<code>output</code>字符串由闭包返回，并通过<code>map(_:)</code>方法添加到输出数组中。</p><p>在上述示例中使用尾随闭包语法，在闭包支持的函数之后立即整齐地封装闭包的功能，而无需将整个闭包包包在<code>map(_:)</code>方法的外括号中。</p><p>如果一个函数需要多个闭包，则省略第一个尾随闭包的参数标签，并标记剩余的尾随闭包。例如，下面的功能加载照片库的图片：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">loadPicture</span><span class="token punctuation">(</span>from server<span class="token punctuation">:</span> <span class="token class-name">Server</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Picture</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">,</span> onFailure<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token keyword">let</span> picture <span class="token operator">=</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;photo.jpg&quot;</span></span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">completion</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您调用此函数加载图片时，您提供了两个闭包。第一个闭包是一个完成处理程序，在成功下载后显示图片。第二个闭包是一个错误处理程序，向用户显示错误。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">loadPicture</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> someServer<span class="token punctuation">)</span> <span class="token punctuation">{</span> picture <span class="token keyword">in</span>
   someView<span class="token punctuation">.</span>currentPicture <span class="token operator">=</span> picture
<span class="token punctuation">}</span> onFailure<span class="token punctuation">:</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Couldn&#39;t download the next picture.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，<code>loadPicture(from:completion:onFailure:)</code>函数将其网络任务发送到后台，并在网络任务完成后调用两个完成处理程序之一。以这种方式编写该功能可以让您干净地将负责处理网络故障的代码与成功下载后更新用户界面的代码分开，而不是只使用一个处理这两种情况的闭包。</p><h2 id="捕捉价值观" tabindex="-1"><a class="header-anchor" href="#捕捉价值观" aria-hidden="true">#</a> 捕捉价值观</h2><p>闭包可以从定义它的周围上下文中<em>捕获</em>常量和变量。然后，闭包可以从其主体内引用和修改这些常量和变量的值，即使定义常量和变量的原始范围不再存在。</p><p>在Swift中，可以捕获值的最简单闭包形式是写在另一个函数主体中的嵌套函数。嵌套函数可以捕获其外部函数的任何参数，也可以捕获外部函数中定义的任何常量和变量。</p><p>这里有一个名为<code>makeIncrementer</code>的函数的示例，它包含一个名为<code>incrementer</code>嵌套函数。嵌套<code>incrementer()</code>函数从其周围的上下文捕获两个值，<code>runningTotal</code>和<code>amount</code>。捕获这些值后，<code>makeIncrementer</code>将作为闭包返回，每次调用时按<code>amount</code>增加<code>runningTotal</code>。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">makeIncrementer</span><span class="token punctuation">(</span>forIncrement amount<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> runningTotal <span class="token operator">=</span> <span class="token number">0</span>
   <span class="token keyword">func</span> <span class="token function-definition function">incrementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
       runningTotal <span class="token operator">+=</span> amount
       <span class="token keyword">return</span> runningTotal
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> incrementer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),S=s("em",null,"函数",-1),I={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID177",target:"_blank",rel:"noopener noreferrer"},T=t(`<p><code>makeIncrementer(forIncrement:)</code>函数定义了一个名为<code>runningTotal</code>的整数变量，以存储将返回的增量的当前运行总数。此变量初始化值为<code>0</code>。</p><p><code>makeIncrementer(forIncrement:)</code>函数具有单个<code>Int</code>参数，参数标签为<code>forIncrement</code>，参数名称为<code>amount</code>。传递给此参数的参数值指定每次调用返回的增量函数时，<code>runningTotal</code>应该增加多少。<code>makeIncrementer</code>函数定义了一个名为<code>incrementer</code>的嵌套函数，该函数执行实际增量。此函数只需为<code>runningTotal</code>添加<code>amount</code>，然后返回结果。</p><p>当孤立地考虑时，嵌套<code>incrementer()</code>函数可能看起来不寻常：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">incrementer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
   runningTotal <span class="token operator">+=</span> amount
   <span class="token keyword">return</span> runningTotal
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>incrementer()</code>函数没有任何参数，但它指的是在其函数主体内<code>runningTotal</code>和<code>amount</code>。它通过捕获对周围函数中<code>runningTotal</code>和<code>amount</code>的<em>引用</em>，并在自己的功能体中使用它们来做到这一点。通过引用捕获确保在<code>makeIncrementer</code>调用结束时，<code>runningTotal</code>和<code>amount</code>不会消失，并确保下次调用<code>incrementer</code>函数时<code>runningTotal</code>可用。</p><blockquote><p>注意</p><p>作为优化，如果值没有被闭包突变，并且值在闭包创建后没有突变，则可以捕获和存储该值<em>的副本</em>。</p></blockquote><p>Swift 还负责处理不再需要的变量时涉及的所有内存管理。</p><p>以下是<code>makeIncrementer</code>在起作用的一个例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> incrementByTen <span class="token operator">=</span> <span class="token function">makeIncrementer</span><span class="token punctuation">(</span>forIncrement<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此示例设置了一个名为<code>incrementByTen</code>的常量，以引用每次调用时为其<code>runningTotal</code>变量添加<code>10</code>增量函数。多次调用函数会显示此行为：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">incrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 10</span>
<span class="token function">incrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 20</span>
<span class="token function">incrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您创建第二个增量器，它将对一个新的单独<code>runningTotal</code>变量有自己的存储引用：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> incrementBySeven <span class="token operator">=</span> <span class="token function">makeIncrementer</span><span class="token punctuation">(</span>forIncrement<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token function">incrementBySeven</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用原始增量器（<code>incrementByTen</code>）继续增加自己的<code>runningTotal</code>变量，并且不影响<code>incrementBySeven</code>捕获的变量：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">incrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 40</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15),B=s("p",null,"注意",-1),C=s("em",null,"采集列表",-1),P={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID56",target:"_blank",rel:"noopener noreferrer"},N=t(`<h2 id="关闭是参考类型" tabindex="-1"><a class="header-anchor" href="#关闭是参考类型" aria-hidden="true">#</a> 关闭是参考类型</h2><p>在上面的例子中，&#39; incrementBySeven &#39;和&#39; incrementByTen &#39;是常量，但是这些常量所引用的闭包仍然能够增加它们捕获的&#39; runningTotal &#39;变量。这是因为函数和闭包都是引用类型。</p><p>每当您将函数或闭包分配给常量或变量时，您实际上都会将该常量或变量设置为对函数或闭包的<em>引用</em>。在上面的示例中，<code>incrementByTen</code><em>指的是</em>闭包的选择是常量，而不是闭包本身的内容。</p><p>这也意味着，如果您将闭包分配给两个不同的常量或变量，这两个常量或变量都引用相同的闭包。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> alsoIncrementByTen <span class="token operator">=</span> incrementByTen
<span class="token function">alsoIncrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 50</span>

<span class="token function">incrementByTen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// returns a value of 60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例表明，调用<code>alsoIncrementByTen</code>与调用<code>incrementByTen</code>相同。由于它们都引用相同的闭包，因此它们都会增加并返回相同的运行总数。</p><h2 id="逃避关闭" tabindex="-1"><a class="header-anchor" href="#逃避关闭" aria-hidden="true">#</a> 逃避关闭</h2><p>当闭包作为参数传递给函数时，闭包被称为<em>转义</em>函数，但在函数返回后调用闭包。当您声明一个以闭包作为其参数之一的函数时，您可以在参数类型之前编写<code>@escaping</code>，以指示允许闭包转义。</p><p>闭包可以转义的一种方法是存储在函数之外定义的变量中。例如，许多启动异步操作的函数将闭包参数作为完成处理程序。该函数在开始操作后返回，但在操作完成之前不会调用闭包——闭包需要转义，以便稍后调用。例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> completionHandlers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">func</span> <span class="token function-definition function">someFunctionWithEscapingClosure</span><span class="token punctuation">(</span>completionHandler<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   completionHandlers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>completionHandler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>someFunctionWithEscapingClosure(_:)</code>函数以闭包为参数，并将其添加到函数之外声明的数组中。如果您没有用<code>@escaping</code>标记此函数的参数，您将收到编译时错误。</p>`,11),F=s("code",null,"self",-1),L=s("code",null,"self",-1),E=s("code",null,"self",-1),D={href:"https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>通常，闭包通过在闭包正文中使用变量来隐式捕获变量，但在这种情况下，您需要显式变量。如果您想捕获<code>self</code>，请在使用它时显式写入<code>self</code>，或将<code>self</code>包含在闭包的捕获列表中。写<code>self</code>明确可以让您表达自己的意图，并提醒您确认没有参考周期。例如，在下面的代码中，传递给<code>someFunctionWithEscapingClosure(_:)</code>的闭包显式引用<code>self</code>显式。相比之下，传递给<code>someFunctionWithNonescapingClosure(_:)</code>的闭包是一个不可转义闭包，这意味着它可以隐式引用<code>self</code>。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">someFunctionWithNonescapingClosure</span><span class="token punctuation">(</span>closure<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
   <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       someFunctionWithEscapingClosure <span class="token punctuation">{</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span>
       someFunctionWithNonescapingClosure <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">200</span> <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token class-name">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
instance<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;200&quot;</span>

completionHandlers<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是<code>doSomething()</code>的一个版本，通过将其包含在闭包的捕获列表中来捕获<code>self</code>，然后隐含地引用<code>self</code>：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">SomeOtherClass</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
   <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       someFunctionWithEscapingClosure <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span>
       someFunctionWithNonescapingClosure <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">200</span> <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),W=s("code",null,"self",-1),G=s("code",null,"self",-1),V=s("code",null,"self",-1),O=s("code",null,"self",-1),H={href:"https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID88",target:"_blank",rel:"noopener noreferrer"},$=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">SomeStruct</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span>
   <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       someFunctionWithNonescapingClosure <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">200</span> <span class="token punctuation">}</span>  <span class="token comment">// Ok</span>
       someFunctionWithEscapingClosure <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span>     <span class="token comment">// Error</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中对<code>someFunctionWithEscapingClosure</code>函数的调用是一个错误，因为它位于突变方法中，因此<code>self</code>是可变的。这违反了规逃逸闭包不能捕获结构对<code>self</code>的可变引用的规则。</p><h2 id="自动关闭" tabindex="-1"><a class="header-anchor" href="#自动关闭" aria-hidden="true">#</a> 自动关闭</h2><p><em>自动闭包</em>是自动创建的闭包，用于包装作为参数传递给函数的表达式。它不需要任何参数，当调用它时，它会返回包裹在里面的表达式的值。这种语法便利性允许您通过编写正态表达式而不是显式闭包来省略函数参数周围的大括号。</p><p>通常<em>调用</em>带有自动闭包的函数，但<em>实现</em>这类函数并不常见。例如，<code>assert(condition:message:file:line:)</code>函数的<code>condition</code>和<code>message</code>参数接受一个自动闭包;它的“condition”参数仅在调试版本中计算，而它的“message”参数仅在“condition”为“false”时计算。</p><p>自动关闭允许您延迟评估，因为在您调用关闭之前，内部代码不会运行。延迟评估对于具有副作用或计算成本的代码非常有用，因为它允许您控制代码何时进行评估。以下代码显示了关闭如何延迟评估。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> customersInLine <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Chris&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ewa&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Barry&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Daniella&quot;</span></span><span class="token punctuation">]</span>
<span class="token function">print</span><span class="token punctuation">(</span>customersInLine<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;5&quot;</span>

<span class="token keyword">let</span> customerProvider <span class="token operator">=</span> <span class="token punctuation">{</span> customersInLine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>customersInLine<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;5&quot;</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Now serving </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">customerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Now serving Chris!&quot;</span>
<span class="token function">print</span><span class="token punctuation">(</span>customersInLine<span class="token punctuation">.</span>count<span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使闭包内的代码删除了<code>customersInLine</code>数组的第一个元素，但在实际调用闭包之前，数组元素也不会被删除。如果从未调用闭包，则永远不会计算闭包内的表达式，这意味着永远不会删除数组元素。请注意，<code>customerProvider</code>的类型不是<code>String</code>，而是<code>()-&gt;String</code>——一个没有返回字符串的参数的函数。</p><p>当您将闭包作为参数传递给函数时，您将获得相同的延迟评估行为。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// customersInLine is [&quot;Alex&quot;, &quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]</span>
<span class="token keyword">func</span> <span class="token function-definition function">serve</span><span class="token punctuation">(</span>customer customerProvider<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Now serving </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">customerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">serve</span><span class="token punctuation">(</span>customer<span class="token punctuation">:</span> <span class="token punctuation">{</span> customersInLine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Now serving Alex!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面清单中的&#39; serve(customer:) &#39;函数接受一个显式的闭包，该闭包返回客户的名字。下面的&#39; serve(customer:) &#39;版本执行了相同的操作，但它没有采用显式闭包，而是通过使用&#39; @autoclosure &#39;属性标记其参数的类型来接受一个自动闭包。现在你可以调用这个函数，就好像它有一个&#39; String &#39;参数而不是一个闭包一样。参数会自动转换为闭包，因为&#39; customerProvider &#39;参数的类型是用&#39; @autoclosure &#39;属性标记的。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// customersInLine is [&quot;Ewa&quot;, &quot;Barry&quot;, &quot;Daniella&quot;]</span>
<span class="token keyword">func</span> <span class="token function-definition function">serve</span><span class="token punctuation">(</span>customer customerProvider<span class="token punctuation">:</span> <span class="token attribute atrule">@autoclosure</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Now serving </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">customerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">serve</span><span class="token punctuation">(</span>customer<span class="token punctuation">:</span> customersInLine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Now serving Ewa!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p><p>过度使用自动关闭可能会使您的代码难以理解。上下文和函数名称应明确表示正在推迟评估。</p></blockquote>`,13),Z=s("code",null,"@autoclosure",-1),j=s("code",null,"@escaping",-1),R=s("code",null,"@escaping",-1),z={href:"https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546",target:"_blank",rel:"noopener noreferrer"},J=t(`<div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// customersInLine is [&quot;Barry&quot;, &quot;Daniella&quot;]</span>
<span class="token keyword">var</span> customerProviders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">func</span> <span class="token function-definition function">collectCustomerProviders</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> customerProvider<span class="token punctuation">:</span> <span class="token attribute atrule">@autoclosure</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   customerProviders<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>customerProvider<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">collectCustomerProviders</span><span class="token punctuation">(</span>customersInLine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">collectCustomerProviders</span><span class="token punctuation">(</span>customersInLine<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Collected </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">customerProviders<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> closures.&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">// Prints &quot;Collected 2 closures.&quot;</span>
<span class="token keyword">for</span> customerProvider <span class="token keyword">in</span> customerProviders <span class="token punctuation">{</span>
   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Now serving </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token function">customerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// Prints &quot;Now serving Barry!&quot;</span>
<span class="token comment">// Prints &quot;Now serving Daniella!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>collectCustomerProviders(_:)</code>函数将闭包附加到<code>customerProviders</code>数组中，而不是将传递给它的闭包作为其<code>customerProvider</code>参数。数组声明在函数范围之外，这意味着数组中的闭包可以在函数返回后执行。因此，必须允许<code>customerProvider</code>参数的值转义函数的范围。</p>`,2);function K(M,Q){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,r,d,k,s("blockquote",null,[m,s("p",null,[n("如果您不熟悉捕获的概念，请不要担心。下文在《"),s("a",v,[n("捕捉价值观》"),e(a)]),n("中对此进行了详细解释。")])]),s("p",null,[s("a",g,[n("函数"),e(a)]),n("中引入的全局和嵌套函数实际上是闭包的特殊情况。关闭采取三种形式之一：")]),b,s("p",null,[n("Nested "),s("a",f,[n("Functions"),e(a)]),n("中引入的嵌套函数是命名和定义自包含代码块作为更大函数的一部分的便捷手段。然而，在没有完整声明和名称的情况下编写类似函数的构造的较短版本有时是有用的。当您使用将函数作为一个或多个参数的函数或方法时，尤其如此。")]),w,s("p",null,[n("有关运算符方法的更多信息，请参阅"),s("a",h,[n("运算符方法"),e(a)]),n("。")]),q,s("p",null,[n("上面的"),s("a",_,[n("闭包表达式语法"),e(a)]),n("部分的字符串排序闭包可以在"),y,n("方法的括号之外写成尾随闭包：")]),x,s("p",null,[n("' makeIncrementer '的返回类型是' ()-> Int '。这意味着它返回一个"),S,n("，而不是一个简单的值。它返回的函数没有参数，每次调用都返回一个' Int '值。要了解函数如何返回其他函数，请参阅"),s("a",I,[n("函数类型作为返回类型"),e(a)]),n("。")]),T,s("blockquote",null,[B,s("p",null,[n("如果您为类实例的属性分配闭包，并且闭包通过引用实例或其成员来捕获该实例，您将在闭包和实例之间创建一个强大的引用周期。Swift 使用"),C,n("来打破这些强大的参考周期。有关更多信息，请参阅"),s("a",P,[n("关闭的强参考周期"),e(a)]),n("。")])]),N,s("p",null,[n("如果"),F,n("引用类的实例，则引用"),L,n("的转义闭包需要特殊考虑。在逃逸闭合中捕获"),E,n("很容易意外地创建一个强大的参考周期。有关参考周期的信息，请参阅"),s("a",D,[n("自动参考计数"),e(a)]),n("。")]),A,s("p",null,[n("如果"),W,n("是结构或枚举的实例，您可以始终隐式引用"),G,n("。然而，当"),V,n("是结构或枚举的实例时，转义闭包无法捕获对"),O,n("的可变引用。结构和枚举不允许共享可变性，正如"),s("a",H,[n("结构和枚举是值类型"),e(a)]),n("中讨论的那样。")]),$,s("p",null,[n("如果您想要一个允许转义的自动关闭，请使用"),Z,n("和"),j,n("属性。"),R,n("属性在上文的"),s("a",z,[n("“逃避关闭”"),e(a)]),n("中进行了描述。")]),J])}const X=o(l,[["render",K],["__file","16.swift-closures.html.vue"]]);export{X as default};
