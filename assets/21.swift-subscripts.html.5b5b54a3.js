import{_ as r,r as c,o as n,c as s,a as o,b as e,d as t,e as l}from"./app.4659d0e0.js";const a={},d=l('<h1 id="swift基础-下标" tabindex="-1"><a class="header-anchor" href="#swift基础-下标" aria-hidden="true">#</a> Swift基础 - 下标</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html</p><p>类、结构和枚举可以定义<em>下标</em>，下标是访问集合、列表或序列成员元素的快捷方式。您可以使用下标按索引设置和检索值，而无需单独的设置和检索方法。例如，您可以以<code>someArray[index]</code>的形式访问数<code>Array</code>实例中的元素，以<code>someDictionary[key]</code>的形式访问aDictionary实例中的元素。</p><p>您可以为单个类型定义多个下标，并根据您传递给下标的索引值类型选择要使用的相应下标重载。下标不限于单个维度，您可以使用多个输入参数定义下标，以满足自定义类型的需求。</p><h2 id="下标语法" tabindex="-1"><a class="header-anchor" href="#下标语法" aria-hidden="true">#</a> 下标语法</h2><p>下标使您能够通过在实例名称后的方括号中写入一个或多个值来查询类型的实例。它们的语法与实例方法语法和计算属性语法相似。您使用下标关键字编写下标定义，并以与实例方法相同的方式指定一个或多个输入参数和返回类型。与实例方法不同，下标可以是读写或只读。此行为由获取者和设置器以与计算属性相同的方式进行通信：</p><ol><li>subscript(index: Int) -&gt; Int {</li><li>​ get {</li><li>​ // Return an appropriate subscript value here.</li><li>​ }</li><li>​ set(newValue) {</li><li>​ // Perform a suitable setting action here.</li><li>​ }</li><li>}</li></ol><p><code>newValue</code>的类型与下标的返回值相同。与计算属性一样，您可以选择不指定setter的<code>(newValue)</code>参数。如果您自己不提供一个名为<code>newValue</code>默认参数，则会向您的设置器提供一个参数。</p><p>与只读计算属性一样，您可以通过删除<code>get</code>关键字及其大括号来简化只读下标的声明：</p><ol><li>subscript(index: Int) -&gt; Int {</li><li>​ // Return an appropriate subscript value here.</li><li>}</li></ol><p>以下是只读下标实现的示例，它定义了一个<code>TimesTable</code>结构来表示整数的<em>n</em>次表：</p><ol><li>struct TimesTable {</li><li>​ let multiplier: Int</li><li>​ subscript(index: Int) -&gt; Int {</li><li>​ return multiplier * index</li><li>​ }</li><li>}</li><li>let threeTimesTable = TimesTable(multiplier: 3)</li><li>print(&quot;six times three is (threeTimesTable[6])&quot;)</li><li>// Prints &quot;six times three is 18&quot;</li></ol><p>在本例中，创建了一个新的<code>TimesTable</code>实例来表示三倍表。这通过将值<code>3</code>传递给结构的<code>initializer</code>作为用于实例<code>multiplier</code>参数的值来表示。</p><p>您可以通过调用其下标来查询<code>threeTimesTable</code>实例，如对<code>threeTimesTable[6]</code>的调用所示。这要求三倍表中的第六个条目，返回值为18或<code>3</code>乘以6。</p><p>注意</p><p><em>n</em>-times表基于固定的数学规则。将<code>threeTimesTable[someIndex]</code>设置为新值是不合适的，因此<code>TimesTable</code>的下标被定义为只读下标。</p><h2 id="下标用法" tabindex="-1"><a class="header-anchor" href="#下标用法" aria-hidden="true">#</a> 下标用法</h2><p>“下标”的确切含义取决于其使用的上下文。下标通常用作访问集合、列表或序列中成员元素的快捷方式。您可以自由地以最适合您特定类或结构功能的方式实现下标。</p><p>例如，Swift的<code>Dictionary</code>类型实现了下标来设置和检索存储在<code>Dictionary</code>实例中的值。您可以通过在下标括号中提供字典键类型的键并将字典值类型的值分配给下标来在字典中设置值：</p><ol><li>var numberOfLegs = [&quot;spider&quot;: 8, &quot;ant&quot;: 6, &quot;cat&quot;: 4]</li><li>numberOfLegs[&quot;bird&quot;] = 2</li></ol><p>The example above defines a variable called <code>numberOfLegs</code> and initializes it with a dictionary literal containing three key-value pairs. The type of the <code>numberOfLegs</code> dictionary is inferred to be <code>[String: Int]</code>. After creating the dictionary, this example uses subscript assignment to add a <code>String</code> key of <code>&quot;bird&quot;</code> and an <code>Int</code> value of <code>2</code> to the dictionary.</p>',21),u=o("code",null,"Dictionary",-1),p={href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID116",target:"_blank",rel:"noopener noreferrer"},m=l('<p>注意</p><p>Swift的<code>Dictionary</code>类型将其键值下标实现为接受并返回<em>可选</em>类型的下标。对于上面的<code>numberOfLegs</code>字典，键值下标接受并返回类型为<code>Int?</code>或“可选int”的值。<code>Dictionary</code>类型使用可选的下标类型来模拟并非每个键都有一个值的事实，并通过为该键分配一个<code>nil</code>值来为该值来提供删除该值的方法。</p><h2 id="下标选项" tabindex="-1"><a class="header-anchor" href="#下标选项" aria-hidden="true">#</a> 下标选项</h2><p>下标可以接受任意数量的输入参数，这些输入参数可以是任何类型的。下标也可以返回任何类型的值。</p>',4),h={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID171",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID169",target:"_blank",rel:"noopener noreferrer"},f=l("<p>类或结构可以根据需要提供尽可能多的下标实现，并将根据使用下标时下标括号中包含的值的类型推断要使用的适当下标。多个下标的定义称为<em>下标重载</em>。</p><p>虽然下标取单个参数最常见，但如果适合您的类型，您也可以定义具有多个参数的下标。以下示例定义了一个<code>Matrix</code>结构，它表示<code>Double</code>值的二维矩阵。<code>Matrix</code>结构的下标需要两个整数参数：</p><ol><li>struct Matrix {</li><li>​ let rows: Int, columns: Int</li><li>​ var grid: [Double]</li><li>​ init(rows: Int, columns: Int) {</li><li>​ self.rows = rows</li><li>​ self.columns = columns</li><li>​ grid = Array(repeating: 0.0, count: rows * columns)</li><li>​ }</li><li>​ func indexIsValid(row: Int, column: Int) -&gt; Bool {</li><li>​ return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns</li><li>​ }</li><li>​ subscript(row: Int, column: Int) -&gt; Double {</li><li>​ get {</li><li>​ assert(indexIsValid(row: row, column: column), &quot;Index out of range&quot;)</li><li>​ return grid[(row * columns) + column]</li><li>​ }</li><li>​ set {</li><li>​ assert(indexIsValid(row: row, column: column), &quot;Index out of range&quot;)</li><li>​ grid[(row * columns) + column] = newValue</li><li>​ }</li><li>​ }</li><li>}</li></ol>",3),b=o("code",null,"Matrix",-1),_=o("code",null,"rows",-1),w=o("code",null,"columns",-1),x=o("code",null,"Double",-1),I=o("code",null,"rows*columns",-1),T=o("code",null,"0.0",-1),y=o("code",null,"0.0",-1),k={href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID501",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html#ID501",target:"_blank",rel:"noopener noreferrer"},D=l('<p>您可以通过将适当的行和列计数传递给其初始化器来构建新的<code>Matrix</code>实例：</p><ol><li>var matrix = Matrix(rows: 2, columns: 2)</li></ol><p>上面的示例创建一个具有两行和两列的新<code>Matrix</code>实例。此<code>Matrix</code>实例的<code>grid</code>数组实际上是矩阵的扁平版本，从左上角读取到右下角：</p><p><img src="https://file.pandacode.cn/blog/202204051610262.png" alt="../_images/subscriptMatrix01_2x.png"></p><p>矩阵中的值可以通过将行和列值传递到下标中来设置，并用逗号分隔：</p><ol><li>matrix[0, 1] = 1.5</li><li>matrix[1, 0] = 3.2</li></ol><p>这两个语句调用下标的设置器，在矩阵的右上角位置设置<code>1.5</code>（<code>row``0</code>，<code>column</code>1），在左下角位置设置<code>3.2</code>（<code>row``1</code>，<code>column``0</code>）：</p><p><img src="https://file.pandacode.cn/blog/202204051611092.png" alt="../_images/subscriptMatrix02_2x.png"></p><p><code>Matrix</code>下标的获取器和设置器都包含一个断言，以检查下标的<code>row</code>和<code>column</code>值是否有效。为了帮助这些断言，<code>Matrix</code>包括一种名为<code>indexIsValid(row:column:)</code>的方便方法，该方法检查请求的<code>row</code>和<code>column</code>是否在矩阵的边界内：</p><ol><li>func indexIsValid(row: Int, column: Int) -&gt; Bool {</li><li>​ return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; column &gt;= 0 &amp;&amp; column &lt; columns</li><li>}</li></ol><p>如果您尝试访问矩阵边界之外的下标，则会触发断言：</p><ol><li>let someValue = matrix[2, 2]</li><li>// This triggers an assert, because [2, 2] is outside of the matrix bounds.</li></ol><h2 id="键入下标" tabindex="-1"><a class="header-anchor" href="#键入下标" aria-hidden="true">#</a> 键入下标</h2><p>如上所述，实例下标是您在特定类型的实例上调用的下标。您还可以定义在类型本身上调用的下标。这种下标被称为<em>类型下标</em>。您可以通过在下标关键字之前写静态关键字来指示类型<code>subscript</code>。类可以使用<code>class</code>关键字，以允许子类覆盖超类对该下标的实现。下面的示例显示了您如何定义和调用类型下标：</p><ol><li>enum Planet: Int {</li><li>​ case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune</li><li>​ static subscript(n: Int) -&gt; Planet {</li><li>​ return Planet(rawValue: n)!</li><li>​ }</li><li>}</li><li>let mars = Planet[4]</li><li>print(mars)</li></ol>',15);function V(v,L){const i=c("ExternalLinkIcon");return n(),s("div",null,[d,o("p",null,[e("有关"),u,e("下标的更多信息，请参阅"),o("a",p,[e("访问和修改词典"),t(i)]),e("。")]),m,o("p",null,[e("与函数一样，下标可以获取不同数量的参数，并为其参数提供默认值，如"),o("a",h,[e("变量参数"),t(i)]),e("和"),o("a",g,[e("默认参数值"),t(i)]),e("中所述。然而，与函数不同，下标不能使用输入输出参数。")]),f,o("p",null,[b,e("提供了一个初始化器，该初始化器接受两个称为"),_,e("和"),w,e("参数，并创建一个足够大的数组来存储类型为"),x,e("的"),I,e("值。矩阵中的每个位置的初始值为"),T,e("。为了实现这一目标，数组的大小和"),y,e("的初始单元格值被传递给数组初始化器，该初始化器创建和初始化正确大小的新数组。此初始化器在"),o("a",k,[e("创建具有默认值的数组"),t(i)]),e("中"),o("a",q,[e("进行了"),t(i)]),e("更详细的描述。")]),D])}const S=r(a,[["render",V],["__file","21.swift-subscripts.html.vue"]]);export{S as default};
