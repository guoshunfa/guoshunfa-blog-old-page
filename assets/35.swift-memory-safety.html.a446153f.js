import{_ as l,r,o as t,c,a as o,b as e,d as n,e as a}from"./app.4659d0e0.js";const p={},s=a('<h1 id="swift基础-内存安全" tabindex="-1"><a class="header-anchor" href="#swift基础-内存安全" aria-hidden="true">#</a> Swift基础 - 内存安全</h1><p>翻译自：https://docs.swift.org/swift-book/LanguageGuide/MemorySafety.html</p><p>默认情况下，Swift 可以防止代码中出现不安全行为。例如，Swift确保变量在使用前初始化，在释放后无法访问内存，并检查数组索引是否有越界错误。</p><p>Swift 还要求修改内存位置的代码独占该内存访问权限，从而确保对同一内存区域的多次访问不会发生冲突。由于 Swift 会自动管理内存，因此在大多数情况下，您根本不需要考虑访问内存。然而，了解潜在冲突在哪里可能发生很重要，这样您就可以避免编写内存访问冲突的代码。如果您的代码确实包含冲突，您将收到编译时或运行时错误。</p><h2 id="了解内存访问冲突" tabindex="-1"><a class="header-anchor" href="#了解内存访问冲突" aria-hidden="true">#</a> 了解内存访问冲突</h2><p>当您执行设置变量值或将参数传递给函数等操作时，代码中会发生对内存的访问。例如，以下代码包含读取访问和写入访问：</p><ol><li>// A write access to the memory where one is stored.</li><li>var one = 1</li><li></li><li>// A read access from the memory where one is stored.</li><li>print(&quot;We&#39;re number (one)!&quot;)</li></ol><p>当您代码的不同部分试图同时访问内存中的同一位置时，可能会发生对内存的访问冲突。同时多次访问内存中的位置可能会产生不可预测或不一致的行为。在Swift中，有几种方法可以修改跨越几行代码的值，从而可以在自己的修改过程中尝试访问一个值。</p><p>通过考虑如何更新写在纸上的预算，您可以看到类似的问题。更新预算是一个两步过程：首先添加项目的名称和价格，然后更改总金额以反映当前列表中的项目。在更新之前和之后，您可以阅读预算中的任何信息并获得正确的答案，如下图所示。</p><p><img src="https://docs.swift.org/swift-book/_images/memory_shopping_2x.png" alt="../_images/memory_shopping_2x.png"></p><p>当您将项目添加到预算中时，它处于临时无效状态，因为总金额尚未更新以反映新添加的项目。在添加项目过程中读取总金额会显示错误的信息。</p><p>此示例还展示了您在修复内存访问冲突时可能会遇到的挑战：有时有多种方法可以解决产生不同答案的冲突，并且并不总是很明显哪个答案是正确的。在本例中，根据您想要原始总金额还是更新的总金额，5美元或320美元可能是正确的答案。在修复相互冲突的访问之前，您必须确定它打算做什么。</p><p>注意</p><p>如果您编写了并发或多线程代码，对内存的访问冲突可能是一个熟悉的问题。然而，这里讨论的相互冲突的访问可能发生在单个线程上，<em>不</em>涉及并发或多线程代码。</p>',14),d={href:"https://developer.apple.com/documentation/xcode/diagnosing_memory_thread_and_crash_issues_early",target:"_blank",rel:"noopener noreferrer"},m=a('<h3 id="内存访问的特点" tabindex="-1"><a class="header-anchor" href="#内存访问的特点" aria-hidden="true">#</a> 内存访问的特点</h3><p>在相互冲突的访问中，内存访问有三个特征需要考虑：访问是读还是写，访问持续时间和被访问的内存位置。具体来说，如果您有两个访问满足以下所有条件，则会发生冲突：</p><ul><li>至少有一个是写入访问或非原子访问。</li><li>他们在内存中访问相同的位置。</li><li>它们的持续时间重叠。</li></ul><p>读写访问之间的区别通常是显而易见的：写入访问会改变内存中的位置，但读取访问不会。内存中的位置是指正在访问的内容，例如变量、常量或属性。内存访问的持续时间要么是即时的，要么是长期的。</p><p>如果操作只使用C原子运算，则该运算是<em>原子</em>运算；否则它是非原子运算。有关这些功能的列表，请参阅<code>stdatomic(3)</code>手册页。</p><p>如果访问无法在访问开始后但在访问结束前运行其他代码，则访问是<em>即时的</em>。就其本质而言，两次即时访问不可能同时发生。大多数内存访问都是即时的。例如，以下代码列表中的所有读写访问都是即时的：</p><ol><li>func oneMore(than number: Int) -&gt; Int {</li><li>​ return number + 1</li><li>}</li><li></li><li>var myNumber = 1</li><li>myNumber = oneMore(than: myNumber)</li><li>print(myNumber)</li><li>// Prints &quot;2&quot;</li></ol><p>然而，有几种访问内存的方法，称为<em>长期</em>访问，跨越了其他代码的执行。即时访问和长期访问的区别在于，其他代码可以在长期访问开始后但在结束之前运行，这被称为<em>重叠</em>。长期访问可以与其他长期访问和即时访问重叠。</p><p>重叠访问主要出现在在函数和方法或结构的突变方法中使用内外参数的代码中。以下各节将讨论使用长期访问的特定类型的Swift代码。</p><h2 id="对in-out参数的访问相互冲突" tabindex="-1"><a class="header-anchor" href="#对in-out参数的访问相互冲突" aria-hidden="true">#</a> 对In-Out参数的访问相互冲突</h2><p>函数可以长期写入其所有输入输出参数。进出参数的写入访问在评估完所有非入出参数后开始，并持续到该函数调用的整个持续时间。如果有多个输入输出参数，写入访问的开始顺序与参数显示的顺序相同。</p><p>这种长期写入访问的一个后果是，即使范围规则和访问控制允许，您也无法访问作为进出传递的原始变量——对原始变量的任何访问都会产生冲突。例如：</p><ol><li>var stepSize = 1</li><li></li><li>func increment(_ number: inout Int) {</li><li>​ number += stepSize</li><li>}</li><li></li><li>increment(&amp;stepSize)</li><li>// Error: conflicting accesses to stepSize</li></ol><p>在上面的代码中，<code>stepSize</code>是一个全局变量，通常可以从<code>increment(_:)</code>访问。然而，对<code>stepSize</code>的读取访问与写入访问<code>number</code>重叠。如下图所示，<code>number</code>和<code>stepSize</code>都指内存中的相同位置。读写访问引用相同的内存，它们重叠，产生冲突。</p><p><img src="https://docs.swift.org/swift-book/_images/memory_increment_2x.png" alt="../_images/memory_increment_2x.png"></p><p>解决这种冲突的一种方法是明确复制<code>stepSize</code>：</p><ol><li>// Make an explicit copy.</li><li>var copyOfStepSize = stepSize</li><li>increment(&amp;copyOfStepSize)</li><li></li><li>// Update the original.</li><li>stepSize = copyOfStepSize</li><li>// stepSize is now 2</li></ol><p>When you make a copy of <code>stepSize</code> before calling <code>increment(_:)</code>, it’s clear that the value of <code>copyOfStepSize</code> is incremented by the current step size. The read access ends before the write access starts, so there isn’t a conflict.</p><p>对进出参数的长期写入访问的另一个后果是，传递单个变量作为同一函数多个输入输出参数的参数会产生冲突。例如：</p><ol><li>func balance(_ x: inout Int, _ y: inout Int) {</li><li>​ let sum = x + y</li><li>​ x = sum / 2</li><li>​ y = sum - x</li><li>}</li><li>var playerOneScore = 42</li><li>var playerTwoScore = 30</li><li>balance(&amp;playerOneScore, &amp;playerTwoScore) // OK</li><li>balance(&amp;playerOneScore, &amp;playerOneScore)</li><li>// Error: conflicting accesses to playerOneScore</li></ol><p>上面的<code>balance(_:_:)</code>函数修改其两个参数，在它们之间平均分配总值。使用<code>playerOneScore</code>和<code>playerTwoScore</code>将其称为参数不会产生冲突——有两个写入访问在时间上重叠，但它们访问内存中的不同位置。相比之下，将<code>playerOneScore</code>作为两个参数的值会产生冲突，因为它试图同时对内存中的同一位置执行两次写入访问。</p><p>注意</p><p>Because operators are functions, they can also have long-term accesses to their in-out parameters. For example, if <code>balance(_:_:)</code> was an operator function named <code>&lt;^&gt;</code>, writing <code>playerOneScore &lt;^&gt; playerOneScore</code> would result in the same conflict as <code>balance(&amp;playerOneScore, &amp;playerOneScore)</code>.</p><h2 id="在方法中自我访问相互冲突" tabindex="-1"><a class="header-anchor" href="#在方法中自我访问相互冲突" aria-hidden="true">#</a> 在方法中自我访问相互冲突</h2><p>结构上的突变方法在方法调用期间具有对<code>self</code>的写入访问权限。例如，考虑一个游戏，其中每个玩家的生命值在受到伤害时会减少，能量量在使用特殊能力时会减少。</p><ol><li>struct Player {</li><li>​ var name: String</li><li>​ var health: Int</li><li>​ var energy: Int</li><li></li><li>​ static let maxHealth = 10</li><li>​ mutating func restoreHealth() {</li><li>​ health = Player.maxHealth</li><li>​ }</li><li>}</li></ol><p>在上面的<code>restoreHealth()</code>方法中，对<code>self</code>的写入访问从方法的开头开始，一直持续到方法返回。在这种情况下，<code>restoreHealth()</code>内部没有其他代码可以重叠访问<code>Player</code>实例的属性。下面的<code>shareHealth(with:)</code>方法将另一个<code>Player</code>实例作为进出参数，从而产生重叠访问的可能性。</p><ol><li>extension Player {</li><li>​ mutating func shareHealth(with teammate: inout Player) {</li><li>​ balance(&amp;teammate.health, &amp;health)</li><li>​ }</li><li>}</li><li></li><li>var oscar = Player(name: &quot;Oscar&quot;, health: 10, energy: 10)</li><li>var maria = Player(name: &quot;Maria&quot;, health: 5, energy: 10)</li><li>oscar.shareHealth(with: &amp;maria) // OK</li></ol><p>在上面的示例中，为奥斯卡的玩家调用<code>shareHealth(with:)</code>方法与Maria的玩家共享健康不会引起冲突。在方法调用期间，对<code>oscar</code>有写入访问权限，因为<code>oscar</code>是突变方法中<code>self</code>的值，并且有对<code>maria</code>的写入访问权限，因为<code>maria</code>是作为进出参数传递的。如下图所示，他们访问内存中的不同位置。尽管这两个写入访问在时间上重叠，但它们不会冲突。</p><p><img src="https://docs.swift.org/swift-book/_images/memory_share_health_maria_2x.png" alt="../_images/memory_share_health_maria_2x.png"></p><p>但是，如果您将<code>oscar</code>作为<code>shareHealth(with:)</code>的参数，则存在冲突：</p><ol><li>oscar.shareHealth(with: &amp;oscar)</li><li>// Error: conflicting accesses to oscar</li></ol><p>突变方法需要在方法持续时间内写入对<code>self</code>的访问权限，而入出参数需要在同一持续时间内写入对<code>teammate</code>的访问权限。在方法中，<code>self</code>和<code>teammate</code>都引用了内存中的相同位置——如下图所示。两个写入访问指的是相同的内存，它们重叠，产生冲突。</p><p><img src="https://docs.swift.org/swift-book/_images/memory_share_health_oscar_2x.png" alt="../_images/memory_share_health_oscar_2x.png"></p><h2 id="对属性的访问相互冲突" tabindex="-1"><a class="header-anchor" href="#对属性的访问相互冲突" aria-hidden="true">#</a> 对属性的访问相互冲突</h2><p>结构、元组和枚举等类型由单个组成值组成，例如结构的属性或元组的元素。由于这些是值类型，因此变异值的任何部分都会改变整个值，这意味着对其中一个属性的读或写访问需要对整个值的读或写访问。例如，对元组元素的重叠写入访问会产生冲突：</p><ol><li>var playerInformation = (health: 10, energy: 20)</li><li>balance(&amp;playerInformation.health, &amp;playerInformation.energy)</li><li>// Error: conflicting access to properties of playerInformation</li></ol><p>在上面的示例中，在元组元素上调用<code>balance(_:_:)</code>会产生冲突，因为对<code>playerInformation</code>写入访问重叠。<code>playerInformation.health</code>和<code>playerInformation.energy</code>都作为输入输出参数传递，这意味着<code>balance(_:_:)</code>需要在函数调用期间写入访问权限。在这两种情况下，对元组元素的写入访问都需要对整个元组进行写入访问。这意味着对<code>playerInformation</code>有两次写入访问，持续时间重叠，导致冲突。</p><p>以下代码显示，对存储在全局变量中的结构属性的重叠写入访问也会出现相同的错误。</p><ol><li>var holly = Player(name: &quot;Holly&quot;, health: 10, energy: 10)</li><li>balance(&amp;holly.health, &amp;holly.energy) // Error</li></ol><p>在实践中，大多数对结构属性的访问可以安全地重叠。例如，如果上面示例中的变量<code>holly</code>更改为局部变量而不是全局变量，编译器可以证明对结构存储属性的重叠访问是安全的：</p><ol><li>func someFunction() {</li><li>​ var oscar = Player(name: &quot;Oscar&quot;, health: 10, energy: 10)</li><li>​ balance(&amp;oscar.health, &amp;oscar.energy) // OK</li><li>}</li></ol><p>在上面的示例中，奥斯卡的健康和能量作为两个内外参数来<code>balance(_:_:)</code>编译器可以证明内存安全得到保留，因为两个存储的属性不会以任何方式交互。</p><p>限制重叠访问结构属性并不总是必要的，以保持内存安全。内存安全是理想的保证，但独家访问是比内存安全更严格的要求——这意味着一些代码保留了内存安全，即使它违反了对内存的独家访问。如果编译器能够证明对内存的非排他性访问仍然是安全的，Swift允许此内存安全代码。具体而言，如果适用以下条件，它可以证明对结构属性的重叠访问是安全的：</p><ul><li>您仅访问实例的存储属性，而不是计算属性或类属性。</li><li>该结构是局部变量的值，而不是全局变量。</li><li>该结构要么不被任何闭包捕获，要么仅由不转义闭包捕获。</li></ul><p>如果编译器无法证明访问是安全的，则不允许访问。</p>',46);function h(y,f){const i=r("ExternalLinkIcon");return t(),c("div",null,[s,o("p",null,[e("如果您从单个线程中对内存的访问存在冲突，Swift保证您在编译时或运行时都会收到错误。对于多线程代码，请使用"),o("a",d,[e("线程消毒器"),n(i)]),e("来帮助检测跨线程的冲突访问。")]),m])}const u=l(p,[["render",h],["__file","35.swift-memory-safety.html.vue"]]);export{u as default};
